; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35209.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@KAHNCFFH@improper?5use@		; `string'
PUBLIC	??_C@_1IK@GEGHCBAI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?2@ ; `string'
PUBLIC	??_C@_1DM@OMNEBCHA@?$AAs?$AAe?$AAt?$AA_?$AAo?$AAk?$AA?$CI?$AAs?$AAe?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_0DG@MPABIIF@Overhead?0?5without?5any?5fuss?0?5the@ ; `string'
PUBLIC	??_C@_1JC@PMOEPIMG@?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DM?$AA?5?$AA3?$AA2?$AA7?$AA6?$AA7?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
EXTRN	__imp__wassert:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__imp_longjmp:PROC
EXTRN	__imp_srand:PROC
EXTRN	__imp_clock:PROC
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@PMOEPIMG@?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DM?$AA?5?$AA3?$AA2?$AA7?$AA6?$AA7?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1JC@PMOEPIMG@?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DM?$AA?5?$AA3?$AA2?$AA7?$AA6?$AA7?$AA?5?$AA?$CG@ DB 'l'
	DB	00H, 'e', 00H, 'v', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '3', 00H, '2', 00H, '7', 00H, '6', 00H, '7', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'O', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ','
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' '
	DB	00H, 'f', 00H, 'u', 00H, 's', 00H, 's', 00H, ',', 00H, ' ', 00H
	DB	't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 's', 00H, ' ', 00H, 'w', 00H, 'e', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, 'g', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '.', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MPABIIF@Overhead?0?5without?5any?5fuss?0?5the@
CONST	SEGMENT
??_C@_0DG@MPABIIF@Overhead?0?5without?5any?5fuss?0?5the@ DB 'Overhead, wi'
	DB	'thout any fuss, the stars were going out.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@OMNEBCHA@?$AAs?$AAe?$AAt?$AA_?$AAo?$AAk?$AA?$CI?$AAs?$AAe?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1DM@OMNEBCHA@?$AAs?$AAe?$AAt?$AA_?$AAo?$AAk?$AA?$CI?$AAs?$AAe?$AAt?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB 's'
	DB	00H, 'e', 00H, 't', 00H, '_', 00H, 'o', 00H, 'k', 00H, '(', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ')', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '"', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'u', 00H, 's'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@GEGHCBAI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?2@
CONST	SEGMENT
??_C@_1IK@GEGHCBAI@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAn?$AAg?$AA?2@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '\', 00H, 'A', 00H, 'G', 00H, 'E', 00H, '\', 00H, 'E', 00H
	DB	'n', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'e', 00H, '\', 00H, 'l'
	DB	00H, 'i', 00H, 'b', 00H, 's', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H, 'z', 00H, 'l'
	DB	00H, 'i', 00H, 'b', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'b', 00H, '\', 00H, 'm', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 'z', 00H, 'i', 00H, 'p', 00H, '\', 00H
	DB	's', 00H, 'k', 00H, 'i', 00H, 'p', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KAHNCFFH@improper?5use@
CONST	SEGMENT
??_C@_0N@KAHNCFFH@improper?5use@ DB 'improper use', 00H	; `string'
PUBLIC	zipClose
PUBLIC	zipCloseFileInZip
PUBLIC	zipCloseFileInZipRaw64
PUBLIC	zipCloseFileInZipRaw
PUBLIC	zipWriteInFileInZip
PUBLIC	zipOpenNewFileInZip
PUBLIC	zipOpenNewFileInZip64
PUBLIC	zipOpenNewFileInZip2_64
PUBLIC	zipOpenNewFileInZip2
PUBLIC	zipOpenNewFileInZip3_64
PUBLIC	zipOpenNewFileInZip3
PUBLIC	zipOpenNewFileInZip4_64
PUBLIC	zipOpen64
PUBLIC	zipOpen
PUBLIC	zipOpen2_64
PUBLIC	zipOpen2
PUBLIC	zipOpen3
PUBLIC	set_end
PUBLIC	set_sweep
PUBLIC	set_free
?calls@?1??crypthead@@9@9 DD 01H DUP (?)		; `crypthead'::`2'::calls
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipClose DD imagerel $LN37
	DD	imagerel $LN37+47
	DD	imagerel $unwind$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zipClose DD imagerel $LN37+47
	DD	imagerel $LN37+85
	DD	imagerel $chain$1$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipClose DD imagerel $LN37+85
	DD	imagerel $LN37+117
	DD	imagerel $chain$2$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipClose DD imagerel $LN37+117
	DD	imagerel $LN37+183
	DD	imagerel $chain$3$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipClose DD imagerel $LN37+183
	DD	imagerel $LN37+286
	DD	imagerel $chain$4$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipClose DD imagerel $LN37+286
	DD	imagerel $LN37+342
	DD	imagerel $chain$5$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$zipClose DD imagerel $LN37+342
	DD	imagerel $LN37+388
	DD	imagerel $chain$6$zipClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_GlobalComment DD imagerel Write_GlobalComment
	DD	imagerel Write_GlobalComment+141
	DD	imagerel $unwind$Write_GlobalComment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord
	DD	imagerel Write_EndOfCentralDirectoryRecord+117
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord+117
	DD	imagerel Write_EndOfCentralDirectoryRecord+276
	DD	imagerel $chain$0$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$Write_EndOfCentralDirectoryRecord DD imagerel Write_EndOfCentralDirectoryRecord+276
	DD	imagerel Write_EndOfCentralDirectoryRecord+292
	DD	imagerel $chain$1$Write_EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryRecord DD imagerel Write_Zip64EndOfCentralDirectoryRecord
	DD	imagerel Write_Zip64EndOfCentralDirectoryRecord+329
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_Zip64EndOfCentralDirectoryLocator DD imagerel Write_Zip64EndOfCentralDirectoryLocator
	DD	imagerel Write_Zip64EndOfCentralDirectoryLocator+133
	DD	imagerel $unwind$Write_Zip64EndOfCentralDirectoryLocator
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipCloseFileInZipRaw64 DD imagerel $LN96
	DD	imagerel $LN96+52
	DD	imagerel $unwind$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipCloseFileInZipRaw64 DD imagerel $LN96+52
	DD	imagerel $LN96+629
	DD	imagerel $chain$3$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipCloseFileInZipRaw64 DD imagerel $LN96+629
	DD	imagerel $LN96+1277
	DD	imagerel $chain$5$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$zipCloseFileInZipRaw64 DD imagerel $LN96+1277
	DD	imagerel $LN96+1294
	DD	imagerel $chain$6$zipCloseFileInZipRaw64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipWriteInFileInZip DD imagerel $LN44
	DD	imagerel $LN44+56
	DD	imagerel $unwind$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zipWriteInFileInZip DD imagerel $LN44+56
	DD	imagerel $LN44+229
	DD	imagerel $chain$0$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipWriteInFileInZip DD imagerel $LN44+229
	DD	imagerel $LN44+340
	DD	imagerel $chain$2$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipWriteInFileInZip DD imagerel $LN44+340
	DD	imagerel $LN44+367
	DD	imagerel $chain$3$zipWriteInFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+37
	DD	imagerel zip64FlushWriteBuffer+118
	DD	imagerel $chain$2$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+118
	DD	imagerel zip64FlushWriteBuffer+123
	DD	imagerel $chain$3$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zip64FlushWriteBuffer DD imagerel zip64FlushWriteBuffer+123
	DD	imagerel zip64FlushWriteBuffer+216
	DD	imagerel $chain$4$zip64FlushWriteBuffer
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip DD imagerel $LN4
	DD	imagerel $LN4+137
	DD	imagerel $unwind$zipOpenNewFileInZip
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip64 DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$zipOpenNewFileInZip64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2_64 DD imagerel $LN4
	DD	imagerel $LN4+151
	DD	imagerel $unwind$zipOpenNewFileInZip2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip2 DD imagerel $LN4
	DD	imagerel $LN4+144
	DD	imagerel $unwind$zipOpenNewFileInZip2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3_64 DD imagerel $LN4
	DD	imagerel $LN4+179
	DD	imagerel $unwind$zipOpenNewFileInZip3_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip3 DD imagerel $LN4
	DD	imagerel $LN4+172
	DD	imagerel $unwind$zipOpenNewFileInZip3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpenNewFileInZip4_64 DD imagerel $LN109
	DD	imagerel $LN109+193
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zipOpenNewFileInZip4_64 DD imagerel $LN109+193
	DD	imagerel $LN109+954
	DD	imagerel $chain$1$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zipOpenNewFileInZip4_64 DD imagerel $LN109+954
	DD	imagerel $LN109+1142
	DD	imagerel $chain$2$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zipOpenNewFileInZip4_64 DD imagerel $LN109+1142
	DD	imagerel $LN109+1156
	DD	imagerel $chain$3$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$zipOpenNewFileInZip4_64 DD imagerel $LN109+1156
	DD	imagerel $LN109+1571
	DD	imagerel $chain$4$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$zipOpenNewFileInZip4_64 DD imagerel $LN109+1571
	DD	imagerel $LN109+1590
	DD	imagerel $chain$5$zipOpenNewFileInZip4_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Write_LocalFileHeader DD imagerel Write_LocalFileHeader
	DD	imagerel Write_LocalFileHeader+629
	DD	imagerel $unwind$Write_LocalFileHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2_64 DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$zipOpen2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen2 DD imagerel $LN8
	DD	imagerel $LN8+78
	DD	imagerel $unwind$zipOpen2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zipOpen3 DD imagerel $LN21
	DD	imagerel $LN21+433
	DD	imagerel $unwind$zipOpen3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$LoadCentralDirectoryRecord DD imagerel LoadCentralDirectoryRecord
	DD	imagerel LoadCentralDirectoryRecord+950
	DD	imagerel $unwind$LoadCentralDirectoryRecord
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+99
	DD	imagerel $unwind$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+99
	DD	imagerel zip64local_SearchCentralDir64+119
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+119
	DD	imagerel zip64local_SearchCentralDir64+309
	DD	imagerel $chain$1$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+309
	DD	imagerel zip64local_SearchCentralDir64+332
	DD	imagerel $chain$2$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64local_SearchCentralDir64 DD imagerel zip64local_SearchCentralDir64+332
	DD	imagerel zip64local_SearchCentralDir64+541
	DD	imagerel $chain$3$zip64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+102
	DD	imagerel $unwind$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+102
	DD	imagerel zip64local_SearchCentralDir+121
	DD	imagerel $chain$0$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+121
	DD	imagerel zip64local_SearchCentralDir+309
	DD	imagerel $chain$1$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+309
	DD	imagerel zip64local_SearchCentralDir+344
	DD	imagerel $chain$2$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$zip64local_SearchCentralDir DD imagerel zip64local_SearchCentralDir+344
	DD	imagerel zip64local_SearchCentralDir+364
	DD	imagerel $chain$3$zip64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong64 DD imagerel zip64local_getLong64
	DD	imagerel zip64local_getLong64+369
	DD	imagerel $unwind$zip64local_getLong64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getLong DD imagerel zip64local_getLong
	DD	imagerel zip64local_getLong+205
	DD	imagerel $unwind$zip64local_getLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getShort DD imagerel zip64local_getShort
	DD	imagerel zip64local_getShort+124
	DD	imagerel $unwind$zip64local_getShort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_getByte DD imagerel zip64local_getByte
	DD	imagerel zip64local_getByte+108
	DD	imagerel $unwind$zip64local_getByte
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$zip64local_putValue DD imagerel zip64local_putValue
	DD	imagerel zip64local_putValue+117
	DD	imagerel $unwind$zip64local_putValue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_data_in_datablock DD imagerel add_data_in_datablock
	DD	imagerel add_data_in_datablock+212
	DD	imagerel $unwind$add_data_in_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_linkedlist DD imagerel free_linkedlist
	DD	imagerel free_linkedlist+32
	DD	imagerel $unwind$free_linkedlist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_datablock DD imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$free_datablock DD imagerel free_datablock+9
	DD	imagerel free_datablock+38
	DD	imagerel $chain$0$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$free_datablock DD imagerel free_datablock+38
	DD	imagerel free_datablock+43
	DD	imagerel $chain$1$free_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$allocate_new_datablock DD imagerel allocate_new_datablock
	DD	imagerel allocate_new_datablock+38
	DD	imagerel $unwind$allocate_new_datablock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$crypthead DD imagerel crypthead
	DD	imagerel crypthead+329
	DD	imagerel $unwind$crypthead
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+107
	DD	imagerel $unwind$init_keys
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_end DD imagerel $LN12
	DD	imagerel $LN12+144
	DD	imagerel $unwind$set_end
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_sweep DD imagerel $LN12
	DD	imagerel $LN12+28
	DD	imagerel $unwind$set_sweep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$set_sweep DD imagerel $LN12+28
	DD	imagerel $LN12+78
	DD	imagerel $chain$0$set_sweep
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$set_sweep DD imagerel $LN12+78
	DD	imagerel $LN12+89
	DD	imagerel $chain$1$set_sweep
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$set_sweep DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+28
	DD	imagerel $unwind$set_sweep
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$set_sweep DD 020521H
	DD	067405H
	DD	imagerel $LN12
	DD	imagerel $LN12+28
	DD	imagerel $unwind$set_sweep
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_sweep DD 040a01H
	DD	07340aH
	DD	06006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_end DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$crypthead DD 0c1c01H
	DD	0e641cH
	DD	0d541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$allocate_new_datablock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$free_datablock DD 021H
	DD	imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$free_datablock DD 020521H
	DD	043405H
	DD	imagerel free_datablock
	DD	imagerel free_datablock+9
	DD	imagerel $unwind$free_datablock
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_datablock DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_linkedlist DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_data_in_datablock DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_putValue DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getByte DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getShort DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_getLong64 DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64local_SearchCentralDir DD 021H
	DD	imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+102
	DD	imagerel $unwind$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64local_SearchCentralDir DD 021H
	DD	imagerel zip64local_SearchCentralDir+102
	DD	imagerel zip64local_SearchCentralDir+121
	DD	imagerel $chain$0$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_SearchCentralDir DD 020521H
	DD	0bc405H
	DD	imagerel zip64local_SearchCentralDir+102
	DD	imagerel zip64local_SearchCentralDir+121
	DD	imagerel $chain$0$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_SearchCentralDir DD 020521H
	DD	0a5405H
	DD	imagerel zip64local_SearchCentralDir
	DD	imagerel zip64local_SearchCentralDir+102
	DD	imagerel $unwind$zip64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir DD 081101H
	DD	0d3411H
	DD	0f00d3211H
	DD	0d009e00bH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64local_SearchCentralDir64 DD 021H
	DD	imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+99
	DD	imagerel $unwind$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64local_SearchCentralDir64 DD 021H
	DD	imagerel zip64local_SearchCentralDir64+99
	DD	imagerel zip64local_SearchCentralDir64+119
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zip64local_SearchCentralDir64 DD 020521H
	DD	0cc405H
	DD	imagerel zip64local_SearchCentralDir64+99
	DD	imagerel zip64local_SearchCentralDir64+119
	DD	imagerel $chain$0$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64local_SearchCentralDir64 DD 020521H
	DD	04d405H
	DD	imagerel zip64local_SearchCentralDir64
	DD	imagerel zip64local_SearchCentralDir64+99
	DD	imagerel $unwind$zip64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64local_SearchCentralDir64 DD 070d01H
	DD	0f009420dH
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$LoadCentralDirectoryRecord DD 091401H
	DD	0f00d6214H
	DD	0d009e00bH
	DD	07005c007H
	DD	030036004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen3 DD 0b2a01H
	DD	02063e42aH
	DD	02062742aH
	DD	02061642aH
	DD	02060342aH
	DD	0205e012aH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2 DD 020901H
	DD	03002f209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpen2_64 DD 020701H
	DD	0110107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_LocalFileHeader DD 0a4401H
	DD	085444H
	DD	0a6413H
	DD	093413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipOpenNewFileInZip4_64 DD 021H
	DD	imagerel $LN109
	DD	imagerel $LN109+193
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipOpenNewFileInZip4_64 DD 020021H
	DD	0af400H
	DD	imagerel $LN109
	DD	imagerel $LN109+193
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipOpenNewFileInZip4_64 DD 021H
	DD	imagerel $LN109
	DD	imagerel $LN109+193
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipOpenNewFileInZip4_64 DD 020021H
	DD	0af400H
	DD	imagerel $LN109
	DD	imagerel $LN109+193
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zipOpenNewFileInZip4_64 DD 040d21H
	DD	0af40dH
	DD	0135408H
	DD	imagerel $LN109
	DD	imagerel $LN109+193
	DD	imagerel $unwind$zipOpenNewFileInZip4_64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip4_64 DD 071201H
	DD	0e00ea212H
	DD	0c00ad00cH
	DD	060077008H
	DD	03006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip3_64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip2_64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip64 DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipOpenNewFileInZip DD 020a01H
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zip64FlushWriteBuffer DD 021H
	DD	imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zip64FlushWriteBuffer DD 021H
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zip64FlushWriteBuffer DD 040a21H
	DD	08e40aH
	DD	076405H
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel zip64FlushWriteBuffer+37
	DD	imagerel $chain$0$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zip64FlushWriteBuffer DD 020521H
	DD	065405H
	DD	imagerel zip64FlushWriteBuffer
	DD	imagerel zip64FlushWriteBuffer+22
	DD	imagerel $unwind$zip64FlushWriteBuffer
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zip64FlushWriteBuffer DD 040a01H
	DD	09340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipWriteInFileInZip DD 021H
	DD	imagerel $LN44
	DD	imagerel $LN44+56
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipWriteInFileInZip DD 020021H
	DD	066400H
	DD	imagerel $LN44
	DD	imagerel $LN44+56
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$zipWriteInFileInZip DD 020521H
	DD	066405H
	DD	imagerel $LN44
	DD	imagerel $LN44+56
	DD	imagerel $unwind$zipWriteInFileInZip
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipWriteInFileInZip DD 081501H
	DD	097415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$zipCloseFileInZipRaw64 DD 021H
	DD	imagerel $LN96
	DD	imagerel $LN96+52
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipCloseFileInZipRaw64 DD 080021H
	DD	06c400H
	DD	077400H
	DD	086400H
	DD	0f5400H
	DD	imagerel $LN96
	DD	imagerel $LN96+52
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipCloseFileInZipRaw64 DD 081421H
	DD	06c414H
	DD	07740fH
	DD	08640aH
	DD	0f5405H
	DD	imagerel $LN96
	DD	imagerel $LN96+52
	DD	imagerel $unwind$zipCloseFileInZipRaw64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipCloseFileInZipRaw64 DD 050c01H
	DD	0f008820cH
	DD	0d004e006H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryLocator DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_Zip64EndOfCentralDirectoryRecord DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$Write_EndOfCentralDirectoryRecord DD 021H
	DD	imagerel Write_EndOfCentralDirectoryRecord
	DD	imagerel Write_EndOfCentralDirectoryRecord+117
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$Write_EndOfCentralDirectoryRecord DD 020521H
	DD	067405H
	DD	imagerel Write_EndOfCentralDirectoryRecord
	DD	imagerel Write_EndOfCentralDirectoryRecord+117
	DD	imagerel $unwind$Write_EndOfCentralDirectoryRecord
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_EndOfCentralDirectoryRecord DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Write_GlobalComment DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$zipClose DD 020021H
	DD	04d400H
	DD	imagerel $LN37
	DD	imagerel $LN37+47
	DD	imagerel $unwind$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$zipClose DD 021H
	DD	imagerel $LN37+47
	DD	imagerel $LN37+85
	DD	imagerel $chain$1$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$zipClose DD 021H
	DD	imagerel $LN37+85
	DD	imagerel $LN37+117
	DD	imagerel $chain$2$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$zipClose DD 020521H
	DD	0a5405H
	DD	imagerel $LN37+85
	DD	imagerel $LN37+117
	DD	imagerel $chain$2$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$zipClose DD 020521H
	DD	0b7405H
	DD	imagerel $LN37+47
	DD	imagerel $LN37+85
	DD	imagerel $chain$1$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$zipClose DD 040a21H
	DD	04d40aH
	DD	0cc405H
	DD	imagerel $LN37
	DD	imagerel $LN37+47
	DD	imagerel $unwind$zipClose
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zipClose DD 050b01H
	DD	0f007420bH
	DD	06003e005H
	DD	03002H
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$dead$ = 8
time	PROC						; COMDAT

; 552  :             return _time64(_Time);

  00000	33 c9		 xor	 ecx, ecx
  00002	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp__time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\skipset.h
;	COMDAT set_free
_TEXT	SEGMENT
set$dead$ = 8
ptr$ = 16
set_free PROC						; COMDAT

; 173  :     (void)set;
; 174  :     free(ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
set_free ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\skipset.h
;	COMDAT set_sweep
_TEXT	SEGMENT
set$ = 48
set_sweep PROC						; COMDAT

; 207  : void set_sweep(set_t *set) {

$LN12:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 208  :     set_node_t *step = set->head->right[0];

  0000a	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0000d	48 8b f1	 mov	 rsi, rcx
  00010	48 8b 58 10	 mov	 rbx, QWORD PTR [rax+16]
  00014	48 8b 1b	 mov	 rbx, QWORD PTR [rbx]

; 209  :     while (step != set->head) {

  00017	48 3b d8	 cmp	 rbx, rax
  0001a	74 32		 je	 SHORT $LN3@set_sweep
  0001c	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
$LL2@set_sweep:

; 210  :         set_node_t *next = step->right[0];      // save link to next node

  00021	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]

; 211  :         set_drop(set, step->key);

  00025	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00028	48 8b 38	 mov	 rdi, QWORD PTR [rax]
  0002b	e8 00 00 00 00	 call	 set_free

; 212  :         set_free(set, step->right);

  00030	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00034	e8 00 00 00 00	 call	 set_free

; 213  :         set_free(set, step);

  00039	48 8b d3	 mov	 rdx, rbx
  0003c	e8 00 00 00 00	 call	 set_free

; 214  :         step = next;

  00041	48 8b df	 mov	 rbx, rdi
  00044	48 3b 3e	 cmp	 rdi, QWORD PTR [rsi]
  00047	75 d8		 jne	 SHORT $LL2@set_sweep

; 209  :     while (step != set->head) {

  00049	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN3@set_sweep:

; 215  :     }
; 216  : }

  0004e	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5e		 pop	 rsi
  00058	c3		 ret	 0
set_sweep ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\skipset.h
;	COMDAT set_end
_TEXT	SEGMENT
set$ = 48
set_end	PROC						; COMDAT

; 268  : void set_end(set_t *set) {

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 269  :     if (set->head != NULL) {

  00006	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	48 85 c0	 test	 rax, rax
  0000f	74 27		 je	 SHORT $LN2@set_end

; 270  :         // Empty the set and free the head node.
; 271  :         if (set->head->right != NULL) {

  00011	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00016	74 11		 je	 SHORT $LN3@set_end

; 272  :             set_sweep(set);

  00018	e8 00 00 00 00	 call	 set_sweep

; 273  :             set_free(set, set->head->right);

  0001d	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00020	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00024	e8 00 00 00 00	 call	 set_free
$LN3@set_end:

; 274  :         }
; 275  :         set_free(set, set->head);

  00029	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  0002c	e8 00 00 00 00	 call	 set_free

; 276  :         set->head = NULL;

  00031	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
$LN2@set_end:

; 277  :     }
; 278  :     if (set->path != NULL) {

  00038	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  0003c	48 85 d2	 test	 rdx, rdx
  0003f	74 1a		 je	 SHORT $LN4@set_end

; 279  :         // Free the path work area.
; 280  :         set_free(set, set->path->right);

  00041	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00045	e8 00 00 00 00	 call	 set_free

; 281  :         set_free(set, set->path);

  0004a	48 8b 53 08	 mov	 rdx, QWORD PTR [rbx+8]
  0004e	e8 00 00 00 00	 call	 set_free

; 282  :         set->path = NULL;

  00053	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
$LN4@set_end:

; 283  :     }
; 284  :     if (set->node != NULL) {

  0005b	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  0005f	48 85 d2	 test	 rdx, rdx
  00062	74 26		 je	 SHORT $LN5@set_end

; 285  :         // Free the node that was under construction when longjmp() hit.
; 286  :         set_drop(set, set->node->key);

  00064	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00067	e8 00 00 00 00	 call	 set_free

; 287  :         set_free(set, set->node->right);

  0006c	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  00070	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00074	e8 00 00 00 00	 call	 set_free

; 288  :         set_free(set, set->node);

  00079	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
  0007d	e8 00 00 00 00	 call	 set_free

; 289  :         set->node = NULL;

  00082	48 c7 43 10 00
	00 00 00	 mov	 QWORD PTR [rbx+16], 0
$LN5@set_end:

; 290  :     }
; 291  : }

  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5b		 pop	 rbx
  0008f	c3		 ret	 0
set_end	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT decrypt_byte
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$dead$ = 16
decrypt_byte PROC					; COMDAT

; 36   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 37   :                      * unpredictable manner on 16-bit systems; not a problem
; 38   :                      * with any known compiler so far, though */
; 39   : 
; 40   :     (void)pcrc_32_tab;
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00000	8b 51 08	 mov	 edx, DWORD PTR [rcx+8]
  00003	81 e2 fd ff 00
	00		 and	 edx, 65533		; 0000fffdH
  00009	83 ca 02	 or	 edx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  0000c	8b c2		 mov	 eax, edx
  0000e	83 f0 01	 xor	 eax, 1
  00011	0f af c2	 imul	 eax, edx
  00014	c1 e8 08	 shr	 eax, 8
  00017	0f b6 c0	 movzx	 eax, al

; 43   : }

  0001a	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT update_keys
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$ = 16
c$ = 24
update_keys PROC					; COMDAT

; 49   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00000	44 8b 11	 mov	 r10d, DWORD PTR [rcx]
  00003	4c 8b d9	 mov	 r11, rcx
  00006	45 8b ca	 mov	 r9d, r10d
  00009	41 8b c0	 mov	 eax, r8d
  0000c	4c 33 c8	 xor	 r9, rax
  0000f	41 c1 ea 08	 shr	 r10d, 8
  00013	41 0f b6 c1	 movzx	 eax, r9b
  00017	44 33 14 82	 xor	 r10d, DWORD PTR [rdx+rax*4]
  0001b	44 89 11	 mov	 DWORD PTR [rcx], r10d

; 50   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  0001e	41 0f b6 c2	 movzx	 eax, r10b

; 51   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00022	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00025	69 c0 05 84 08
	08		 imul	 eax, eax, 134775813	; 08088405H
  0002b	ff c0		 inc	 eax
  0002d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 52   :     {
; 53   :       register int keyshift = (int)((*(pkeys+1)) >> 24);
; 54   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00030	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00033	48 c1 e8 18	 shr	 rax, 24
  00037	48 33 c1	 xor	 rax, rcx
  0003a	c1 e9 08	 shr	 ecx, 8
  0003d	0f b6 c0	 movzx	 eax, al
  00040	33 0c 82	 xor	 ecx, DWORD PTR [rdx+rax*4]

; 55   :     }
; 56   :     return c;

  00043	41 8b c0	 mov	 eax, r8d
  00046	41 89 4b 08	 mov	 DWORD PTR [r11+8], ecx

; 57   : }

  0004a	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 64   : static void init_keys(const char* passwd, unsigned long* pkeys, const z_crc_t* pcrc_32_tab) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 65   :     *(pkeys+0) = 305419896L;

  0000f	c7 02 78 56 34
	12		 mov	 DWORD PTR [rdx], 305419896 ; 12345678H
  00015	49 8b f0	 mov	 rsi, r8

; 66   :     *(pkeys+1) = 591751049L;

  00018	c7 42 04 89 67
	45 23		 mov	 DWORD PTR [rdx+4], 591751049 ; 23456789H
  0001f	48 8b fa	 mov	 rdi, rdx

; 67   :     *(pkeys+2) = 878082192L;

  00022	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [rdx+8], 878082192 ; 34567890H
  00029	48 8b d9	 mov	 rbx, rcx

; 68   :     while (*passwd != '\0') {

  0002c	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0002f	84 c0		 test	 al, al
  00031	74 28		 je	 SHORT $LN3@init_keys
  00033	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@init_keys:

; 69   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00040	44 0f be c0	 movsx	 r8d, al
  00044	48 8b d6	 mov	 rdx, rsi
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 update_keys
  0004f	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]

; 70   :         passwd++;

  00053	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  00057	84 c0		 test	 al, al
  00059	75 e5		 jne	 SHORT $LL2@init_keys
$LN3@init_keys:

; 71   :     }
; 72   : }

  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT crypthead
_TEXT	SEGMENT
header$ = 32
passwd$ = 96
buf$ = 104
bufSize$dead$ = 112
pkeys$ = 120
pcrc_32_tab$ = 128
crcForCrypting$ = 136
crypthead PROC						; COMDAT

; 93   :                           unsigned long crcForCrypting) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	41 54		 push	 r12
  00012	41 55		 push	 r13
  00014	41 56		 push	 r14
  00016	41 57		 push	 r15
  00018	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 94   :     unsigned n;                  /* index in random header */
; 95   :     int t;                       /* temporary */
; 96   :     int c;                       /* random byte */
; 97   :     unsigned char header[RAND_HEAD_LEN-2]; /* random header */
; 98   :     static unsigned calls = 0;   /* ensure different random header each time */
; 99   : 
; 100  :     if (bufSize<RAND_HEAD_LEN)
; 101  :       return 0;
; 102  : 
; 103  :     /* First generate RAND_HEAD_LEN-2 random bytes. We encrypt the
; 104  :      * output of rand() to get less predictability, since rand() is
; 105  :      * often poorly implemented.
; 106  :      */
; 107  :     if (++calls == 1)

  0001c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?calls@?1??crypthead@@9@9
  00022	49 8b d9	 mov	 rbx, r9
  00025	ff c0		 inc	 eax
  00027	4c 8b ea	 mov	 r13, rdx
  0002a	89 05 00 00 00
	00		 mov	 DWORD PTR ?calls@?1??crypthead@@9@9, eax
  00030	4c 8b e1	 mov	 r12, rcx
  00033	83 f8 01	 cmp	 eax, 1
  00036	75 15		 jne	 SHORT $LN9@crypthead
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\time.h

; 552  :             return _time64(_Time);

  00038	33 c9		 xor	 ecx, ecx
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h

; 109  :         srand((unsigned)(time(NULL) ^ ZCR_SEED2));

  00040	35 4e e6 40 bb	 xor	 eax, -1153374642	; bb40e64eH
  00045	8b c8		 mov	 ecx, eax
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_srand
$LN9@crypthead:

; 110  :     }
; 111  :     init_keys(passwd, pkeys, pcrc_32_tab);

  0004d	4c 8b b4 24 80
	00 00 00	 mov	 r14, QWORD PTR pcrc_32_tab$[rsp]
  00055	48 8b d3	 mov	 rdx, rbx
  00058	4d 8b c6	 mov	 r8, r14
  0005b	49 8b cc	 mov	 rcx, r12
  0005e	e8 00 00 00 00	 call	 init_keys
  00063	bd 0a 00 00 00	 mov	 ebp, 10
  00068	48 8d 74 24 20	 lea	 rsi, QWORD PTR header$[rsp]
  0006d	44 8b fd	 mov	 r15d, ebp
$LL4@crypthead:

; 112  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 113  :     {
; 114  :         c = (rand() >> 7) & 0xff;

  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  00076	c1 f8 07	 sar	 eax, 7

; 115  :         header[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, c, t);

  00079	48 8b cb	 mov	 rcx, rbx
  0007c	44 0f b6 c0	 movzx	 r8d, al
  00080	e8 00 00 00 00	 call	 decrypt_byte
  00085	49 8b d6	 mov	 rdx, r14
  00088	8b f8		 mov	 edi, eax
  0008a	e8 00 00 00 00	 call	 update_keys
  0008f	44 32 c7	 xor	 r8b, dil
  00092	44 88 06	 mov	 BYTE PTR [rsi], r8b
  00095	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  00099	49 83 ef 01	 sub	 r15, 1
  0009d	75 d1		 jne	 SHORT $LL4@crypthead

; 116  :     }
; 117  :     /* Encrypt random header (last two bytes is high word of crc) */
; 118  :     init_keys(passwd, pkeys, pcrc_32_tab);

  0009f	4d 8b c6	 mov	 r8, r14
  000a2	48 8b d3	 mov	 rdx, rbx
  000a5	49 8b cc	 mov	 rcx, r12
  000a8	e8 00 00 00 00	 call	 init_keys
  000ad	4c 8d 7c 24 20	 lea	 r15, QWORD PTR header$[rsp]
  000b2	49 8b f5	 mov	 rsi, r13
  000b5	4d 2b fd	 sub	 r15, r13
$LL7@crypthead:

; 119  :     for (n = 0; n < RAND_HEAD_LEN-2; n++)
; 120  :     {
; 121  :         buf[n] = (unsigned char)zencode(pkeys, pcrc_32_tab, header[n], t);

  000b8	48 8b cb	 mov	 rcx, rbx
  000bb	e8 00 00 00 00	 call	 decrypt_byte
  000c0	45 0f b6 04 37	 movzx	 r8d, BYTE PTR [r15+rsi]
  000c5	49 8b d6	 mov	 rdx, r14
  000c8	8b f8		 mov	 edi, eax
  000ca	e8 00 00 00 00	 call	 update_keys
  000cf	44 32 c7	 xor	 r8b, dil
  000d2	44 88 06	 mov	 BYTE PTR [rsi], r8b
  000d5	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  000d9	48 83 ed 01	 sub	 rbp, 1
  000dd	75 d9		 jne	 SHORT $LL7@crypthead

; 122  :     }
; 123  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 16) & 0xff, t);

  000df	48 8b cb	 mov	 rcx, rbx
  000e2	e8 00 00 00 00	 call	 decrypt_byte
  000e7	8b ac 24 88 00
	00 00		 mov	 ebp, DWORD PTR crcForCrypting$[rsp]
  000ee	49 8b d6	 mov	 rdx, r14
  000f1	8b fd		 mov	 edi, ebp
  000f3	8b f0		 mov	 esi, eax
  000f5	c1 ef 10	 shr	 edi, 16
  000f8	44 0f b6 c7	 movzx	 r8d, dil
  000fc	e8 00 00 00 00	 call	 update_keys
  00101	40 32 fe	 xor	 dil, sil

; 124  :     buf[n++] = (unsigned char)zencode(pkeys, pcrc_32_tab, (int)(crcForCrypting >> 24) & 0xff, t);

  00104	48 8b cb	 mov	 rcx, rbx
  00107	41 88 7d 0a	 mov	 BYTE PTR [r13+10], dil
  0010b	e8 00 00 00 00	 call	 decrypt_byte
  00110	c1 ed 18	 shr	 ebp, 24
  00113	49 8b d6	 mov	 rdx, r14
  00116	44 8b c5	 mov	 r8d, ebp
  00119	8b f8		 mov	 edi, eax
  0011b	e8 00 00 00 00	 call	 update_keys

; 125  :     return n;
; 126  : }

  00120	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00125	40 32 ef	 xor	 bpl, dil
  00128	48 8b 74 24 70	 mov	 rsi, QWORD PTR [rsp+112]
  0012d	b8 0c 00 00 00	 mov	 eax, 12
  00132	41 88 6d 0b	 mov	 BYTE PTR [r13+11], bpl
  00136	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
  0013b	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0013f	41 5f		 pop	 r15
  00141	41 5e		 pop	 r14
  00143	41 5d		 pop	 r13
  00145	41 5c		 pop	 r12
  00147	5f		 pop	 rdi
  00148	c3		 ret	 0
crypthead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT allocate_new_datablock
_TEXT	SEGMENT
allocate_new_datablock PROC				; COMDAT

; 204  : local linkedlist_datablock_internal* allocate_new_datablock(void) {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 205  :     linkedlist_datablock_internal* ldi;
; 206  :     ldi = (linkedlist_datablock_internal*)

  00004	b9 08 10 00 00	 mov	 ecx, 4104		; 00001008H
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 207  :                  ALLOC(sizeof(linkedlist_datablock_internal));
; 208  :     if (ldi!=NULL)

  0000f	48 85 c0	 test	 rax, rax
  00012	74 0d		 je	 SHORT $LN4@allocate_n

; 209  :     {
; 210  :         ldi->next_datablock = NULL ;

  00014	33 c9		 xor	 ecx, ecx

; 211  :         ldi->filled_in_this_block = 0 ;
; 212  :         ldi->avail_in_this_block = SIZEDATA_INDATABLOCK ;

  00016	48 c7 40 08 f0
	0f 00 00	 mov	 QWORD PTR [rax+8], 4080	; 00000ff0H
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@allocate_n:

; 213  :     }
; 214  :     return ldi;
; 215  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
allocate_new_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT free_datablock
_TEXT	SEGMENT
ldi$ = 48
free_datablock PROC					; COMDAT

; 217  : local void free_datablock(linkedlist_datablock_internal* ldi) {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 218  :     while (ldi!=NULL)

  00004	48 85 c9	 test	 rcx, rcx
  00007	74 1d		 je	 SHORT $LN3@free_datab
  00009	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  0000e	66 90		 npad	 2
$LL2@free_datab:

; 219  :     {
; 220  :         linkedlist_datablock_internal* ldinext = ldi->next_datablock;

  00010	48 8b 19	 mov	 rbx, QWORD PTR [rcx]

; 221  :         free(ldi);

  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 222  :         ldi = ldinext;

  00019	48 8b cb	 mov	 rcx, rbx
  0001c	48 85 db	 test	 rbx, rbx
  0001f	75 ef		 jne	 SHORT $LL2@free_datab

; 218  :     while (ldi!=NULL)

  00021	48 8b 5c 24 20	 mov	 rbx, QWORD PTR [rsp+32]
$LN3@free_datab:

; 223  :     }
; 224  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
free_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT init_linkedlist
_TEXT	SEGMENT
ll$ = 8
init_linkedlist PROC					; COMDAT

; 227  :     ll->first_block = ll->last_block = NULL;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00006	48 89 01	 mov	 QWORD PTR [rcx], rax

; 228  : }

  00009	c3		 ret	 0
init_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT free_linkedlist
_TEXT	SEGMENT
ll$ = 48
free_linkedlist PROC					; COMDAT

; 230  : local void free_linkedlist(linkedlist_data* ll) {

  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 231  :     free_datablock(ll->first_block);

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	e8 00 00 00 00	 call	 free_datablock

; 232  :     ll->first_block = ll->last_block = NULL;

  00011	33 c0		 xor	 eax, eax
  00013	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  00017	48 89 03	 mov	 QWORD PTR [rbx], rax

; 233  : }

  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5b		 pop	 rbx
  0001f	c3		 ret	 0
free_linkedlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT add_data_in_datablock
_TEXT	SEGMENT
ll$ = 48
buf$ = 56
len$ = 64
add_data_in_datablock PROC				; COMDAT

; 236  : local int add_data_in_datablock(linkedlist_data* ll, const void* buf, uLong len) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	41 8b f8	 mov	 edi, r8d
  00018	48 8b f2	 mov	 rsi, rdx
  0001b	4c 8b f1	 mov	 r14, rcx

; 237  :     linkedlist_datablock_internal* ldi;
; 238  :     const unsigned char* from_copy;
; 239  : 
; 240  :     if (ll==NULL)

  0001e	48 85 c9	 test	 rcx, rcx
  00021	0f 84 92 00 00
	00		 je	 $LN17@add_data_i

; 241  :         return ZIP_INTERNALERROR;
; 242  : 
; 243  :     if (ll->last_block == NULL)

  00027	48 8b 59 08	 mov	 rbx, QWORD PTR [rcx+8]
  0002b	48 85 db	 test	 rbx, rbx
  0002e	75 14		 jne	 SHORT $LN9@add_data_i

; 244  :     {
; 245  :         ll->first_block = ll->last_block = allocate_new_datablock();

  00030	e8 00 00 00 00	 call	 allocate_new_datablock
  00035	49 89 46 08	 mov	 QWORD PTR [r14+8], rax
  00039	48 8b d8	 mov	 rbx, rax
  0003c	49 89 06	 mov	 QWORD PTR [r14], rax

; 246  :         if (ll->first_block == NULL)

  0003f	48 85 c0	 test	 rax, rax
  00042	74 75		 je	 SHORT $LN17@add_data_i
$LN9@add_data_i:

; 247  :             return ZIP_INTERNALERROR;
; 248  :     }
; 249  : 
; 250  :     ldi = ll->last_block;
; 251  :     from_copy = (const unsigned char*)buf;
; 252  : 
; 253  :     while (len>0)

  00044	85 ff		 test	 edi, edi
  00046	74 6d		 je	 SHORT $LN20@add_data_i
$LL2@add_data_i:

; 254  :     {
; 255  :         uInt copy_this;
; 256  :         uInt i;
; 257  :         unsigned char* to_copy;
; 258  : 
; 259  :         if (ldi->avail_in_this_block==0)

  00048	83 7b 08 00	 cmp	 DWORD PTR [rbx+8], 0
  0004c	75 14		 jne	 SHORT $LN10@add_data_i

; 260  :         {
; 261  :             ldi->next_datablock = allocate_new_datablock();

  0004e	e8 00 00 00 00	 call	 allocate_new_datablock
  00053	48 89 03	 mov	 QWORD PTR [rbx], rax

; 262  :             if (ldi->next_datablock == NULL)

  00056	48 85 c0	 test	 rax, rax
  00059	74 5e		 je	 SHORT $LN17@add_data_i

; 264  :             ldi = ldi->next_datablock ;

  0005b	48 8b d8	 mov	 rbx, rax

; 265  :             ll->last_block = ldi;

  0005e	49 89 46 08	 mov	 QWORD PTR [r14+8], rax
$LN10@add_data_i:

; 266  :         }
; 267  : 
; 268  :         if (ldi->avail_in_this_block < len)

  00062	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]

; 269  :             copy_this = (uInt)ldi->avail_in_this_block;
; 270  :         else
; 271  :             copy_this = (uInt)len;
; 272  : 
; 273  :         to_copy = &(ldi->data[ldi->filled_in_this_block]);

  00066	44 3b c7	 cmp	 r8d, edi
  00069	8b 43 0c	 mov	 eax, DWORD PTR [rbx+12]
  0006c	44 0f 43 c7	 cmovae	 r8d, edi
  00070	48 83 c0 14	 add	 rax, 20
  00074	48 03 c3	 add	 rax, rbx
  00077	33 d2		 xor	 edx, edx

; 274  : 
; 275  :         for (i=0;i<copy_this;i++)

  00079	45 85 c0	 test	 r8d, r8d
  0007c	74 24		 je	 SHORT $LN5@add_data_i
  0007e	4c 8b ce	 mov	 r9, rsi
  00081	4c 2b c8	 sub	 r9, rax
  00084	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL6@add_data_i:

; 276  :             *(to_copy+i)=*(from_copy+i);

  00090	42 0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+r9]
  00095	ff c2		 inc	 edx
  00097	88 08		 mov	 BYTE PTR [rax], cl
  00099	48 8d 40 01	 lea	 rax, QWORD PTR [rax+1]
  0009d	41 3b d0	 cmp	 edx, r8d
  000a0	72 ee		 jb	 SHORT $LL6@add_data_i
$LN5@add_data_i:

; 277  : 
; 278  :         ldi->filled_in_this_block += copy_this;

  000a2	44 01 43 0c	 add	 DWORD PTR [rbx+12], r8d

; 279  :         ldi->avail_in_this_block -= copy_this;

  000a6	44 29 43 08	 sub	 DWORD PTR [rbx+8], r8d

; 280  :         from_copy += copy_this ;

  000aa	41 8b c0	 mov	 eax, r8d
  000ad	48 03 f0	 add	 rsi, rax

; 281  :         len -= copy_this;

  000b0	41 2b f8	 sub	 edi, r8d
  000b3	75 93		 jne	 SHORT $LL2@add_data_i
$LN20@add_data_i:

; 282  :     }
; 283  :     return ZIP_OK;

  000b5	33 c0		 xor	 eax, eax
  000b7	eb 05		 jmp	 SHORT $LN1@add_data_i
$LN17@add_data_i:

; 263  :                 return ZIP_INTERNALERROR;

  000b9	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN1@add_data_i:

; 284  : }

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c8	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000cd	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d1	41 5e		 pop	 r14
  000d3	c3		 ret	 0
add_data_in_datablock ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_putValue
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
buf$ = 48
filestream$ = 56
x$ = 64
nbByte$ = 72
zip64local_putValue PROC				; COMDAT

; 518  : local int zip64local_putValue(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T x, int nbByte) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 63 d9	 movsxd	 rbx, r9d
  00012	48 8b f2	 mov	 rsi, rdx
  00015	48 8b f9	 mov	 rdi, rcx

; 519  :     unsigned char buf[8];
; 520  :     int n;
; 521  :     for (n = 0; n < nbByte; n++)

  00018	45 85 c9	 test	 r9d, r9d
  0001b	7e 14		 jle	 SHORT $LN3@zip64local
  0001d	33 c0		 xor	 eax, eax
  0001f	90		 npad	 1
$LL18@zip64local:

; 522  :     {
; 523  :         buf[n] = (unsigned char)(x & 0xff);

  00020	44 88 44 04 30	 mov	 BYTE PTR buf$[rsp+rax], r8b
  00025	48 ff c0	 inc	 rax

; 524  :         x >>= 8;

  00028	49 c1 e8 08	 shr	 r8, 8
  0002c	48 3b c3	 cmp	 rax, rbx
  0002f	7c ef		 jl	 SHORT $LL18@zip64local
$LN3@zip64local:

; 525  :     }
; 526  :     if (x != 0)

  00031	4d 85 c0	 test	 r8, r8
  00034	74 14		 je	 SHORT $LN6@zip64local

; 527  :       {     /* data overflow - hack for ZIP64 (X Roche) */
; 528  :       for (n = 0; n < nbByte; n++)

  00036	45 85 c9	 test	 r9d, r9d
  00039	7e 0f		 jle	 SHORT $LN6@zip64local
  0003b	4c 8b c3	 mov	 r8, rbx
  0003e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00043	b2 ff		 mov	 dl, 255			; 000000ffH
  00045	e8 00 00 00 00	 call	 memset
$LN6@zip64local:

; 529  :         {
; 530  :           buf[n] = 0xff;
; 531  :         }
; 532  :       }
; 533  : 
; 534  :     if (ZWRITE64(*pzlib_filefunc_def,filestream,buf,(uLong)nbByte)!=(uLong)nbByte)

  0004a	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  0004e	4c 8d 44 24 30	 lea	 r8, QWORD PTR buf$[rsp]
  00053	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  00057	44 8b cb	 mov	 r9d, ebx
  0005a	48 8b d6	 mov	 rdx, rsi
  0005d	ff d0		 call	 rax

; 535  :         return ZIP_ERRNO;
; 536  :     else
; 537  :         return ZIP_OK;
; 538  : }

  0005f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00064	2b c3		 sub	 eax, ebx
  00066	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0006b	f7 d8		 neg	 eax
  0006d	1b c0		 sbb	 eax, eax
  0006f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00073	5f		 pop	 rdi
  00074	c3		 ret	 0
zip64local_putValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_putValue_inmemory
_TEXT	SEGMENT
dest$ = 8
x$ = 16
nbByte$ = 24
zip64local_putValue_inmemory PROC			; COMDAT

; 540  : local void zip64local_putValue_inmemory (void* dest, ZPOS64_T x, int nbByte) {

  00000	4d 63 c8	 movsxd	 r9, r8d

; 541  :     unsigned char* buf=(unsigned char*)dest;
; 542  :     int n;
; 543  :     for (n = 0; n < nbByte; n++) {

  00003	4d 8b c1	 mov	 r8, r9
  00006	45 85 c9	 test	 r9d, r9d
  00009	7e 14		 jle	 SHORT $LN3@zip64local
  0000b	33 c0		 xor	 eax, eax
  0000d	0f 1f 00	 npad	 3
$LL16@zip64local:

; 544  :         buf[n] = (unsigned char)(x & 0xff);

  00010	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00013	48 ff c0	 inc	 rax

; 545  :         x >>= 8;

  00016	48 c1 ea 08	 shr	 rdx, 8
  0001a	49 3b c0	 cmp	 rax, r8
  0001d	7c f1		 jl	 SHORT $LL16@zip64local
$LN3@zip64local:

; 546  :     }
; 547  : 
; 548  :     if (x != 0)

  0001f	48 85 d2	 test	 rdx, rdx
  00022	74 0c		 je	 SHORT $LN6@zip64local

; 549  :     {     /* data overflow - hack for ZIP64 */
; 550  :        for (n = 0; n < nbByte; n++)

  00024	45 85 c9	 test	 r9d, r9d
  00027	7e 07		 jle	 SHORT $LN6@zip64local
  00029	b2 ff		 mov	 dl, 255			; 000000ffH
  0002b	e9 00 00 00 00	 jmp	 memset
$LN6@zip64local:

; 551  :        {
; 552  :           buf[n] = 0xff;
; 553  :        }
; 554  :     }
; 555  : }

  00030	c3		 ret	 0
zip64local_putValue_inmemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_TmzDateToDosDate
_TEXT	SEGMENT
ptm$ = 8
zip64local_TmzDateToDosDate PROC			; COMDAT

; 561  :     uLong year = (uLong)ptm->tm_year;

  00000	8b 51 14	 mov	 edx, DWORD PTR [rcx+20]
  00003	4c 8b c1	 mov	 r8, rcx

; 562  :     if (year>=1980)

  00006	81 fa bc 07 00
	00		 cmp	 edx, 1980		; 000007bcH
  0000c	72 08		 jb	 SHORT $LN2@zip64local

; 563  :         year-=1980;

  0000e	81 c2 44 f8 ff
	ff		 add	 edx, -1980		; fffff844H
  00014	eb 08		 jmp	 SHORT $LN4@zip64local
$LN2@zip64local:

; 564  :     else if (year>=80)

  00016	83 fa 50	 cmp	 edx, 80			; 00000050H
  00019	72 03		 jb	 SHORT $LN4@zip64local

; 565  :         year-=80;

  0001b	83 c2 b0	 add	 edx, -80		; ffffffb0H
$LN4@zip64local:

; 566  :     return

  0001e	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  00021	c1 e0 06	 shl	 eax, 6
  00024	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00027	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00029	c1 e2 04	 shl	 edx, 4
  0002c	d1 e9		 shr	 ecx, 1
  0002e	c1 e0 05	 shl	 eax, 5
  00031	03 c1		 add	 eax, ecx
  00033	41 8b 48 10	 mov	 ecx, DWORD PTR [r8+16]
  00037	ff c1		 inc	 ecx
  00039	03 d1		 add	 edx, ecx
  0003b	c1 e2 05	 shl	 edx, 5
  0003e	41 03 50 0c	 add	 edx, DWORD PTR [r8+12]
  00042	c1 e2 10	 shl	 edx, 16
  00045	0b c2		 or	 eax, edx

; 567  :       (uLong) (((uLong)(ptm->tm_mday) + (32 * (uLong)(ptm->tm_mon+1)) + (512 * year)) << 16) |
; 568  :         (((uLong)ptm->tm_sec/2) + (32 * (uLong)ptm->tm_min) + (2048 * (uLong)ptm->tm_hour));
; 569  : }

  00047	c3		 ret	 0
zip64local_TmzDateToDosDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getByte
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
c$ = 48
filestream$ = 56
pi$ = 64
zip64local_getByte PROC					; COMDAT

; 574  : local int zip64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int* pi) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 575  :     unsigned char c;
; 576  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,&c,1);

  0000f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b d9	 mov	 rbx, rcx
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00022	41 b9 01 00 00
	00		 mov	 r9d, 1
  00028	48 8b f2	 mov	 rsi, rdx
  0002b	ff d0		 call	 rax

; 577  :     if (err==1)

  0002d	83 f8 01	 cmp	 eax, 1
  00030	75 19		 jne	 SHORT $LN2@zip64local

; 578  :     {
; 579  :         *pi = (int)c;

  00032	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00037	89 07		 mov	 DWORD PTR [rdi], eax

; 580  :         return ZIP_OK;

  00039	33 c0		 xor	 eax, eax

; 585  :             return ZIP_ERRNO;
; 586  :         else
; 587  :             return ZIP_EOF;
; 588  :     }
; 589  : }

  0003b	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00040	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5f		 pop	 rdi
  0004a	c3		 ret	 0
$LN2@zip64local:

; 581  :     }
; 582  :     else
; 583  :     {
; 584  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0004b	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  0004f	48 8b d6	 mov	 rdx, rsi
  00052	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00056	ff d0		 call	 rax

; 585  :             return ZIP_ERRNO;
; 586  :         else
; 587  :             return ZIP_EOF;
; 588  :     }
; 589  : }

  00058	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005d	f7 d8		 neg	 eax
  0005f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00064	1b c0		 sbb	 eax, eax
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5f		 pop	 rdi
  0006b	c3		 ret	 0
zip64local_getByte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getShort
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getShort PROC				; COMDAT

; 595  : local int zip64local_getShort(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00014	49 8b d8	 mov	 rbx, r8

; 596  :     uLong x ;
; 597  :     int i = 0;

  00017	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 598  :     int err;
; 599  : 
; 600  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0001f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00024	48 8b fa	 mov	 rdi, rdx
  00027	48 8b f1	 mov	 rsi, rcx
  0002a	e8 00 00 00 00	 call	 zip64local_getByte

; 601  :     x = (uLong)i;

  0002f	8b 6c 24 48	 mov	 ebp, DWORD PTR i$[rsp]
  00033	44 8b c8	 mov	 r9d, eax

; 602  : 
; 603  :     if (err==ZIP_OK)

  00036	85 c0		 test	 eax, eax
  00038	75 24		 jne	 SHORT $LN3@zip64local

; 604  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003a	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0003f	48 8b d7	 mov	 rdx, rdi
  00042	48 8b ce	 mov	 rcx, rsi
  00045	e8 00 00 00 00	 call	 zip64local_getByte
  0004a	44 8b c8	 mov	 r9d, eax

; 606  : 
; 607  :     if (err==ZIP_OK)

  0004d	85 c0		 test	 eax, eax
  0004f	75 0d		 jne	 SHORT $LN3@zip64local

; 605  :     x += ((uLong)i)<<8;

  00051	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00055	c1 e0 08	 shl	 eax, 8
  00058	03 c5		 add	 eax, ebp

; 608  :         *pX = x;
; 609  :     else
; 610  :         *pX = 0;
; 611  :     return err;

  0005a	89 03		 mov	 DWORD PTR [rbx], eax
  0005c	eb 06		 jmp	 SHORT $LN8@zip64local
$LN3@zip64local:
  0005e	c7 03 00 00 00
	00		 mov	 DWORD PTR [rbx], 0
$LN8@zip64local:

; 612  : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	41 8b c1	 mov	 eax, r9d
  0006c	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00071	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
zip64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getLong
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getLong PROC					; COMDAT

; 614  : local int zip64local_getLong(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong* pX) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	4d 8b f0	 mov	 r14, r8

; 615  :     uLong x ;
; 616  :     int i = 0;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 617  :     int err;
; 618  : 
; 619  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00020	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00025	48 8b fa	 mov	 rdi, rdx
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 zip64local_getByte

; 620  :     x = (uLong)i;

  00030	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00035	41 8b da	 mov	 ebx, r10d
  00038	44 8b c8	 mov	 r9d, eax

; 621  : 
; 622  :     if (err==ZIP_OK)

  0003b	85 c0		 test	 eax, eax
  0003d	75 18		 jne	 SHORT $LN2@zip64local

; 623  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00044	48 8b d7	 mov	 rdx, rdi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	e8 00 00 00 00	 call	 zip64local_getByte
  0004f	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00054	44 8b c8	 mov	 r9d, eax
$LN2@zip64local:

; 624  :     x += ((uLong)i)<<8;

  00057	41 8b c2	 mov	 eax, r10d
  0005a	c1 e0 08	 shl	 eax, 8
  0005d	03 d8		 add	 ebx, eax

; 625  : 
; 626  :     if (err==ZIP_OK)

  0005f	45 85 c9	 test	 r9d, r9d
  00062	75 18		 jne	 SHORT $LN3@zip64local

; 627  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00064	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00069	48 8b d7	 mov	 rdx, rdi
  0006c	48 8b ce	 mov	 rcx, rsi
  0006f	e8 00 00 00 00	 call	 zip64local_getByte
  00074	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00079	44 8b c8	 mov	 r9d, eax
$LN3@zip64local:

; 628  :     x += ((uLong)i)<<16;

  0007c	41 c1 e2 10	 shl	 r10d, 16
  00080	41 03 da	 add	 ebx, r10d

; 629  : 
; 630  :     if (err==ZIP_OK)

  00083	45 85 c9	 test	 r9d, r9d
  00086	75 25		 jne	 SHORT $LN5@zip64local

; 631  :         err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00088	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0008d	48 8b d7	 mov	 rdx, rdi
  00090	48 8b ce	 mov	 rcx, rsi
  00093	e8 00 00 00 00	 call	 zip64local_getByte
  00098	44 8b c8	 mov	 r9d, eax

; 633  : 
; 634  :     if (err==ZIP_OK)

  0009b	85 c0		 test	 eax, eax
  0009d	75 0e		 jne	 SHORT $LN5@zip64local

; 632  :     x += ((uLong)i)<<24;

  0009f	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  000a3	c1 e0 18	 shl	 eax, 24
  000a6	03 c3		 add	 eax, ebx

; 635  :         *pX = x;
; 636  :     else
; 637  :         *pX = 0;
; 638  :     return err;

  000a8	41 89 06	 mov	 DWORD PTR [r14], eax
  000ab	eb 07		 jmp	 SHORT $LN12@zip64local
$LN5@zip64local:
  000ad	41 c7 06 00 00
	00 00		 mov	 DWORD PTR [r14], 0
$LN12@zip64local:

; 639  : }

  000b4	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000b9	41 8b c1	 mov	 eax, r9d
  000bc	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000c1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ca	41 5e		 pop	 r14
  000cc	c3		 ret	 0
zip64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_getLong64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
filestream$ = 56
pX$ = 64
i$ = 72
zip64local_getLong64 PROC				; COMDAT

; 642  : local int zip64local_getLong64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00015	4d 8b f0	 mov	 r14, r8

; 643  :   ZPOS64_T x;
; 644  :   int i = 0;

  00018	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 645  :   int err;
; 646  : 
; 647  :   err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00020	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00025	48 8b fa	 mov	 rdi, rdx
  00028	48 8b f1	 mov	 rsi, rcx
  0002b	e8 00 00 00 00	 call	 zip64local_getByte

; 648  :   x = (ZPOS64_T)i;

  00030	4c 63 54 24 48	 movsxd	 r10, DWORD PTR i$[rsp]
  00035	44 8b c8	 mov	 r9d, eax
  00038	49 8b da	 mov	 rbx, r10

; 649  : 
; 650  :   if (err==ZIP_OK)

  0003b	85 c0		 test	 eax, eax
  0003d	75 18		 jne	 SHORT $LN2@zip64local

; 651  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0003f	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00044	48 8b d7	 mov	 rdx, rdi
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	e8 00 00 00 00	 call	 zip64local_getByte
  0004f	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00054	44 8b c8	 mov	 r9d, eax
$LN2@zip64local:

; 652  :   x += ((ZPOS64_T)i)<<8;

  00057	49 63 c2	 movsxd	 rax, r10d
  0005a	48 c1 e0 08	 shl	 rax, 8
  0005e	48 03 d8	 add	 rbx, rax

; 653  : 
; 654  :   if (err==ZIP_OK)

  00061	45 85 c9	 test	 r9d, r9d
  00064	75 18		 jne	 SHORT $LN3@zip64local

; 655  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00066	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0006b	48 8b d7	 mov	 rdx, rdi
  0006e	48 8b ce	 mov	 rcx, rsi
  00071	e8 00 00 00 00	 call	 zip64local_getByte
  00076	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  0007b	44 8b c8	 mov	 r9d, eax
$LN3@zip64local:

; 656  :   x += ((ZPOS64_T)i)<<16;

  0007e	49 63 c2	 movsxd	 rax, r10d
  00081	48 c1 e0 10	 shl	 rax, 16
  00085	48 03 d8	 add	 rbx, rax

; 657  : 
; 658  :   if (err==ZIP_OK)

  00088	45 85 c9	 test	 r9d, r9d
  0008b	75 18		 jne	 SHORT $LN4@zip64local

; 659  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  0008d	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00092	48 8b d7	 mov	 rdx, rdi
  00095	48 8b ce	 mov	 rcx, rsi
  00098	e8 00 00 00 00	 call	 zip64local_getByte
  0009d	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000a2	44 8b c8	 mov	 r9d, eax
$LN4@zip64local:

; 660  :   x += ((ZPOS64_T)i)<<24;

  000a5	49 63 c2	 movsxd	 rax, r10d
  000a8	48 c1 e0 18	 shl	 rax, 24
  000ac	48 03 d8	 add	 rbx, rax

; 661  : 
; 662  :   if (err==ZIP_OK)

  000af	45 85 c9	 test	 r9d, r9d
  000b2	75 18		 jne	 SHORT $LN5@zip64local

; 663  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000b4	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000b9	48 8b d7	 mov	 rdx, rdi
  000bc	48 8b ce	 mov	 rcx, rsi
  000bf	e8 00 00 00 00	 call	 zip64local_getByte
  000c4	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000c9	44 8b c8	 mov	 r9d, eax
$LN5@zip64local:

; 664  :   x += ((ZPOS64_T)i)<<32;

  000cc	49 63 c2	 movsxd	 rax, r10d
  000cf	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000d3	48 03 d8	 add	 rbx, rax

; 665  : 
; 666  :   if (err==ZIP_OK)

  000d6	45 85 c9	 test	 r9d, r9d
  000d9	75 18		 jne	 SHORT $LN6@zip64local

; 667  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  000db	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  000e0	48 8b d7	 mov	 rdx, rdi
  000e3	48 8b ce	 mov	 rcx, rsi
  000e6	e8 00 00 00 00	 call	 zip64local_getByte
  000eb	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  000f0	44 8b c8	 mov	 r9d, eax
$LN6@zip64local:

; 668  :   x += ((ZPOS64_T)i)<<40;

  000f3	49 63 c2	 movsxd	 rax, r10d
  000f6	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  000fa	48 03 d8	 add	 rbx, rax

; 669  : 
; 670  :   if (err==ZIP_OK)

  000fd	45 85 c9	 test	 r9d, r9d
  00100	75 18		 jne	 SHORT $LN7@zip64local

; 671  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00102	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  00107	48 8b d7	 mov	 rdx, rdi
  0010a	48 8b ce	 mov	 rcx, rsi
  0010d	e8 00 00 00 00	 call	 zip64local_getByte
  00112	44 8b 54 24 48	 mov	 r10d, DWORD PTR i$[rsp]
  00117	44 8b c8	 mov	 r9d, eax
$LN7@zip64local:

; 672  :   x += ((ZPOS64_T)i)<<48;

  0011a	49 63 c2	 movsxd	 rax, r10d
  0011d	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00121	48 03 d8	 add	 rbx, rax

; 673  : 
; 674  :   if (err==ZIP_OK)

  00124	45 85 c9	 test	 r9d, r9d
  00127	75 28		 jne	 SHORT $LN9@zip64local

; 675  :     err = zip64local_getByte(pzlib_filefunc_def,filestream,&i);

  00129	4c 8d 44 24 48	 lea	 r8, QWORD PTR i$[rsp]
  0012e	48 8b d7	 mov	 rdx, rdi
  00131	48 8b ce	 mov	 rcx, rsi
  00134	e8 00 00 00 00	 call	 zip64local_getByte
  00139	44 8b c8	 mov	 r9d, eax

; 677  : 
; 678  :   if (err==ZIP_OK)

  0013c	85 c0		 test	 eax, eax
  0013e	75 11		 jne	 SHORT $LN9@zip64local

; 676  :   x += ((ZPOS64_T)i)<<56;

  00140	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$[rsp]
  00145	48 c1 e0 38	 shl	 rax, 56			; 00000038H
  00149	48 03 c3	 add	 rax, rbx

; 679  :     *pX = x;
; 680  :   else
; 681  :     *pX = 0;
; 682  : 
; 683  :   return err;

  0014c	49 89 06	 mov	 QWORD PTR [r14], rax
  0014f	eb 07		 jmp	 SHORT $LN20@zip64local
$LN9@zip64local:
  00151	49 c7 06 00 00
	00 00		 mov	 QWORD PTR [r14], 0
$LN20@zip64local:

; 684  : }

  00158	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0015d	41 8b c1	 mov	 eax, r9d
  00160	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00165	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  0016a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016e	41 5e		 pop	 r14
  00170	c3		 ret	 0
zip64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir
_TEXT	SEGMENT
pzlib_filefunc_def$ = 80
filestream$ = 88
uSizeFile$1$ = 96
zip64local_SearchCentralDir PROC			; COMDAT

; 693  : local ZPOS64_T zip64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 694  :   unsigned char* buf;
; 695  :   ZPOS64_T uSizeFile;
; 696  :   ZPOS64_T uBackRead;
; 697  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 698  :   ZPOS64_T uPosFound=0;
; 699  : 
; 700  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00011	41 b9 02 00 00
	00		 mov	 r9d, 2
  00017	45 33 c0	 xor	 r8d, r8d
  0001a	4c 8b ea	 mov	 r13, rdx
  0001d	4c 8b f1	 mov	 r14, rcx
  00020	be ff ff 00 00	 mov	 esi, 65535		; 0000ffffH
  00025	45 33 ff	 xor	 r15d, r15d
  00028	e8 00 00 00 00	 call	 call_zseek64
  0002d	85 c0		 test	 eax, eax
  0002f	0f 85 23 01 00
	00		 jne	 $LN35@zip64local

; 701  :     return 0;
; 702  : 
; 703  : 
; 704  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00035	49 8b d5	 mov	 rdx, r13
  00038	49 8b ce	 mov	 rcx, r14
  0003b	e8 00 00 00 00	 call	 call_ztell64

; 705  : 
; 706  :   if (uMaxBack>uSizeFile)

  00040	48 3b c6	 cmp	 rax, rsi
  00043	48 89 44 24 60	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 707  :     uMaxBack = uSizeFile;
; 708  : 
; 709  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00048	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  0004d	48 8b d8	 mov	 rbx, rax
  00050	48 0f 42 f0	 cmovb	 rsi, rax
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0005a	48 8b f8	 mov	 rdi, rax

; 710  :   if (buf==NULL)

  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 f2 00 00
	00		 je	 $LN35@zip64local
  00066	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp

; 711  :     return 0;
; 712  : 
; 713  :   uBackRead = 4;

  0006b	bd 04 00 00 00	 mov	 ebp, 4

; 714  :   while (uBackRead<uMaxBack)

  00070	48 3b f5	 cmp	 rsi, rbp
  00073	0f 86 bc 00 00
	00		 jbe	 $LN37@zip64local
  00079	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  0007e	66 90		 npad	 2
$LL2@zip64local:

; 715  :   {
; 716  :     uLong uReadSize;
; 717  :     ZPOS64_T uReadPos ;
; 718  :     int i;
; 719  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	48 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR [rbp+1024]

; 720  :       uBackRead = uMaxBack;
; 721  :     else
; 722  :       uBackRead+=BUFREADCOMMENT;
; 723  :     uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e3	 mov	 r12, rbx
  0008a	48 3b ce	 cmp	 rcx, rsi

; 724  : 
; 725  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	48 8b ee	 mov	 rbp, rsi

; 726  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 727  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	49 8b d5	 mov	 rdx, r13
  00098	48 0f 46 e9	 cmovbe	 rbp, rcx
  0009c	49 8b ce	 mov	 rcx, r14
  0009f	4c 2b e5	 sub	 r12, rbp
  000a2	41 2b dc	 sub	 ebx, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	48 3b e8	 cmp	 rbp, rax
  000ab	0f 47 d8	 cmova	 ebx, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	75 76		 jne	 SHORT $LN48@zip64local

; 728  :       break;
; 729  : 
; 730  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ba	49 8b 46 08	 mov	 rax, QWORD PTR [r14+8]
  000be	44 8b cb	 mov	 r9d, ebx
  000c1	49 8b 4e 38	 mov	 rcx, QWORD PTR [r14+56]
  000c5	4c 8b c7	 mov	 r8, rdi
  000c8	49 8b d5	 mov	 rdx, r13
  000cb	ff d0		 call	 rax
  000cd	3b c3		 cmp	 eax, ebx
  000cf	75 5f		 jne	 SHORT $LN48@zip64local

; 731  :       break;
; 732  : 
; 733  :     for (i=(int)uReadSize-3; (i--)>0;)

  000d1	8d 53 fd	 lea	 edx, DWORD PTR [rbx-3]
  000d4	85 d2		 test	 edx, edx
  000d6	7e 4a		 jle	 SHORT $LN34@zip64local
  000d8	48 63 c2	 movsxd	 rax, edx
  000db	49 c7 c0 fd ff
	ff ff		 mov	 r8, -3
  000e2	48 83 c0 03	 add	 rax, 3
  000e6	48 03 c7	 add	 rax, rdi
  000e9	4c 2b c7	 sub	 r8, rdi
  000ec	0f 1f 40 00	 npad	 4
$LL6@zip64local:
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff ca		 dec	 edx
  000f5	48 ff c8	 dec	 rax

; 734  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 735  :         ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  000f8	80 78 fd 50	 cmp	 BYTE PTR [rax-3], 80	; 00000050H
  000fc	75 11		 jne	 SHORT $LN4@zip64local
  000fe	80 79 fd 4b	 cmp	 BYTE PTR [rcx-3], 75	; 0000004bH
  00102	75 0b		 jne	 SHORT $LN4@zip64local
  00104	80 78 ff 05	 cmp	 BYTE PTR [rax-1], 5
  00108	75 05		 jne	 SHORT $LN4@zip64local
  0010a	80 38 06	 cmp	 BYTE PTR [rax], 6
  0010d	74 0b		 je	 SHORT $LN21@zip64local
$LN4@zip64local:

; 731  :       break;
; 732  : 
; 733  :     for (i=(int)uReadSize-3; (i--)>0;)

  0010f	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00113	48 85 c9	 test	 rcx, rcx
  00116	7f d8		 jg	 SHORT $LL6@zip64local
  00118	eb 08		 jmp	 SHORT $LN34@zip64local
$LN21@zip64local:

; 736  :       {
; 737  :         uPosFound = uReadPos+(unsigned)i;

  0011a	44 8b fa	 mov	 r15d, edx
  0011d	4d 03 fc	 add	 r15, r12

; 738  :         break;
; 739  :       }
; 740  : 
; 741  :     if (uPosFound!=0)

  00120	75 0e		 jne	 SHORT $LN48@zip64local
$LN34@zip64local:

; 714  :   while (uBackRead<uMaxBack)

  00122	48 8b 5c 24 60	 mov	 rbx, QWORD PTR uSizeFile$1$[rsp]
  00127	48 3b ee	 cmp	 rbp, rsi
  0012a	0f 82 50 ff ff
	ff		 jb	 $LL2@zip64local
$LN48@zip64local:
  00130	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
$LN37@zip64local:

; 742  :       break;
; 743  :   }
; 744  :   free(buf);

  00135	48 8b cf	 mov	 rcx, rdi
  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 745  :   return uPosFound;

  0013e	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00143	49 8b c7	 mov	 rax, r15

; 746  : }

  00146	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0014b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0014f	41 5f		 pop	 r15
  00151	41 5e		 pop	 r14
  00153	41 5d		 pop	 r13
  00155	5f		 pop	 rdi
  00156	5e		 pop	 rsi
  00157	c3		 ret	 0
$LN35@zip64local:
  00158	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0015d	33 c0		 xor	 eax, eax
  0015f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00163	41 5f		 pop	 r15
  00165	41 5e		 pop	 r14
  00167	41 5d		 pop	 r13
  00169	5f		 pop	 rdi
  0016a	5e		 pop	 rsi
  0016b	c3		 ret	 0
zip64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64local_SearchCentralDir64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 96
filestream$ = 104
uL$ = 112
uSizeFile$1$ = 112
relativeOffset$ = 120
zip64local_SearchCentralDir64 PROC			; COMDAT

; 752  : local ZPOS64_T zip64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 753  :   unsigned char* buf;
; 754  :   ZPOS64_T uSizeFile;
; 755  :   ZPOS64_T uBackRead;
; 756  :   ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 757  :   ZPOS64_T uPosFound=0;
; 758  :   uLong uL;
; 759  :   ZPOS64_T relativeOffset;
; 760  : 
; 761  :   if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0000d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00013	45 33 c0	 xor	 r8d, r8d
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	41 be ff ff 00
	00		 mov	 r14d, 65535		; 0000ffffH
  00022	45 33 ff	 xor	 r15d, r15d
  00025	e8 00 00 00 00	 call	 call_zseek64
  0002a	85 c0		 test	 eax, eax
  0002c	0f 85 dc 01 00
	00		 jne	 $LN46@zip64local

; 762  :     return 0;
; 763  : 
; 764  :   uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00032	48 8b d6	 mov	 rdx, rsi
  00035	48 8b cf	 mov	 rcx, rdi
  00038	e8 00 00 00 00	 call	 call_ztell64

; 765  : 
; 766  :   if (uMaxBack>uSizeFile)

  0003d	49 3b c6	 cmp	 rax, r14
  00040	48 89 44 24 70	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 767  :     uMaxBack = uSizeFile;
; 768  : 
; 769  :   buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00045	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  0004a	48 8b d8	 mov	 rbx, rax
  0004d	4c 0f 42 f0	 cmovb	 r14, rax
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00057	48 8b e8	 mov	 rbp, rax

; 770  :   if (buf==NULL)

  0005a	48 85 c0	 test	 rax, rax
  0005d	0f 84 ab 01 00
	00		 je	 $LN46@zip64local
  00063	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13

; 771  :     return 0;
; 772  : 
; 773  :   uBackRead = 4;

  00068	41 bd 04 00 00
	00		 mov	 r13d, 4

; 774  :   while (uBackRead<uMaxBack)

  0006e	4d 3b f5	 cmp	 r14, r13
  00071	0f 86 be 00 00
	00		 jbe	 $LN59@zip64local
  00077	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  0007c	0f 1f 40 00	 npad	 4
$LL2@zip64local:

; 775  :   {
; 776  :     uLong uReadSize;
; 777  :     ZPOS64_T uReadPos;
; 778  :     int i;
; 779  :     if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	49 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR [r13+1024]

; 780  :       uBackRead = uMaxBack;
; 781  :     else
; 782  :       uBackRead+=BUFREADCOMMENT;
; 783  :     uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e3	 mov	 r12, rbx
  0008a	49 3b ce	 cmp	 rcx, r14

; 784  : 
; 785  :     uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	4d 8b ee	 mov	 r13, r14

; 786  :       (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 787  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	48 8b d6	 mov	 rdx, rsi
  00098	4c 0f 46 e9	 cmovbe	 r13, rcx
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	4d 2b e5	 sub	 r12, r13
  000a2	41 2b dc	 sub	 ebx, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	4c 3b e8	 cmp	 r13, rax
  000ab	0f 47 d8	 cmova	 ebx, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	75 76		 jne	 SHORT $LN81@zip64local

; 788  :       break;
; 789  : 
; 790  :     if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000ba	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  000be	44 8b cb	 mov	 r9d, ebx
  000c1	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000c5	4c 8b c5	 mov	 r8, rbp
  000c8	48 8b d6	 mov	 rdx, rsi
  000cb	ff d0		 call	 rax
  000cd	3b c3		 cmp	 eax, ebx
  000cf	75 5f		 jne	 SHORT $LN81@zip64local

; 791  :       break;
; 792  : 
; 793  :     for (i=(int)uReadSize-3; (i--)>0;)

  000d1	8d 53 fd	 lea	 edx, DWORD PTR [rbx-3]
  000d4	85 d2		 test	 edx, edx
  000d6	7e 4a		 jle	 SHORT $LN45@zip64local
  000d8	48 63 c2	 movsxd	 rax, edx
  000db	49 c7 c0 fd ff
	ff ff		 mov	 r8, -3
  000e2	48 83 c0 03	 add	 rax, 3
  000e6	48 03 c5	 add	 rax, rbp
  000e9	4c 2b c5	 sub	 r8, rbp
  000ec	0f 1f 40 00	 npad	 4
$LL6@zip64local:
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff ca		 dec	 edx
  000f5	48 ff c8	 dec	 rax

; 794  :     {
; 795  :       // Signature "0x07064b50" Zip64 end of central directory locator
; 796  :       if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) && ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  000f8	80 78 fd 50	 cmp	 BYTE PTR [rax-3], 80	; 00000050H
  000fc	75 11		 jne	 SHORT $LN4@zip64local
  000fe	80 79 fd 4b	 cmp	 BYTE PTR [rcx-3], 75	; 0000004bH
  00102	75 0b		 jne	 SHORT $LN4@zip64local
  00104	80 78 ff 06	 cmp	 BYTE PTR [rax-1], 6
  00108	75 05		 jne	 SHORT $LN4@zip64local
  0010a	80 38 07	 cmp	 BYTE PTR [rax], 7
  0010d	74 0b		 je	 SHORT $LN32@zip64local
$LN4@zip64local:

; 791  :       break;
; 792  : 
; 793  :     for (i=(int)uReadSize-3; (i--)>0;)

  0010f	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00113	48 85 c9	 test	 rcx, rcx
  00116	7f d8		 jg	 SHORT $LL6@zip64local
  00118	eb 08		 jmp	 SHORT $LN45@zip64local
$LN32@zip64local:

; 797  :       {
; 798  :         uPosFound = uReadPos+(unsigned)i;

  0011a	44 8b fa	 mov	 r15d, edx
  0011d	4d 03 fc	 add	 r15, r12

; 799  :         break;
; 800  :       }
; 801  :     }
; 802  : 
; 803  :       if (uPosFound!=0)

  00120	75 0e		 jne	 SHORT $LN81@zip64local
$LN45@zip64local:

; 774  :   while (uBackRead<uMaxBack)

  00122	48 8b 5c 24 70	 mov	 rbx, QWORD PTR uSizeFile$1$[rsp]
  00127	4d 3b ee	 cmp	 r13, r14
  0012a	0f 82 50 ff ff
	ff		 jb	 $LL2@zip64local
$LN81@zip64local:
  00130	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
$LN59@zip64local:

; 804  :         break;
; 805  :   }
; 806  : 
; 807  :   free(buf);

  00135	48 8b cd	 mov	 rcx, rbp
  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0013e	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 808  :   if (uPosFound == 0)

  00143	4d 85 ff	 test	 r15, r15
  00146	0f 84 c2 00 00
	00		 je	 $LN46@zip64local

; 809  :     return 0;
; 810  : 
; 811  :   /* Zip64 end of central directory locator */
; 812  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0014c	45 33 c9	 xor	 r9d, r9d
  0014f	4d 8b c7	 mov	 r8, r15
  00152	48 8b d6	 mov	 rdx, rsi
  00155	48 8b cf	 mov	 rcx, rdi
  00158	e8 00 00 00 00	 call	 call_zseek64
  0015d	85 c0		 test	 eax, eax
  0015f	0f 85 a9 00 00
	00		 jne	 $LN46@zip64local

; 813  :     return 0;
; 814  : 
; 815  :   /* the signature, already checked */
; 816  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  00165	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  0016a	48 8b d6	 mov	 rdx, rsi
  0016d	48 8b cf	 mov	 rcx, rdi
  00170	e8 00 00 00 00	 call	 zip64local_getLong
  00175	85 c0		 test	 eax, eax
  00177	0f 85 91 00 00
	00		 jne	 $LN46@zip64local

; 817  :     return 0;
; 818  : 
; 819  :   /* number of the disk with the start of the zip64 end of central directory */
; 820  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  0017d	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00182	48 8b d6	 mov	 rdx, rsi
  00185	48 8b cf	 mov	 rcx, rdi
  00188	e8 00 00 00 00	 call	 zip64local_getLong
  0018d	85 c0		 test	 eax, eax
  0018f	75 7d		 jne	 SHORT $LN46@zip64local

; 821  :     return 0;
; 822  :   if (uL != 0)

  00191	39 44 24 70	 cmp	 DWORD PTR uL$[rsp], eax
  00195	75 77		 jne	 SHORT $LN46@zip64local

; 823  :     return 0;
; 824  : 
; 825  :   /* relative offset of the zip64 end of central directory record */
; 826  :   if (zip64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=ZIP_OK)

  00197	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  0019c	48 8b d6	 mov	 rdx, rsi
  0019f	48 8b cf	 mov	 rcx, rdi
  001a2	e8 00 00 00 00	 call	 zip64local_getLong64
  001a7	85 c0		 test	 eax, eax
  001a9	75 63		 jne	 SHORT $LN46@zip64local

; 827  :     return 0;
; 828  : 
; 829  :   /* total number of disks */
; 830  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001ab	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001b0	48 8b d6	 mov	 rdx, rsi
  001b3	48 8b cf	 mov	 rcx, rdi
  001b6	e8 00 00 00 00	 call	 zip64local_getLong
  001bb	85 c0		 test	 eax, eax
  001bd	75 4f		 jne	 SHORT $LN46@zip64local

; 831  :     return 0;
; 832  :   if (uL != 1)

  001bf	83 7c 24 70 01	 cmp	 DWORD PTR uL$[rsp], 1
  001c4	75 48		 jne	 SHORT $LN46@zip64local

; 833  :     return 0;
; 834  : 
; 835  :   /* Goto Zip64 end of central directory record */
; 836  :   if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001c6	48 8b 5c 24 78	 mov	 rbx, QWORD PTR relativeOffset$[rsp]
  001cb	45 33 c9	 xor	 r9d, r9d
  001ce	4c 8b c3	 mov	 r8, rbx
  001d1	48 8b d6	 mov	 rdx, rsi
  001d4	48 8b cf	 mov	 rcx, rdi
  001d7	e8 00 00 00 00	 call	 call_zseek64
  001dc	85 c0		 test	 eax, eax
  001de	75 2e		 jne	 SHORT $LN46@zip64local

; 837  :     return 0;
; 838  : 
; 839  :   /* the signature */
; 840  :   if (zip64local_getLong(pzlib_filefunc_def,filestream,&uL)!=ZIP_OK)

  001e0	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001e5	48 8b d6	 mov	 rdx, rsi
  001e8	48 8b cf	 mov	 rcx, rdi
  001eb	e8 00 00 00 00	 call	 zip64local_getLong
  001f0	85 c0		 test	 eax, eax
  001f2	75 1a		 jne	 SHORT $LN46@zip64local

; 841  :     return 0;
; 842  : 
; 843  :   if (uL != 0x06064b50) // signature of 'Zip64 end of central directory'

  001f4	81 7c 24 70 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H
  001fc	75 10		 jne	 SHORT $LN46@zip64local

; 845  : 
; 846  :   return relativeOffset;

  001fe	48 8b c3	 mov	 rax, rbx

; 847  : }

  00201	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00205	41 5f		 pop	 r15
  00207	41 5e		 pop	 r14
  00209	5f		 pop	 rdi
  0020a	5e		 pop	 rsi
  0020b	5d		 pop	 rbp
  0020c	5b		 pop	 rbx
  0020d	c3		 ret	 0
$LN46@zip64local:

; 844  :     return 0;

  0020e	33 c0		 xor	 eax, eax

; 847  : }

  00210	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00214	41 5f		 pop	 r15
  00216	41 5e		 pop	 r14
  00218	5f		 pop	 rdi
  00219	5e		 pop	 rsi
  0021a	5d		 pop	 rbp
  0021b	5b		 pop	 rbx
  0021c	c3		 ret	 0
zip64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT LoadCentralDirectoryRecord
_TEXT	SEGMENT
number_entry$ = 32
pziinit$ = 128
uL$ = 128
sizeEndOfCentralDirectory$1 = 128
VersionMadeBy$ = 128
VersionNeeded$ = 128
number_entry_CD$ = 128
size_central_dir$ = 128
size_comment$ = 128
tv503 = 128
number_disk_with_CD$ = 136
offset_central_dir$ = 136
offset_central_dir$1$ = 136
number_disk$ = 144
number_entry_CD$1$ = 152
LoadCentralDirectoryRecord PROC				; COMDAT

; 849  : local int LoadCentralDirectoryRecord(zip64_internal* pziinit) {

  00000	40 55		 push	 rbp
  00002	53		 push	 rbx
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 54		 push	 r12
  00007	41 55		 push	 r13
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 8b ec	 mov	 rbp, rsp
  00010	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 850  :   int err=ZIP_OK;
; 851  :   ZPOS64_T byte_before_the_zipfile;/* byte before the zipfile, (>0 for sfx)*/
; 852  : 
; 853  :   ZPOS64_T size_central_dir;     /* size of the central directory  */
; 854  :   ZPOS64_T offset_central_dir;   /* offset of start of central directory */
; 855  :   ZPOS64_T central_pos;
; 856  :   uLong uL;
; 857  : 
; 858  :   uLong number_disk;          /* number of the current disk, used for
; 859  :                               spanning ZIP, unsupported, always 0*/
; 860  :   uLong number_disk_with_CD;  /* number of the disk with central dir, used
; 861  :                               for spanning ZIP, unsupported, always 0*/
; 862  :   ZPOS64_T number_entry;
; 863  :   ZPOS64_T number_entry_CD;      /* total number of entries in
; 864  :                                 the central dir
; 865  :                                 (same than number_entry on nospan) */
; 866  :   uLong VersionMadeBy;
; 867  :   uLong VersionNeeded;
; 868  :   uLong size_comment;
; 869  : 
; 870  :   int hasZIP64Record = 0;
; 871  : 
; 872  :   // check first if we find a ZIP64 record
; 873  :   central_pos = zip64local_SearchCentralDir64(&pziinit->z_filefunc,pziinit->filestream);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	e8 00 00 00 00	 call	 zip64local_SearchCentralDir64
  00020	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00024	4c 8b e0	 mov	 r12, rax

; 874  :   if(central_pos > 0)

  00027	48 8b cb	 mov	 rcx, rbx
  0002a	48 85 c0	 test	 rax, rax
  0002d	0f 84 23 01 00
	00		 je	 $LN4@LoadCentra

; 881  :   }
; 882  : 
; 883  : /* disable to allow appending to empty ZIP archive
; 884  :         if (central_pos==0)
; 885  :             err=ZIP_ERRNO;
; 886  : */
; 887  : 
; 888  :   if(hasZIP64Record)
; 889  :   {
; 890  :     ZPOS64_T sizeEndOfCentralDirectory;
; 891  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos, ZLIB_FILEFUNC_SEEK_SET) != 0)

  00033	45 33 c9	 xor	 r9d, r9d
  00036	4c 8b c0	 mov	 r8, rax
  00039	e8 00 00 00 00	 call	 call_zseek64

; 892  :       err=ZIP_ERRNO;
; 893  : 
; 894  :     /* the signature, already checked */
; 895  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  0003e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00042	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00046	f7 d8		 neg	 eax
  00048	48 8b cb	 mov	 rcx, rbx
  0004b	1b ff		 sbb	 edi, edi
  0004d	e8 00 00 00 00	 call	 zip64local_getLong

; 896  :       err=ZIP_ERRNO;
; 897  : 
; 898  :     /* size of zip64 end of central directory record */
; 899  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &sizeEndOfCentralDirectory)!=ZIP_OK)

  00052	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00056	4c 8d 45 48	 lea	 r8, QWORD PTR sizeEndOfCentralDirectory$1[rbp-56]
  0005a	85 c0		 test	 eax, eax
  0005c	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00062	48 8b cb	 mov	 rcx, rbx
  00065	41 0f 45 ff	 cmovne	 edi, r15d
  00069	e8 00 00 00 00	 call	 zip64local_getLong64

; 900  :       err=ZIP_ERRNO;
; 901  : 
; 902  :     /* version made by */
; 903  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionMadeBy)!=ZIP_OK)

  0006e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00072	4c 8d 45 48	 lea	 r8, QWORD PTR VersionMadeBy$[rbp-56]
  00076	85 c0		 test	 eax, eax
  00078	48 8b cb	 mov	 rcx, rbx
  0007b	41 0f 45 ff	 cmovne	 edi, r15d
  0007f	e8 00 00 00 00	 call	 zip64local_getShort

; 904  :       err=ZIP_ERRNO;
; 905  : 
; 906  :     /* version needed to extract */
; 907  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &VersionNeeded)!=ZIP_OK)

  00084	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00088	4c 8d 45 48	 lea	 r8, QWORD PTR VersionNeeded$[rbp-56]
  0008c	85 c0		 test	 eax, eax
  0008e	48 8b cb	 mov	 rcx, rbx
  00091	41 0f 45 ff	 cmovne	 edi, r15d
  00095	e8 00 00 00 00	 call	 zip64local_getShort

; 908  :       err=ZIP_ERRNO;
; 909  : 
; 910  :     /* number of this disk */
; 911  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  0009a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0009e	4c 8d 45 58	 lea	 r8, QWORD PTR number_disk$[rbp-56]
  000a2	85 c0		 test	 eax, eax
  000a4	48 8b cb	 mov	 rcx, rbx
  000a7	41 0f 45 ff	 cmovne	 edi, r15d
  000ab	e8 00 00 00 00	 call	 zip64local_getLong

; 912  :       err=ZIP_ERRNO;
; 913  : 
; 914  :     /* number of the disk with the start of the central directory */
; 915  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  000b0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000b4	4c 8d 45 50	 lea	 r8, QWORD PTR number_disk_with_CD$[rbp-56]
  000b8	85 c0		 test	 eax, eax
  000ba	48 8b cb	 mov	 rcx, rbx
  000bd	41 0f 45 ff	 cmovne	 edi, r15d
  000c1	e8 00 00 00 00	 call	 zip64local_getLong

; 916  :       err=ZIP_ERRNO;
; 917  : 
; 918  :     /* total number of entries in the central directory on this disk */
; 919  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream, &number_entry)!=ZIP_OK)

  000c6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ca	4c 8d 45 e8	 lea	 r8, QWORD PTR number_entry$[rbp-56]
  000ce	85 c0		 test	 eax, eax
  000d0	48 8b cb	 mov	 rcx, rbx
  000d3	41 0f 45 ff	 cmovne	 edi, r15d
  000d7	e8 00 00 00 00	 call	 zip64local_getLong64

; 920  :       err=ZIP_ERRNO;
; 921  : 
; 922  :     /* total number of entries in the central directory */
; 923  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&number_entry_CD)!=ZIP_OK)

  000dc	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e0	4c 8d 45 48	 lea	 r8, QWORD PTR number_entry_CD$[rbp-56]
  000e4	85 c0		 test	 eax, eax
  000e6	48 8b cb	 mov	 rcx, rbx
  000e9	41 0f 45 ff	 cmovne	 edi, r15d
  000ed	e8 00 00 00 00	 call	 zip64local_getLong64
  000f2	85 c0		 test	 eax, eax

; 924  :       err=ZIP_ERRNO;
; 925  : 
; 926  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  000f4	48 8b 45 48	 mov	 rax, QWORD PTR number_entry_CD$[rbp-56]
  000f8	48 89 45 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], rax
  000fc	41 0f 45 ff	 cmovne	 edi, r15d
  00100	48 3b 45 e8	 cmp	 rax, QWORD PTR number_entry$[rbp-56]
  00104	75 0c		 jne	 SHORT $LN19@LoadCentra
  00106	83 7d 50 00	 cmp	 DWORD PTR number_disk_with_CD$[rbp-56], 0
  0010a	75 06		 jne	 SHORT $LN19@LoadCentra
  0010c	83 7d 58 00	 cmp	 DWORD PTR number_disk$[rbp-56], 0
  00110	74 05		 je	 SHORT $LN18@LoadCentra
$LN19@LoadCentra:

; 927  :       err=ZIP_BADZIPFILE;

  00112	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN18@LoadCentra:

; 928  : 
; 929  :     /* size of the central directory */
; 930  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&size_central_dir)!=ZIP_OK)

  00117	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0011b	4c 8d 45 48	 lea	 r8, QWORD PTR size_central_dir$[rbp-56]
  0011f	48 8b cb	 mov	 rcx, rbx
  00122	e8 00 00 00 00	 call	 zip64local_getLong64

; 931  :       err=ZIP_ERRNO;
; 932  : 
; 933  :     /* offset of start of central directory with respect to the
; 934  :     starting disk number */
; 935  :     if (zip64local_getLong64(&pziinit->z_filefunc, pziinit->filestream,&offset_central_dir)!=ZIP_OK)

  00127	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0012b	4c 8d 45 50	 lea	 r8, QWORD PTR offset_central_dir$[rbp-56]
  0012f	85 c0		 test	 eax, eax
  00131	48 8b cb	 mov	 rcx, rbx
  00134	41 0f 45 ff	 cmovne	 edi, r15d
  00138	e8 00 00 00 00	 call	 zip64local_getLong64

; 936  :       err=ZIP_ERRNO;
; 937  : 
; 938  :     // TODO..
; 939  :     // read the comment from the standard central header.
; 940  :     size_comment = 0;
; 941  :   }

  0013d	4c 8b 6d 50	 mov	 r13, QWORD PTR offset_central_dir$[rbp-56]
  00141	85 c0		 test	 eax, eax
  00143	4c 8b 75 48	 mov	 r14, QWORD PTR size_central_dir$[rbp-56]
  00147	41 0f 45 ff	 cmovne	 edi, r15d
  0014b	4c 89 6d 50	 mov	 QWORD PTR offset_central_dir$1$[rbp-56], r13
  0014f	33 f6		 xor	 esi, esi
  00151	e9 29 01 00 00	 jmp	 $LN36@LoadCentra
$LN4@LoadCentra:

; 875  :   {
; 876  :     hasZIP64Record = 1;
; 877  :   }
; 878  :   else if(central_pos == 0)
; 879  :   {
; 880  :     central_pos = zip64local_SearchCentralDir(&pziinit->z_filefunc,pziinit->filestream);

  00156	e8 00 00 00 00	 call	 zip64local_SearchCentralDir

; 942  :   else
; 943  :   {
; 944  :     // Read End of central Directory info
; 945  :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0015b	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0015f	45 33 c9	 xor	 r9d, r9d
  00162	4c 8b c0	 mov	 r8, rax
  00165	48 8b cb	 mov	 rcx, rbx
  00168	4c 8b e0	 mov	 r12, rax
  0016b	e8 00 00 00 00	 call	 call_zseek64

; 946  :       err=ZIP_ERRNO;
; 947  : 
; 948  :     /* the signature, already checked */
; 949  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream,&uL)!=ZIP_OK)

  00170	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00174	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00178	f7 d8		 neg	 eax
  0017a	48 8b cb	 mov	 rcx, rbx
  0017d	1b ff		 sbb	 edi, edi
  0017f	e8 00 00 00 00	 call	 zip64local_getLong

; 950  :       err=ZIP_ERRNO;
; 951  : 
; 952  :     /* number of this disk */
; 953  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk)!=ZIP_OK)

  00184	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00188	4c 8d 45 58	 lea	 r8, QWORD PTR number_disk$[rbp-56]
  0018c	85 c0		 test	 eax, eax
  0018e	41 bf ff ff ff
	ff		 mov	 r15d, -1
  00194	48 8b cb	 mov	 rcx, rbx
  00197	41 0f 45 ff	 cmovne	 edi, r15d
  0019b	e8 00 00 00 00	 call	 zip64local_getShort

; 954  :       err=ZIP_ERRNO;
; 955  : 
; 956  :     /* number of the disk with the start of the central directory */
; 957  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream,&number_disk_with_CD)!=ZIP_OK)

  001a0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001a4	4c 8d 45 50	 lea	 r8, QWORD PTR number_disk_with_CD$[rbp-56]
  001a8	85 c0		 test	 eax, eax
  001aa	48 8b cb	 mov	 rcx, rbx
  001ad	41 0f 45 ff	 cmovne	 edi, r15d
  001b1	e8 00 00 00 00	 call	 zip64local_getShort

; 958  :       err=ZIP_ERRNO;
; 959  : 
; 960  :     /* total number of entries in the central dir on this disk */
; 961  :     number_entry = 0;
; 962  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  001b6	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001ba	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  001be	85 c0		 test	 eax, eax
  001c0	48 8b cb	 mov	 rcx, rbx
  001c3	41 0f 45 ff	 cmovne	 edi, r15d
  001c7	e8 00 00 00 00	 call	 zip64local_getShort
  001cc	33 f6		 xor	 esi, esi
  001ce	85 c0		 test	 eax, eax
  001d0	74 08		 je	 SHORT $LN26@LoadCentra

; 963  :       err=ZIP_ERRNO;

  001d2	41 8b ff	 mov	 edi, r15d
  001d5	44 8b f6	 mov	 r14d, esi
  001d8	eb 04		 jmp	 SHORT $LN27@LoadCentra
$LN26@LoadCentra:

; 964  :     else
; 965  :       number_entry = uL;

  001da	44 8b 75 48	 mov	 r14d, DWORD PTR uL$[rbp-56]
$LN27@LoadCentra:

; 966  : 
; 967  :     /* total number of entries in the central dir */
; 968  :     number_entry_CD = 0;
; 969  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  001de	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001e2	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  001e6	48 8b cb	 mov	 rcx, rbx
  001e9	48 89 75 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], rsi
  001ed	e8 00 00 00 00	 call	 zip64local_getShort
  001f2	85 c0		 test	 eax, eax
  001f4	74 08		 je	 SHORT $LN28@LoadCentra

; 970  :       err=ZIP_ERRNO;

  001f6	41 8b ff	 mov	 edi, r15d
  001f9	48 8b c6	 mov	 rax, rsi
  001fc	eb 0b		 jmp	 SHORT $LN29@LoadCentra
$LN28@LoadCentra:

; 971  :     else
; 972  :       number_entry_CD = uL;

  001fe	44 8b 6d 48	 mov	 r13d, DWORD PTR uL$[rbp-56]
  00202	4c 89 6d 60	 mov	 QWORD PTR number_entry_CD$1$[rbp-56], r13
  00206	41 8b c5	 mov	 eax, r13d
$LN29@LoadCentra:

; 973  : 
; 974  :     if ((number_entry_CD!=number_entry) || (number_disk_with_CD!=0) || (number_disk!=0))

  00209	49 3b c6	 cmp	 rax, r14
  0020c	75 0a		 jne	 SHORT $LN31@LoadCentra
  0020e	39 75 50	 cmp	 DWORD PTR number_disk_with_CD$[rbp-56], esi
  00211	75 05		 jne	 SHORT $LN31@LoadCentra
  00213	39 75 58	 cmp	 DWORD PTR number_disk$[rbp-56], esi
  00216	74 05		 je	 SHORT $LN30@LoadCentra
$LN31@LoadCentra:

; 975  :       err=ZIP_BADZIPFILE;

  00218	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN30@LoadCentra:

; 976  : 
; 977  :     /* size of the central directory */
; 978  :     size_central_dir = 0;
; 979  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0021d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00221	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00225	48 8b cb	 mov	 rcx, rbx
  00228	4c 8b f6	 mov	 r14, rsi
  0022b	e8 00 00 00 00	 call	 zip64local_getLong
  00230	85 c0		 test	 eax, eax
  00232	74 05		 je	 SHORT $LN32@LoadCentra

; 980  :       err=ZIP_ERRNO;

  00234	41 8b ff	 mov	 edi, r15d
  00237	eb 04		 jmp	 SHORT $LN33@LoadCentra
$LN32@LoadCentra:

; 981  :     else
; 982  :       size_central_dir = uL;

  00239	44 8b 75 48	 mov	 r14d, DWORD PTR uL$[rbp-56]
$LN33@LoadCentra:

; 983  : 
; 984  :     /* offset of start of central directory with respect to the starting disk number */
; 985  :     offset_central_dir = 0;
; 986  :     if (zip64local_getLong(&pziinit->z_filefunc, pziinit->filestream, &uL)!=ZIP_OK)

  0023d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00241	4c 8d 45 48	 lea	 r8, QWORD PTR uL$[rbp-56]
  00245	48 8b cb	 mov	 rcx, rbx
  00248	48 89 75 50	 mov	 QWORD PTR offset_central_dir$1$[rbp-56], rsi
  0024c	4c 8b ee	 mov	 r13, rsi
  0024f	e8 00 00 00 00	 call	 zip64local_getLong
  00254	85 c0		 test	 eax, eax
  00256	74 05		 je	 SHORT $LN34@LoadCentra

; 987  :       err=ZIP_ERRNO;

  00258	41 8b ff	 mov	 edi, r15d
  0025b	eb 08		 jmp	 SHORT $LN35@LoadCentra
$LN34@LoadCentra:

; 988  :     else
; 989  :       offset_central_dir = uL;

  0025d	44 8b 6d 48	 mov	 r13d, DWORD PTR uL$[rbp-56]
  00261	4c 89 6d 50	 mov	 QWORD PTR offset_central_dir$1$[rbp-56], r13
$LN35@LoadCentra:

; 990  : 
; 991  : 
; 992  :     /* zipfile global comment length */
; 993  :     if (zip64local_getShort(&pziinit->z_filefunc, pziinit->filestream, &size_comment)!=ZIP_OK)

  00265	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00269	4c 8d 45 48	 lea	 r8, QWORD PTR size_comment$[rbp-56]
  0026d	48 8b cb	 mov	 rcx, rbx
  00270	e8 00 00 00 00	 call	 zip64local_getShort
  00275	8b 75 48	 mov	 esi, DWORD PTR size_comment$[rbp-56]
  00278	85 c0		 test	 eax, eax
  0027a	74 03		 je	 SHORT $LN36@LoadCentra

; 994  :       err=ZIP_ERRNO;

  0027c	41 8b ff	 mov	 edi, r15d
$LN36@LoadCentra:

; 995  :   }
; 996  : 
; 997  :   if ((central_pos<offset_central_dir+size_central_dir) &&

  0027f	4b 8d 04 2e	 lea	 rax, QWORD PTR [r14+r13]
  00283	4c 3b e0	 cmp	 r12, rax
  00286	0f 82 07 01 00
	00		 jb	 $LN52@LoadCentra

; 998  :     (err==ZIP_OK))
; 999  :     err=ZIP_BADZIPFILE;
; 1000 : 
; 1001 :   if (err!=ZIP_OK)

  0028c	85 ff		 test	 edi, edi
  0028e	0f 85 ff 00 00
	00		 jne	 $LN52@LoadCentra

; 1005 :   }
; 1006 : 
; 1007 :   if (size_comment>0)

  00294	85 f6		 test	 esi, esi
  00296	74 37		 je	 SHORT $LN40@LoadCentra

; 1008 :   {
; 1009 :     pziinit->globalcomment = (char*)ALLOC(size_comment+1);

  00298	8d 4e 01	 lea	 ecx, DWORD PTR [rsi+1]
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002a1	48 89 83 60 01
	01 00		 mov	 QWORD PTR [rbx+65888], rax

; 1010 :     if (pziinit->globalcomment)

  002a8	48 85 c0	 test	 rax, rax
  002ab	74 22		 je	 SHORT $LN40@LoadCentra

; 1011 :     {
; 1012 :       size_comment = ZREAD64(pziinit->z_filefunc, pziinit->filestream, pziinit->globalcomment,size_comment);

  002ad	4c 8b 53 08	 mov	 r10, QWORD PTR [rbx+8]
  002b1	44 8b ce	 mov	 r9d, esi
  002b4	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  002b8	4c 8b c0	 mov	 r8, rax
  002bb	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  002bf	41 ff d2	 call	 r10
  002c2	8b c8		 mov	 ecx, eax

; 1013 :       pziinit->globalcomment[size_comment]=0;

  002c4	48 8b 83 60 01
	01 00		 mov	 rax, QWORD PTR [rbx+65888]
  002cb	40 88 3c 01	 mov	 BYTE PTR [rcx+rax], dil
$LN40@LoadCentra:

; 1014 :     }
; 1015 :   }
; 1016 : 
; 1017 :   byte_before_the_zipfile = central_pos - (offset_central_dir+size_central_dir);

  002cf	4d 2b e5	 sub	 r12, r13

; 1018 :   pziinit->add_position_when_writing_offset = byte_before_the_zipfile;
; 1019 : 
; 1020 :   {
; 1021 :     ZPOS64_T size_central_dir_to_read = size_central_dir;
; 1022 :     size_t buf_size = SIZEDATA_INDATABLOCK;
; 1023 :     void* buf_read = (void*)ALLOC(buf_size);

  002d2	b9 f0 0f 00 00	 mov	 ecx, 4080		; 00000ff0H
  002d7	4d 2b e6	 sub	 r12, r14
  002da	4c 89 a3 50 01
	01 00		 mov	 QWORD PTR [rbx+65872], r12
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 1024 :     if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir + byte_before_the_zipfile, ZLIB_FILEFUNC_SEEK_SET) != 0)

  002e7	48 8b 75 50	 mov	 rsi, QWORD PTR offset_central_dir$1$[rbp-56]
  002eb	45 33 c9	 xor	 r9d, r9d
  002ee	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  002f2	49 03 f4	 add	 rsi, r12
  002f5	4c 8b c6	 mov	 r8, rsi
  002f8	48 89 75 48	 mov	 QWORD PTR tv503[rbp-56], rsi
  002fc	48 8b cb	 mov	 rcx, rbx
  002ff	4c 8b e8	 mov	 r13, rax
  00302	e8 00 00 00 00	 call	 call_zseek64
  00307	85 c0		 test	 eax, eax
  00309	41 0f 45 ff	 cmovne	 edi, r15d

; 1025 :       err=ZIP_ERRNO;
; 1026 : 
; 1027 :     while ((size_central_dir_to_read>0) && (err==ZIP_OK))

  0030d	4d 85 f6	 test	 r14, r14
  00310	74 4a		 je	 SHORT $LN3@LoadCentra
$LL2@LoadCentra:
  00312	85 ff		 test	 edi, edi
  00314	75 42		 jne	 SHORT $LN56@LoadCentra

; 1028 :     {
; 1029 :       ZPOS64_T read_this = SIZEDATA_INDATABLOCK;
; 1030 :       if (read_this > size_central_dir_to_read)
; 1031 :         read_this = size_central_dir_to_read;
; 1032 : 
; 1033 :       if (ZREAD64(pziinit->z_filefunc, pziinit->filestream,buf_read,(uLong)read_this) != read_this)

  00316	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0031a	be f0 0f 00 00	 mov	 esi, 4080		; 00000ff0H
  0031f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00323	4c 3b f6	 cmp	 r14, rsi
  00326	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0032a	4d 8b c5	 mov	 r8, r13
  0032d	49 0f 42 f6	 cmovb	 rsi, r14
  00331	44 8b ce	 mov	 r9d, esi
  00334	ff d0		 call	 rax
  00336	8b c0		 mov	 eax, eax
  00338	48 3b c6	 cmp	 rax, rsi
  0033b	74 05		 je	 SHORT $LN53@LoadCentra

; 1034 :         err=ZIP_ERRNO;

  0033d	41 8b ff	 mov	 edi, r15d

; 1035 : 
; 1036 :       if (err==ZIP_OK)

  00340	eb 11		 jmp	 SHORT $LN44@LoadCentra
$LN53@LoadCentra:

; 1037 :         err = add_data_in_datablock(&pziinit->central_dir,buf_read, (uLong)read_this);

  00342	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00346	44 8b c6	 mov	 r8d, esi
  00349	49 8b d5	 mov	 rdx, r13
  0034c	e8 00 00 00 00	 call	 add_data_in_datablock
  00351	8b f8		 mov	 edi, eax
$LN44@LoadCentra:

; 1038 : 
; 1039 :       size_central_dir_to_read-=read_this;

  00353	4c 2b f6	 sub	 r14, rsi
  00356	75 ba		 jne	 SHORT $LL2@LoadCentra
$LN56@LoadCentra:
  00358	48 8b 75 48	 mov	 rsi, QWORD PTR tv503[rbp-56]
$LN3@LoadCentra:

; 1040 :     }
; 1041 :     free(buf_read);

  0035c	49 8b cd	 mov	 rcx, r13
  0035f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1042 :   }
; 1043 :   pziinit->begin_pos = byte_before_the_zipfile;
; 1044 :   pziinit->number_entry = number_entry_CD;

  00365	48 8b 45 60	 mov	 rax, QWORD PTR number_entry_CD$1$[rbp-56]

; 1045 : 
; 1046 :   if (ZSEEK64(pziinit->z_filefunc, pziinit->filestream, offset_central_dir+byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET) != 0)

  00369	45 33 c9	 xor	 r9d, r9d
  0036c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00370	4c 8b c6	 mov	 r8, rsi
  00373	48 8b cb	 mov	 rcx, rbx
  00376	48 89 83 58 01
	01 00		 mov	 QWORD PTR [rbx+65880], rax
  0037d	4c 89 a3 48 01
	01 00		 mov	 QWORD PTR [rbx+65864], r12
  00384	e8 00 00 00 00	 call	 call_zseek64
  00389	85 c0		 test	 eax, eax
  0038b	41 0f 45 ff	 cmovne	 edi, r15d

; 1047 :     err=ZIP_ERRNO;
; 1048 : 
; 1049 :   return err;

  0038f	8b c7		 mov	 eax, edi
  00391	eb 12		 jmp	 SHORT $LN1@LoadCentra
$LN52@LoadCentra:

; 1002 :   {
; 1003 :     ZCLOSE64(pziinit->z_filefunc, pziinit->filestream);

  00393	4c 8b 43 28	 mov	 r8, QWORD PTR [rbx+40]
  00397	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0039b	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0039f	41 ff d0	 call	 r8

; 1004 :     return ZIP_ERRNO;

  003a2	41 8b c7	 mov	 eax, r15d
$LN1@LoadCentra:

; 1050 : }

  003a5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  003a9	41 5f		 pop	 r15
  003ab	41 5e		 pop	 r14
  003ad	41 5d		 pop	 r13
  003af	41 5c		 pop	 r12
  003b1	5f		 pop	 rdi
  003b2	5e		 pop	 rsi
  003b3	5b		 pop	 rbx
  003b4	5d		 pop	 rbp
  003b5	c3		 ret	 0
LoadCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen3
_TEXT	SEGMENT
ziinit$ = 32
pathname$ = 66304
append$ = 66312
globalcomment$ = 66320
pzlib_filefunc64_32_def$ = 66328
zipOpen3 PROC						; COMDAT

; 1057 : extern zipFile ZEXPORT zipOpen3(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_32_def* pzlib_filefunc64_32_def) {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14
  00014	55		 push	 rbp
  00015	48 8d ac 24 10
	fe fe ff	 lea	 rbp, QWORD PTR [rsp-66032]
  0001d	b8 f0 02 01 00	 mov	 eax, 66288		; 000102f0H
  00022	e8 00 00 00 00	 call	 __chkstk
  00027	48 2b e0	 sub	 rsp, rax

; 1058 :     zip64_internal ziinit;
; 1059 :     zip64_internal* zi;
; 1060 :     int err=ZIP_OK;

  0002a	33 db		 xor	 ebx, ebx
  0002c	8b f2		 mov	 esi, edx

; 1061 : 
; 1062 :     ziinit.z_filefunc.zseek32_file = NULL;

  0002e	48 89 5c 24 70	 mov	 QWORD PTR ziinit$[rsp+80], rbx
  00033	4d 8b f0	 mov	 r14, r8

; 1063 :     ziinit.z_filefunc.ztell32_file = NULL;

  00036	48 89 5c 24 68	 mov	 QWORD PTR ziinit$[rsp+72], rbx
  0003b	48 8b d1	 mov	 rdx, rcx

; 1064 :     if (pzlib_filefunc64_32_def==NULL)

  0003e	4d 85 c9	 test	 r9, r9
  00041	75 0c		 jne	 SHORT $LN2@zipOpen3

; 1065 :         fill_fopen64_filefunc(&ziinit.z_filefunc.zfile_func64);

  00043	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00048	e8 00 00 00 00	 call	 fill_fopen64_filefunc
  0004d	eb 3d		 jmp	 SHORT $LN3@zipOpen3
$LN2@zipOpen3:

; 1066 :     else
; 1067 :         ziinit.z_filefunc = *pzlib_filefunc64_32_def;

  0004f	41 0f 28 01	 movaps	 xmm0, XMMWORD PTR [r9]
  00053	41 0f 28 49 10	 movaps	 xmm1, XMMWORD PTR [r9+16]
  00058	0f 29 44 24 20	 movaps	 XMMWORD PTR ziinit$[rsp], xmm0
  0005d	41 0f 28 41 20	 movaps	 xmm0, XMMWORD PTR [r9+32]
  00062	0f 29 4c 24 30	 movaps	 XMMWORD PTR ziinit$[rsp+16], xmm1
  00067	41 0f 28 49 30	 movaps	 xmm1, XMMWORD PTR [r9+48]
  0006c	0f 29 44 24 40	 movaps	 XMMWORD PTR ziinit$[rsp+32], xmm0
  00071	41 0f 28 41 40	 movaps	 xmm0, XMMWORD PTR [r9+64]
  00076	0f 29 4c 24 50	 movaps	 XMMWORD PTR ziinit$[rsp+48], xmm1
  0007b	f2 41 0f 10 49
	50		 movsd	 xmm1, QWORD PTR [r9+80]
  00081	0f 29 44 24 60	 movaps	 XMMWORD PTR ziinit$[rsp+64], xmm0
  00086	f2 0f 11 4c 24
	70		 movsd	 QWORD PTR ziinit$[rsp+80], xmm1
$LN3@zipOpen3:

; 1068 : 
; 1069 :     ziinit.filestream = ZOPEN64(ziinit.z_filefunc,

  0008c	b8 0b 00 00 00	 mov	 eax, 11
  00091	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00096	41 b8 07 00 00
	00		 mov	 r8d, 7
  0009c	85 f6		 test	 esi, esi
  0009e	44 0f 44 c0	 cmove	 r8d, eax
  000a2	e8 00 00 00 00	 call	 call_zopen64
  000a7	48 89 44 24 78	 mov	 QWORD PTR ziinit$[rsp+88], rax
  000ac	48 8b f8	 mov	 rdi, rax
  000af	48 85 c0	 test	 rax, rax

; 1070 :                   pathname,
; 1071 :                   (append == APPEND_STATUS_CREATE) ?
; 1072 :                   (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_CREATE) :
; 1073 :                     (ZLIB_FILEFUNC_MODE_READ | ZLIB_FILEFUNC_MODE_WRITE | ZLIB_FILEFUNC_MODE_EXISTING));
; 1074 : 
; 1075 :     if (ziinit.filestream == NULL)

  000b2	0f 84 81 00 00
	00		 je	 $LN19@zipOpen3

; 1076 :         return NULL;
; 1077 : 
; 1078 :     if (append == APPEND_STATUS_CREATEAFTER)

  000b8	83 fe 01	 cmp	 esi, 1
  000bb	75 16		 jne	 SHORT $LN5@zipOpen3

; 1079 :         ZSEEK64(ziinit.z_filefunc,ziinit.filestream,0,SEEK_END);

  000bd	41 b9 02 00 00
	00		 mov	 r9d, 2
  000c3	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000c8	45 33 c0	 xor	 r8d, r8d
  000cb	48 8b d0	 mov	 rdx, rax
  000ce	e8 00 00 00 00	 call	 call_zseek64
$LN5@zipOpen3:

; 1080 : 
; 1081 :     ziinit.begin_pos = ZTELL64(ziinit.z_filefunc,ziinit.filestream);

  000d3	48 8b d7	 mov	 rdx, rdi
  000d6	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  000db	e8 00 00 00 00	 call	 call_ztell64

; 1082 :     ziinit.in_opened_file_inzip = 0;
; 1083 :     ziinit.ci.stream_initialised = 0;
; 1084 :     ziinit.number_entry = 0;
; 1085 :     ziinit.add_position_when_writing_offset = 0;
; 1086 :     init_linkedlist(&(ziinit.central_dir));

  000e0	48 8d 4d 80	 lea	 rcx, QWORD PTR ziinit$[rbp-160]
  000e4	48 89 85 68 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65608], rax
  000eb	89 5d 90	 mov	 DWORD PTR ziinit$[rbp-144], ebx
  000ee	89 5d f0	 mov	 DWORD PTR ziinit$[rbp-48], ebx
  000f1	48 89 9d 78 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65624], rbx
  000f8	48 89 9d 70 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65616], rbx
  000ff	e8 00 00 00 00	 call	 init_linkedlist

; 1087 :     memset(&ziinit.set, 0, sizeof(set_t));  // make sure set appears dormant

  00104	33 d2		 xor	 edx, edx
  00106	48 8d 8d 90 00
	01 00		 lea	 rcx, QWORD PTR ziinit$[rbp+65648]
  0010d	41 b8 40 01 00
	00		 mov	 r8d, 320		; 00000140H
  00113	e8 00 00 00 00	 call	 memset

; 1088 : 
; 1089 : 
; 1090 : 
; 1091 :     zi = (zip64_internal*)ALLOC(sizeof(zip64_internal));

  00118	b9 d0 02 01 00	 mov	 ecx, 66256		; 000102d0H
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00123	48 8b f8	 mov	 rdi, rax

; 1092 :     if (zi==NULL)

  00126	48 85 c0	 test	 rax, rax
  00129	75 12		 jne	 SHORT $LN6@zipOpen3

; 1093 :     {
; 1094 :         ZCLOSE64(ziinit.z_filefunc,ziinit.filestream);

  0012b	48 8b 54 24 78	 mov	 rdx, QWORD PTR ziinit$[rsp+88]
  00130	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ziinit$[rsp+56]
  00135	ff 54 24 48	 call	 QWORD PTR ziinit$[rsp+40]
$LN19@zipOpen3:

; 1125 :     }
; 1126 : }

  00139	33 c0		 xor	 eax, eax
  0013b	eb 57		 jmp	 SHORT $LN10@zipOpen3
$LN6@zipOpen3:

; 1095 :         return NULL;
; 1096 :     }
; 1097 : 
; 1098 :     /* now we add file in a zipfile */
; 1099 : #    ifndef NO_ADDFILEINEXISTINGZIP
; 1100 :     ziinit.globalcomment = NULL;

  0013d	48 89 9d 80 00
	01 00		 mov	 QWORD PTR ziinit$[rbp+65632], rbx
  00144	48 8b cb	 mov	 rcx, rbx

; 1101 :     if (append == APPEND_STATUS_ADDINZIP)

  00147	83 fe 02	 cmp	 esi, 2
  0014a	75 13		 jne	 SHORT $LN7@zipOpen3

; 1102 :     {
; 1103 :       // Read and Cache Central Directory Records
; 1104 :       err = LoadCentralDirectoryRecord(&ziinit);

  0014c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ziinit$[rsp]
  00151	e8 00 00 00 00	 call	 LoadCentralDirectoryRecord
  00156	48 8b 8d 80 00
	01 00		 mov	 rcx, QWORD PTR ziinit$[rbp+65632]
  0015d	8b d8		 mov	 ebx, eax
$LN7@zipOpen3:

; 1105 :     }
; 1106 : 
; 1107 :     if (globalcomment)

  0015f	4d 85 f6	 test	 r14, r14
  00162	74 03		 je	 SHORT $LN8@zipOpen3

; 1108 :     {
; 1109 :       *globalcomment = ziinit.globalcomment;

  00164	49 89 0e	 mov	 QWORD PTR [r14], rcx
$LN8@zipOpen3:

; 1110 :     }
; 1111 : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 1112 : 
; 1113 :     if (err != ZIP_OK)

  00167	85 db		 test	 ebx, ebx
  00169	74 13		 je	 SHORT $LN9@zipOpen3

; 1114 :     {
; 1115 : #    ifndef NO_ADDFILEINEXISTINGZIP
; 1116 :         free(ziinit.globalcomment);

  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1117 : #    endif /* !NO_ADDFILEINEXISTINGZIP*/
; 1118 :         free(zi);

  00171	48 8b cf	 mov	 rcx, rdi
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1119 :         return NULL;

  0017a	33 c0		 xor	 eax, eax
  0017c	eb 16		 jmp	 SHORT $LN10@zipOpen3
$LN9@zipOpen3:

; 1120 :     }
; 1121 :     else
; 1122 :     {
; 1123 :         *zi = ziinit;

  0017e	41 b8 d0 02 01
	00		 mov	 r8d, 66256		; 000102d0H
  00184	48 8d 54 24 20	 lea	 rdx, QWORD PTR ziinit$[rsp]
  00189	48 8b cf	 mov	 rcx, rdi
  0018c	e8 00 00 00 00	 call	 memcpy

; 1124 :         return (zipFile)zi;

  00191	48 8b c7	 mov	 rax, rdi
$LN10@zipOpen3:

; 1125 :     }
; 1126 : }

  00194	4c 8d 9c 24 f0
	02 01 00	 lea	 r11, QWORD PTR [rsp+66288]
  0019c	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  001a0	49 8b 73 18	 mov	 rsi, QWORD PTR [r11+24]
  001a4	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  001a8	4d 8b 73 28	 mov	 r14, QWORD PTR [r11+40]
  001ac	49 8b e3	 mov	 rsp, r11
  001af	5d		 pop	 rbp
  001b0	c3		 ret	 0
zipOpen3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc32_def$ = 168
zipOpen2 PROC						; COMDAT

; 1128 : extern zipFile ZEXPORT zipOpen2(const char *pathname, int append, zipcharpc* globalcomment, zlib_filefunc_def* pzlib_filefunc32_def) {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  00009	4d 8b d0	 mov	 r10, r8
  0000c	44 8b da	 mov	 r11d, edx
  0000f	48 8b d9	 mov	 rbx, rcx

; 1129 :     if (pzlib_filefunc32_def != NULL)

  00012	4d 85 c9	 test	 r9, r9
  00015	74 29		 je	 SHORT $LN2@zipOpen2

; 1130 :     {
; 1131 :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 1132 :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  00017	49 8b d1	 mov	 rdx, r9
  0001a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0001f	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 1133 :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00024	4d 8b c2	 mov	 r8, r10
  00027	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0002c	41 8b d3	 mov	 edx, r11d
  0002f	48 8b cb	 mov	 rcx, rbx

; 1134 :     }
; 1135 :     else
; 1136 :         return zipOpen3(pathname, append, globalcomment, NULL);
; 1137 : }

  00032	e8 00 00 00 00	 call	 zipOpen3
  00037	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0003e	5b		 pop	 rbx
  0003f	c3		 ret	 0
$LN2@zipOpen2:
  00040	e8 00 00 00 00	 call	 zipOpen3
  00045	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
zipOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
pathname$ = 144
append$ = 152
globalcomment$ = 160
pzlib_filefunc_def$ = 168
zipOpen2_64 PROC					; COMDAT

; 1139 : extern zipFile ZEXPORT zipOpen2_64(const void *pathname, int append, zipcharpc* globalcomment, zlib_filefunc64_def* pzlib_filefunc_def) {

$LN7:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1140 :     if (pzlib_filefunc_def != NULL)

  00007	4d 85 c9	 test	 r9, r9
  0000a	74 45		 je	 SHORT $LN2@zipOpen2_6

; 1141 :     {
; 1142 :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 1143 :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  0000c	41 0f 10 01	 movups	 xmm0, XMMWORD PTR [r9]

; 1144 :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00010	33 c0		 xor	 eax, eax
  00012	41 0f 10 49 10	 movups	 xmm1, XMMWORD PTR [r9+16]
  00017	48 89 44 24 68	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+72], rax
  0001c	0f 29 44 24 20	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp], xmm0
  00021	41 0f 10 41 20	 movups	 xmm0, XMMWORD PTR [r9+32]

; 1145 :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00026	48 89 44 24 70	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+80], rax
  0002b	0f 29 4c 24 30	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+16], xmm1
  00030	41 0f 10 49 30	 movups	 xmm1, XMMWORD PTR [r9+48]

; 1146 :         return zipOpen3(pathname, append, globalcomment, &zlib_filefunc64_32_def_fill);

  00035	4c 8d 4c 24 20	 lea	 r9, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0003a	0f 29 44 24 40	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+32], xmm0
  0003f	0f 29 4c 24 50	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+48], xmm1

; 1147 :     }
; 1148 :     else
; 1149 :         return zipOpen3(pathname, append, globalcomment, NULL);
; 1150 : }

  00044	e8 00 00 00 00	 call	 zipOpen3
  00049	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00050	c3		 ret	 0
$LN2@zipOpen2_6:
  00051	e8 00 00 00 00	 call	 zipOpen3
  00056	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0005d	c3		 ret	 0
zipOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen
_TEXT	SEGMENT
pathname$ = 8
append$ = 16
zipOpen	PROC						; COMDAT

; 1155 :     return zipOpen3((const void*)pathname,append,NULL,NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	e9 00 00 00 00	 jmp	 zipOpen3
zipOpen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpen64
_TEXT	SEGMENT
pathname$ = 8
append$ = 16
zipOpen64 PROC						; COMDAT

; 1159 :     return zipOpen3(pathname,append,NULL,NULL);

  00000	45 33 c9	 xor	 r9d, r9d
  00003	45 33 c0	 xor	 r8d, r8d
  00006	e9 00 00 00 00	 jmp	 zipOpen3
zipOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT Write_LocalFileHeader
_TEXT	SEGMENT
zi$ = 64
filename$ = 72
size_extrafield_local$ = 80
extrafield_local$ = 88
Write_LocalFileHeader PROC				; COMDAT

; 1162 : local int Write_LocalFileHeader(zip64_internal* zi, const char* filename, uInt size_extrafield_local, const void* extrafield_local) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00013	4d 8b f9	 mov	 r15, r9
  00016	45 8b f0	 mov	 r14d, r8d
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b d9	 mov	 rbx, rcx

; 1163 :   /* write the local header */
; 1164 :   int err;
; 1165 :   uInt size_filename = (uInt)strlen(filename);

  0001f	48 c7 c7 ff ff
	ff ff		 mov	 rdi, -1
$LL27@Write_Loca:
  00026	48 ff c7	 inc	 rdi
  00029	80 3c 3a 00	 cmp	 BYTE PTR [rdx+rdi], 0
  0002d	75 f7		 jne	 SHORT $LL27@Write_Loca

; 1166 :   uInt size_extrafield = size_extrafield_local;
; 1167 : 
; 1168 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)LOCALHEADERMAGIC, 4);

  0002f	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00033	41 b9 04 00 00
	00		 mov	 r9d, 4
  00039	41 b8 50 4b 03
	04		 mov	 r8d, 67324752		; 04034b50H
  0003f	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
  00044	e8 00 00 00 00	 call	 zip64local_putValue

; 1169 : 
; 1170 :   if (err==ZIP_OK)

  00049	85 c0		 test	 eax, eax
  0004b	0f 85 0b 02 00
	00		 jne	 $LN30@Write_Loca

; 1171 :   {
; 1172 :     if(zi->ci.zip64)
; 1173 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);/* version needed to extract */
; 1174 :     else
; 1175 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)20,2);/* version needed to extract */
; 1176 :   }
; 1177 : 
; 1178 :   if (err==ZIP_OK)

  00051	83 bb 0c 01 01
	00 00		 cmp	 DWORD PTR [rbx+65804], 0
  00058	b8 14 00 00 00	 mov	 eax, 20
  0005d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00061	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00067	44 0f 44 c0	 cmove	 r8d, eax
  0006b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00071	48 8b cb	 mov	 rcx, rbx
  00074	e8 00 00 00 00	 call	 zip64local_putValue
  00079	85 c0		 test	 eax, eax
  0007b	0f 85 db 01 00
	00		 jne	 $LN30@Write_Loca

; 1179 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.flag,2);

  00081	44 8b 83 f4 00
	00 00		 mov	 r8d, DWORD PTR [rbx+244]
  00088	41 b9 02 00 00
	00		 mov	 r9d, 2
  0008e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00092	48 8b cb	 mov	 rcx, rbx
  00095	e8 00 00 00 00	 call	 zip64local_putValue

; 1180 : 
; 1181 :   if (err==ZIP_OK)

  0009a	85 c0		 test	 eax, eax
  0009c	0f 85 ba 01 00
	00		 jne	 $LN30@Write_Loca

; 1182 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.method,2);

  000a2	44 8b 83 f8 00
	00 00		 mov	 r8d, DWORD PTR [rbx+248]
  000a9	41 b9 02 00 00
	00		 mov	 r9d, 2
  000af	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000b3	48 8b cb	 mov	 rcx, rbx
  000b6	e8 00 00 00 00	 call	 zip64local_putValue

; 1183 : 
; 1184 :   if (err==ZIP_OK)

  000bb	85 c0		 test	 eax, eax
  000bd	0f 85 99 01 00
	00		 jne	 $LN30@Write_Loca

; 1185 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->ci.dosDate,4);

  000c3	44 8b 83 00 01
	01 00		 mov	 r8d, DWORD PTR [rbx+65792]
  000ca	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000d4	48 8b cb	 mov	 rcx, rbx
  000d7	e8 00 00 00 00	 call	 zip64local_putValue

; 1186 : 
; 1187 :   // CRC / Compressed size / Uncompressed size will be filled in later and rewritten later
; 1188 :   if (err==ZIP_OK)

  000dc	85 c0		 test	 eax, eax
  000de	0f 85 78 01 00
	00		 jne	 $LN30@Write_Loca

; 1189 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* crc 32, unknown */

  000e4	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000e8	41 b9 04 00 00
	00		 mov	 r9d, 4
  000ee	45 33 c0	 xor	 r8d, r8d
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 zip64local_putValue

; 1190 :   if (err==ZIP_OK)

  000f9	85 c0		 test	 eax, eax
  000fb	0f 85 5b 01 00
	00		 jne	 $LN30@Write_Loca

; 1191 :   {
; 1192 :     if(zi->ci.zip64)
; 1193 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* compressed size, unknown */
; 1194 :     else
; 1195 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* compressed size, unknown */
; 1196 :   }
; 1197 :   if (err==ZIP_OK)

  00101	8b 83 0c 01 01
	00		 mov	 eax, DWORD PTR [rbx+65804]
  00107	bd ff ff ff ff	 mov	 ebp, -1			; ffffffffH
  0010c	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00110	f7 d8		 neg	 eax
  00112	41 b9 04 00 00
	00		 mov	 r9d, 4
  00118	48 8b cb	 mov	 rcx, rbx
  0011b	4d 1b c0	 sbb	 r8, r8
  0011e	4c 23 c5	 and	 r8, rbp
  00121	e8 00 00 00 00	 call	 zip64local_putValue
  00126	85 c0		 test	 eax, eax
  00128	0f 85 2e 01 00
	00		 jne	 $LN30@Write_Loca

; 1198 :   {
; 1199 :     if(zi->ci.zip64)
; 1200 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xFFFFFFFF,4); /* uncompressed size, unknown */
; 1201 :     else
; 1202 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4); /* uncompressed size, unknown */
; 1203 :   }
; 1204 : 
; 1205 :   if (err==ZIP_OK)

  0012e	8b 83 0c 01 01
	00		 mov	 eax, DWORD PTR [rbx+65804]
  00134	41 b9 04 00 00
	00		 mov	 r9d, 4
  0013a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0013e	f7 d8		 neg	 eax
  00140	48 8b cb	 mov	 rcx, rbx
  00143	4d 1b c0	 sbb	 r8, r8
  00146	4c 23 c5	 and	 r8, rbp
  00149	e8 00 00 00 00	 call	 zip64local_putValue
  0014e	85 c0		 test	 eax, eax
  00150	0f 85 06 01 00
	00		 jne	 $LN30@Write_Loca

; 1206 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_filename,2);

  00156	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0015a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00160	44 8b c7	 mov	 r8d, edi
  00163	48 8b cb	 mov	 rcx, rbx
  00166	e8 00 00 00 00	 call	 zip64local_putValue

; 1207 : 
; 1208 :   if(zi->ci.zip64)
; 1209 :   {
; 1210 :     size_extrafield += 20;
; 1211 :   }
; 1212 : 
; 1213 :   if (err==ZIP_OK)

  0016b	85 c0		 test	 eax, eax
  0016d	0f 85 e9 00 00
	00		 jne	 $LN30@Write_Loca
  00173	39 83 0c 01 01
	00		 cmp	 DWORD PTR [rbx+65804], eax
  00179	45 8d 46 14	 lea	 r8d, DWORD PTR [r14+20]

; 1214 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_extrafield,2);

  0017d	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00181	41 b9 02 00 00
	00		 mov	 r9d, 2
  00187	45 0f 44 c6	 cmove	 r8d, r14d
  0018b	48 8b cb	 mov	 rcx, rbx
  0018e	e8 00 00 00 00	 call	 zip64local_putValue
  00193	8b e8		 mov	 ebp, eax

; 1215 : 
; 1216 :   if ((err==ZIP_OK) && (size_filename > 0))

  00195	85 c0		 test	 eax, eax
  00197	0f 85 bf 00 00
	00		 jne	 $LN30@Write_Loca
  0019d	85 ff		 test	 edi, edi
  0019f	74 23		 je	 SHORT $LN26@Write_Loca

; 1217 :   {
; 1218 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,filename,size_filename)!=size_filename)

  001a1	4c 8b 53 10	 mov	 r10, QWORD PTR [rbx+16]
  001a5	44 8b cf	 mov	 r9d, edi
  001a8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001ac	4c 8b c6	 mov	 r8, rsi
  001af	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001b3	41 ff d2	 call	 r10
  001b6	3b c7		 cmp	 eax, edi
  001b8	74 0a		 je	 SHORT $LN26@Write_Loca
$LN48@Write_Loca:

; 1248 : }

  001ba	b8 ff ff ff ff	 mov	 eax, -1
  001bf	e9 98 00 00 00	 jmp	 $LN30@Write_Loca
$LN26@Write_Loca:

; 1219 :       err = ZIP_ERRNO;
; 1220 :   }
; 1221 : 
; 1222 :   if ((err==ZIP_OK) && (size_extrafield_local > 0))

  001c4	45 85 f6	 test	 r14d, r14d
  001c7	74 19		 je	 SHORT $LN25@Write_Loca

; 1223 :   {
; 1224 :     if (ZWRITE64(zi->z_filefunc, zi->filestream, extrafield_local, size_extrafield_local) != size_extrafield_local)

  001c9	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  001cd	45 8b ce	 mov	 r9d, r14d
  001d0	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001d4	4d 8b c7	 mov	 r8, r15
  001d7	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  001db	ff d0		 call	 rax
  001dd	41 3b c6	 cmp	 eax, r14d
  001e0	75 d8		 jne	 SHORT $LN48@Write_Loca
$LN25@Write_Loca:

; 1225 :       err = ZIP_ERRNO;
; 1226 :   }
; 1227 : 
; 1228 : 
; 1229 :   if ((err==ZIP_OK) && (zi->ci.zip64))

  001e2	83 bb 0c 01 01
	00 00		 cmp	 DWORD PTR [rbx+65804], 0
  001e9	74 6f		 je	 SHORT $LN28@Write_Loca

; 1230 :   {
; 1231 :       // write the Zip64 extended info
; 1232 :       short HeaderID = 1;
; 1233 :       short DataSize = 16;
; 1234 :       ZPOS64_T CompressedSize = 0;
; 1235 :       ZPOS64_T UncompressedSize = 0;
; 1236 : 
; 1237 :       // Remember position of Zip64 extended info for the local file header. (needed when we update size after done with file)
; 1238 :       zi->ci.pos_zip64extrainfo = ZTELL64(zi->z_filefunc,zi->filestream);

  001eb	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001ef	48 8b cb	 mov	 rcx, rbx
  001f2	e8 00 00 00 00	 call	 call_ztell64

; 1239 : 
; 1240 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)HeaderID,2);

  001f7	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  001fb	41 b9 02 00 00
	00		 mov	 r9d, 2
  00201	41 b8 01 00 00
	00		 mov	 r8d, 1
  00207	48 89 83 10 01
	01 00		 mov	 QWORD PTR [rbx+65808], rax
  0020e	48 8b cb	 mov	 rcx, rbx
  00211	e8 00 00 00 00	 call	 zip64local_putValue

; 1241 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)DataSize,2);

  00216	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0021a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00220	41 b8 10 00 00
	00		 mov	 r8d, 16
  00226	48 8b cb	 mov	 rcx, rbx
  00229	e8 00 00 00 00	 call	 zip64local_putValue

; 1242 : 
; 1243 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)UncompressedSize,8);

  0022e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00232	41 b9 08 00 00
	00		 mov	 r9d, 8
  00238	45 33 c0	 xor	 r8d, r8d
  0023b	48 8b cb	 mov	 rcx, rbx
  0023e	e8 00 00 00 00	 call	 zip64local_putValue

; 1244 :       err = zip64local_putValue(&zi->z_filefunc, zi->filestream, (ZPOS64_T)CompressedSize,8);

  00243	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00247	41 b9 08 00 00
	00		 mov	 r9d, 8
  0024d	45 33 c0	 xor	 r8d, r8d
  00250	48 8b cb	 mov	 rcx, rbx
  00253	e8 00 00 00 00	 call	 zip64local_putValue
  00258	eb 02		 jmp	 SHORT $LN30@Write_Loca
$LN28@Write_Loca:

; 1245 :   }
; 1246 : 
; 1247 :   return err;

  0025a	8b c5		 mov	 eax, ebp
$LN30@Write_Loca:
  0025c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 1248 : }

  00261	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00266	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  0026b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0026f	41 5f		 pop	 r15
  00271	41 5e		 pop	 r14
  00273	5f		 pop	 rdi
  00274	c3		 ret	 0
Write_LocalFileHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip4_64
_TEXT	SEGMENT
bufHead$1 = 64
file$ = 144
tv1280 = 144
filename$ = 152
zipfi$ = 160
extrafield_local$ = 168
size_extrafield_local$ = 176
extrafield_global$ = 184
size_extrafield_global$ = 192
comment$ = 200
method$ = 208
level$ = 216
raw$ = 224
windowBits$ = 232
memLevel$ = 240
strategy$ = 248
password$ = 256
crcForCrypting$ = 264
versionMadeBy$ = 272
flagBase$ = 280
zip64$ = 288
zipOpenNewFileInZip4_64 PROC				; COMDAT

; 1264 :                                            uLong versionMadeBy, uLong flagBase, int zip64) {

$LN109:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	53		 push	 rbx
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00012	4d 8b e8	 mov	 r13, r8
  00015	48 8b f2	 mov	 rsi, rdx
  00018	48 8b d9	 mov	 rbx, rcx

; 1265 :     zip64_internal* zi;
; 1266 :     uInt size_filename;
; 1267 :     uInt size_comment;
; 1268 :     uInt i;
; 1269 :     int err = ZIP_OK;
; 1270 : 
; 1271 : #    ifdef NOCRYPT
; 1272 :     if (password != NULL)
; 1273 :         return ZIP_PARAMERROR;
; 1274 : #    endif
; 1275 : 
; 1276 :     if (file == NULL)

  0001b	48 85 c9	 test	 rcx, rcx
  0001e	0f 84 ff 05 00
	00		 je	 $LN16@zipOpenNew

; 1277 :         return ZIP_PARAMERROR;
; 1278 : 
; 1279 : #ifdef HAVE_BZIP2
; 1280 :     if ((method!=0) && (method!=Z_DEFLATED) && (method!=Z_BZIP2ED))
; 1281 :       return ZIP_PARAMERROR;
; 1282 : #else
; 1283 :     if ((method!=0) && (method!=Z_DEFLATED))

  00024	44 8b b4 24 d0
	00 00 00	 mov	 r14d, DWORD PTR method$[rsp]
  0002c	41 f7 c6 f7 ff
	ff ff		 test	 r14d, -9		; fffffff7H
  00033	0f 85 ea 05 00
	00		 jne	 $LN16@zipOpenNew

; 1284 :       return ZIP_PARAMERROR;
; 1285 : #endif
; 1286 : 
; 1287 :     // The filename and comment length must fit in 16 bits.
; 1288 :     if ((filename!=NULL) && (strlen(filename)>0xffff))

  00039	48 85 d2	 test	 rdx, rdx
  0003c	74 1c		 je	 SHORT $LN13@zipOpenNew
  0003e	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LL74@zipOpenNew:
  00045	48 ff c0	 inc	 rax
  00048	80 3c 02 00	 cmp	 BYTE PTR [rdx+rax], 0
  0004c	75 f7		 jne	 SHORT $LL74@zipOpenNew
  0004e	48 3d ff ff 00
	00		 cmp	 rax, 65535		; 0000ffffH
  00054	0f 87 c9 05 00
	00		 ja	 $LN16@zipOpenNew
$LN13@zipOpenNew:

; 1289 :         return ZIP_PARAMERROR;
; 1290 :     if ((comment!=NULL) && (strlen(comment)>0xffff))

  0005a	48 8b bc 24 c8
	00 00 00	 mov	 rdi, QWORD PTR comment$[rsp]
  00062	48 85 ff	 test	 rdi, rdi
  00065	74 1e		 je	 SHORT $LN14@zipOpenNew
  00067	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0006e	66 90		 npad	 2
$LL73@zipOpenNew:
  00070	48 ff c0	 inc	 rax
  00073	80 3c 07 00	 cmp	 BYTE PTR [rdi+rax], 0
  00077	75 f7		 jne	 SHORT $LL73@zipOpenNew
  00079	48 3d ff ff 00
	00		 cmp	 rax, 65535		; 0000ffffH
  0007f	0f 87 9e 05 00
	00		 ja	 $LN16@zipOpenNew
$LN14@zipOpenNew:

; 1291 :         return ZIP_PARAMERROR;
; 1292 :     // The extra field length must fit in 16 bits. If the member also requires
; 1293 :     // a Zip64 extra block, that will also need to fit within that 16-bit
; 1294 :     // length, but that will be checked for later.
; 1295 :     if ((size_extrafield_local>0xffff) || (size_extrafield_global>0xffff))

  00085	81 bc 24 b0 00
	00 00 ff ff 00
	00		 cmp	 DWORD PTR size_extrafield_local$[rsp], 65535 ; 0000ffffH
  00090	0f 87 8d 05 00
	00		 ja	 $LN16@zipOpenNew
  00096	44 8b a4 24 c0
	00 00 00	 mov	 r12d, DWORD PTR size_extrafield_global$[rsp]
  0009e	41 81 fc ff ff
	00 00		 cmp	 r12d, 65535		; 0000ffffH
  000a5	0f 87 78 05 00
	00		 ja	 $LN16@zipOpenNew

; 1297 : 
; 1298 :     zi = (zip64_internal*)file;
; 1299 : 
; 1300 :     if (zi->in_opened_file_inzip == 1)

  000ab	83 79 70 01	 cmp	 DWORD PTR [rcx+112], 1
  000af	75 0d		 jne	 SHORT $LN18@zipOpenNew

; 1301 :     {
; 1302 :         err = zipCloseFileInZip (file);

  000b1	e8 00 00 00 00	 call	 zipCloseFileInZip

; 1303 :         if (err != ZIP_OK)

  000b6	85 c0		 test	 eax, eax
  000b8	0f 85 b8 03 00
	00		 jne	 $LN1@zipOpenNew
$LN18@zipOpenNew:

; 1304 :             return err;
; 1305 :     }
; 1306 : 
; 1307 :     if (filename==NULL)
; 1308 :         filename="-";
; 1309 : 
; 1310 :     if (comment==NULL)

  000be	48 85 f6	 test	 rsi, rsi
  000c1	48 89 ac 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], rbp
  000c9	4c 89 7c 24 50	 mov	 QWORD PTR [rsp+80], r15
  000ce	4c 8d 3d 00 00
	00 00		 lea	 r15, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
  000d5	4c 0f 45 fe	 cmovne	 r15, rsi
  000d9	45 33 c9	 xor	 r9d, r9d
  000dc	48 85 ff	 test	 rdi, rdi
  000df	75 05		 jne	 SHORT $LN20@zipOpenNew

; 1311 :         size_comment = 0;

  000e1	41 8b f1	 mov	 esi, r9d
  000e4	eb 13		 jmp	 SHORT $LN21@zipOpenNew
$LN20@zipOpenNew:

; 1312 :     else
; 1313 :         size_comment = (uInt)strlen(comment);

  000e6	48 c7 c6 ff ff
	ff ff		 mov	 rsi, -1
  000ed	0f 1f 00	 npad	 3
$LL72@zipOpenNew:
  000f0	48 ff c6	 inc	 rsi
  000f3	44 38 0c 37	 cmp	 BYTE PTR [rdi+rsi], r9b
  000f7	75 f7		 jne	 SHORT $LL72@zipOpenNew
$LN21@zipOpenNew:

; 1314 : 
; 1315 :     size_filename = (uInt)strlen(filename);

  000f9	48 c7 c5 ff ff
	ff ff		 mov	 rbp, -1
$LL71@zipOpenNew:
  00100	48 ff c5	 inc	 rbp
  00103	45 38 0c 2f	 cmp	 BYTE PTR [r15+rbp], r9b
  00107	75 f7		 jne	 SHORT $LL71@zipOpenNew

; 1316 : 
; 1317 :     if (zipfi == NULL)

  00109	4d 85 ed	 test	 r13, r13
  0010c	75 05		 jne	 SHORT $LN22@zipOpenNew

; 1318 :         zi->ci.dosDate = 0;

  0010e	41 8b c1	 mov	 eax, r9d
  00111	eb 10		 jmp	 SHORT $LN25@zipOpenNew
$LN22@zipOpenNew:

; 1319 :     else
; 1320 :     {
; 1321 :         if (zipfi->dosDate != 0)

  00113	41 8b 45 18	 mov	 eax, DWORD PTR [r13+24]
  00117	85 c0		 test	 eax, eax
  00119	75 08		 jne	 SHORT $LN25@zipOpenNew

; 1322 :             zi->ci.dosDate = zipfi->dosDate;
; 1323 :         else
; 1324 :           zi->ci.dosDate = zip64local_TmzDateToDosDate(&zipfi->tmz_date);

  0011b	49 8b cd	 mov	 rcx, r13
  0011e	e8 00 00 00 00	 call	 zip64local_TmzDateToDosDate
$LN25@zipOpenNew:

; 1325 :     }
; 1326 : 
; 1327 :     zi->ci.flag = flagBase;
; 1328 :     if ((level==8) || (level==9))

  00123	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR level$[rsp]
  0012a	89 83 00 01 01
	00		 mov	 DWORD PTR [rbx+65792], eax
  00130	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR flagBase$[rsp]
  00137	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
  0013d	83 f9 08	 cmp	 ecx, 8
  00140	74 05		 je	 SHORT $LN27@zipOpenNew
  00142	83 f9 09	 cmp	 ecx, 9
  00145	75 09		 jne	 SHORT $LN26@zipOpenNew
$LN27@zipOpenNew:

; 1329 :       zi->ci.flag |= 2;

  00147	83 c8 02	 or	 eax, 2
  0014a	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN26@zipOpenNew:

; 1330 :     if (level==2)

  00150	83 f9 02	 cmp	 ecx, 2
  00153	75 05		 jne	 SHORT $LN28@zipOpenNew

; 1331 :       zi->ci.flag |= 4;

  00155	83 c8 04	 or	 eax, 4
  00158	eb 08		 jmp	 SHORT $LN107@zipOpenNew
$LN28@zipOpenNew:

; 1332 :     if (level==1)

  0015a	83 f9 01	 cmp	 ecx, 1
  0015d	75 09		 jne	 SHORT $LN29@zipOpenNew

; 1333 :       zi->ci.flag |= 6;

  0015f	83 c8 06	 or	 eax, 6
$LN107@zipOpenNew:

; 1334 :     if (password != NULL)

  00162	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN29@zipOpenNew:
  00168	4c 39 8c 24 00
	01 00 00	 cmp	 QWORD PTR password$[rsp], r9
  00170	74 09		 je	 SHORT $LN30@zipOpenNew

; 1335 :       zi->ci.flag |= 1;

  00172	83 c8 01	 or	 eax, 1
  00175	89 83 f4 00 00
	00		 mov	 DWORD PTR [rbx+244], eax
$LN30@zipOpenNew:

; 1336 : 
; 1337 :     zi->ci.crc32 = 0;
; 1338 :     zi->ci.method = method;
; 1339 :     zi->ci.encrypt = 0;
; 1340 :     zi->ci.stream_initialised = 0;
; 1341 :     zi->ci.pos_in_buffered_data = 0;
; 1342 :     zi->ci.raw = raw;

  0017b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR raw$[rsp]

; 1343 :     zi->ci.pos_local_header = ZTELL64(zi->z_filefunc,zi->filestream);

  00182	48 8b cb	 mov	 rcx, rbx
  00185	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00189	89 83 fc 00 00
	00		 mov	 DWORD PTR [rbx+252], eax
  0018f	4c 89 8b 04 01
	01 00		 mov	 QWORD PTR [rbx+65796], r9
  00196	44 89 b3 f8 00
	00 00		 mov	 DWORD PTR [rbx+248], r14d
  0019d	4c 89 8b d0 00
	00 00		 mov	 QWORD PTR [rbx+208], r9
  001a4	e8 00 00 00 00	 call	 call_ztell64

; 1344 : 
; 1345 :     zi->ci.size_centralheader = SIZECENTRALHEADER + size_filename + size_extrafield_global + size_comment;

  001a9	8d 0c 2e	 lea	 ecx, DWORD PTR [rsi+rbp]
  001ac	48 89 83 d8 00
	00 00		 mov	 QWORD PTR [rbx+216], rax
  001b3	41 03 cc	 add	 ecx, r12d

; 1346 :     zi->ci.size_centralExtraFree = 32; // Extra space we have reserved in case we need to add ZIP64 extra info data

  001b6	c7 83 f0 00 00
	00 20 00 00 00	 mov	 DWORD PTR [rbx+240], 32	; 00000020H
  001c0	8d 41 2e	 lea	 eax, DWORD PTR [rcx+46]

; 1347 : 
; 1348 :     zi->ci.central_header = (char*)ALLOC((uInt)zi->ci.size_centralheader + zi->ci.size_centralExtraFree);

  001c3	83 c1 4e	 add	 ecx, 78			; 0000004eH
  001c6	89 83 ec 00 00
	00		 mov	 DWORD PTR [rbx+236], eax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 1349 : 
; 1350 :     zi->ci.size_centralExtra = size_extrafield_global;
; 1351 :     zip64local_putValue_inmemory(zi->ci.central_header,(uLong)CENTRALHEADERMAGIC,4);

  001d2	ba 50 4b 01 02	 mov	 edx, 33639248		; 02014b50H
  001d7	44 89 a3 e8 00
	00 00		 mov	 DWORD PTR [rbx+232], r12d
  001de	48 8b c8	 mov	 rcx, rax
  001e1	48 89 83 e0 00
	00 00		 mov	 QWORD PTR [rbx+224], rax
  001e8	41 b8 04 00 00
	00		 mov	 r8d, 4
  001ee	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1352 :     /* version info */
; 1353 :     zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)versionMadeBy,2);

  001f3	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  001fa	41 b8 02 00 00
	00		 mov	 r8d, 2
  00200	8b 94 24 10 01
	00 00		 mov	 edx, DWORD PTR versionMadeBy$[rsp]
  00207	48 83 c1 04	 add	 rcx, 4
  0020b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1354 :     zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)20,2);

  00210	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00217	ba 14 00 00 00	 mov	 edx, 20
  0021c	48 83 c1 06	 add	 rcx, 6
  00220	41 b8 02 00 00
	00		 mov	 r8d, 2
  00226	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1355 :     zip64local_putValue_inmemory(zi->ci.central_header+8,(uLong)zi->ci.flag,2);

  0022b	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00232	41 b8 02 00 00
	00		 mov	 r8d, 2
  00238	8b 93 f4 00 00
	00		 mov	 edx, DWORD PTR [rbx+244]
  0023e	48 83 c1 08	 add	 rcx, 8
  00242	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1356 :     zip64local_putValue_inmemory(zi->ci.central_header+10,(uLong)zi->ci.method,2);

  00247	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0024e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00254	8b 93 f8 00 00
	00		 mov	 edx, DWORD PTR [rbx+248]
  0025a	48 83 c1 0a	 add	 rcx, 10
  0025e	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1357 :     zip64local_putValue_inmemory(zi->ci.central_header+12,(uLong)zi->ci.dosDate,4);

  00263	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0026a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00270	8b 93 00 01 01
	00		 mov	 edx, DWORD PTR [rbx+65792]
  00276	48 83 c1 0c	 add	 rcx, 12
  0027a	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1358 :     zip64local_putValue_inmemory(zi->ci.central_header+16,(uLong)0,4); /*crc*/

  0027f	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00286	33 d2		 xor	 edx, edx
  00288	48 83 c1 10	 add	 rcx, 16
  0028c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00292	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1359 :     zip64local_putValue_inmemory(zi->ci.central_header+20,(uLong)0,4); /*compr size*/

  00297	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0029e	33 d2		 xor	 edx, edx
  002a0	48 83 c1 14	 add	 rcx, 20
  002a4	41 b8 04 00 00
	00		 mov	 r8d, 4
  002aa	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1360 :     zip64local_putValue_inmemory(zi->ci.central_header+24,(uLong)0,4); /*uncompr size*/

  002af	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002b6	33 d2		 xor	 edx, edx
  002b8	48 83 c1 18	 add	 rcx, 24
  002bc	41 b8 04 00 00
	00		 mov	 r8d, 4
  002c2	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1361 :     zip64local_putValue_inmemory(zi->ci.central_header+28,(uLong)size_filename,2);

  002c7	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002ce	41 b8 02 00 00
	00		 mov	 r8d, 2
  002d4	48 83 c1 1c	 add	 rcx, 28
  002d8	8b d5		 mov	 edx, ebp
  002da	44 8b f5	 mov	 r14d, ebp
  002dd	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1362 :     zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)size_extrafield_global,2);

  002e2	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  002e9	49 8b d4	 mov	 rdx, r12
  002ec	48 83 c1 1e	 add	 rcx, 30
  002f0	48 89 94 24 90
	00 00 00	 mov	 QWORD PTR tv1280[rsp], rdx
  002f8	41 b8 02 00 00
	00		 mov	 r8d, 2
  002fe	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1363 :     zip64local_putValue_inmemory(zi->ci.central_header+32,(uLong)size_comment,2);

  00303	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0030a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00310	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00314	8b d6		 mov	 edx, esi
  00316	44 8b e6	 mov	 r12d, esi
  00319	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1364 :     zip64local_putValue_inmemory(zi->ci.central_header+34,(uLong)0,2); /*disk nm start*/

  0031e	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00325	48 83 c1 22	 add	 rcx, 34			; 00000022H
  00329	33 d2		 xor	 edx, edx
  0032b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00331	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1365 : 
; 1366 :     if (zipfi==NULL)

  00336	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0033d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00343	48 83 c1 24	 add	 rcx, 36			; 00000024H
  00347	4d 85 ed	 test	 r13, r13
  0034a	75 0c		 jne	 SHORT $LN31@zipOpenNew

; 1367 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)0,2);

  0034c	33 d2		 xor	 edx, edx
  0034e	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1370 : 
; 1371 :     if (zipfi==NULL)
; 1372 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)0,4);

  00353	49 8b d5	 mov	 rdx, r13
  00356	eb 10		 jmp	 SHORT $LN34@zipOpenNew
$LN31@zipOpenNew:

; 1368 :     else
; 1369 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)zipfi->internal_fa,2);

  00358	41 8b 55 1c	 mov	 edx, DWORD PTR [r13+28]
  0035c	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1373 :     else
; 1374 :         zip64local_putValue_inmemory(zi->ci.central_header+38,(uLong)zipfi->external_fa,4);

  00361	41 8b 55 20	 mov	 edx, DWORD PTR [r13+32]
  00365	45 33 ed	 xor	 r13d, r13d
$LN34@zipOpenNew:

; 1375 : 
; 1376 :     if(zi->ci.pos_local_header >= 0xffffffff)

  00368	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0036f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00375	48 83 c1 26	 add	 rcx, 38			; 00000026H
  00379	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0037e	48 8b 83 d8 00
	00 00		 mov	 rax, QWORD PTR [rbx+216]
  00385	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  0038a	48 3b c2	 cmp	 rax, rdx
  0038d	73 09		 jae	 SHORT $LN36@zipOpenNew

; 1377 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)0xffffffff,4);
; 1378 :     else
; 1379 :       zip64local_putValue_inmemory(zi->ci.central_header+42,(uLong)zi->ci.pos_local_header - zi->add_position_when_writing_offset,4);

  0038f	8b d0		 mov	 edx, eax
  00391	48 2b 93 50 01
	01 00		 sub	 rdx, QWORD PTR [rbx+65872]
$LN36@zipOpenNew:

; 1380 : 
; 1381 :     for (i=0;i<size_filename;i++)

  00398	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0039f	41 b8 04 00 00
	00		 mov	 r8d, 4
  003a5	48 83 c1 2a	 add	 rcx, 42			; 0000002aH
  003a9	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  003ae	85 ed		 test	 ebp, ebp
  003b0	48 8b ac 24 98
	00 00 00	 mov	 rbp, QWORD PTR [rsp+152]
  003b8	74 33		 je	 SHORT $LN3@zipOpenNew
  003ba	49 8b d5	 mov	 rdx, r13
  003bd	4d 8b c7	 mov	 r8, r15
  003c0	4d 8b ce	 mov	 r9, r14
  003c3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL4@zipOpenNew:

; 1382 :         *(zi->ci.central_header+SIZECENTRALHEADER+i) = *(filename+i);

  003d0	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  003d4	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  003d8	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  003df	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  003e3	88 44 11 2d	 mov	 BYTE PTR [rcx+rdx+45], al
  003e7	49 83 e9 01	 sub	 r9, 1
  003eb	75 e3		 jne	 SHORT $LL4@zipOpenNew
$LN3@zipOpenNew:

; 1383 : 
; 1384 :     for (i=0;i<size_extrafield_global;i++)

  003ed	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR size_extrafield_global$[rsp], 0
  003f5	4c 8b 94 24 90
	00 00 00	 mov	 r10, QWORD PTR tv1280[rsp]
  003fd	76 31		 jbe	 SHORT $LN6@zipOpenNew
  003ff	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR extrafield_global$[rsp]
  00407	49 8b d5	 mov	 rdx, r13
  0040a	4d 8b ca	 mov	 r9, r10
  0040d	0f 1f 00	 npad	 3
$LL7@zipOpenNew:

; 1385 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+i) =

  00410	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00417	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  0041b	41 0f b6 00	 movzx	 eax, BYTE PTR [r8]
  0041f	4d 8d 40 01	 lea	 r8, QWORD PTR [r8+1]
  00423	49 03 ce	 add	 rcx, r14
  00426	88 44 11 2d	 mov	 BYTE PTR [rcx+rdx+45], al
  0042a	49 83 e9 01	 sub	 r9, 1
  0042e	75 e0		 jne	 SHORT $LL7@zipOpenNew
$LN6@zipOpenNew:

; 1386 :               *(((const char*)extrafield_global)+i);
; 1387 : 
; 1388 :     for (i=0;i<size_comment;i++)

  00430	85 f6		 test	 esi, esi
  00432	74 2e		 je	 SHORT $LN9@zipOpenNew
  00434	49 8b d5	 mov	 rdx, r13
  00437	66 0f 1f 84 00
	00 00 00 00	 npad	 9
$LL10@zipOpenNew:

; 1389 :         *(zi->ci.central_header+SIZECENTRALHEADER+size_filename+

  00440	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00447	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  0044b	0f b6 07	 movzx	 eax, BYTE PTR [rdi]
  0044e	48 8d 7f 01	 lea	 rdi, QWORD PTR [rdi+1]
  00452	49 03 ce	 add	 rcx, r14
  00455	49 03 ca	 add	 rcx, r10
  00458	88 44 11 2d	 mov	 BYTE PTR [rcx+rdx+45], al
  0045c	49 83 ec 01	 sub	 r12, 1
  00460	75 de		 jne	 SHORT $LL10@zipOpenNew
$LN9@zipOpenNew:

; 1390 :               size_extrafield_global+i) = *(comment+i);
; 1391 :     if (zi->ci.central_header == NULL)

  00462	48 83 bb e0 00
	00 00 00	 cmp	 QWORD PTR [rbx+224], 0
  0046a	75 18		 jne	 SHORT $LN37@zipOpenNew

; 1392 :         return ZIP_INTERNALERROR;

  0046c	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN106@zipOpenNew:
  00471	4c 8b 7c 24 50	 mov	 r15, QWORD PTR [rsp+80]
$LN1@zipOpenNew:

; 1475 : }

  00476	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0047a	41 5e		 pop	 r14
  0047c	41 5d		 pop	 r13
  0047e	41 5c		 pop	 r12
  00480	5f		 pop	 rdi
  00481	5e		 pop	 rsi
  00482	5b		 pop	 rbx
  00483	c3		 ret	 0
$LN37@zipOpenNew:

; 1393 : 
; 1394 :     zi->ci.zip64 = zip64;

  00484	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]

; 1395 :     zi->ci.totalCompressedData = 0;
; 1396 :     zi->ci.totalUncompressedData = 0;
; 1397 :     zi->ci.pos_zip64extrainfo = 0;
; 1398 : 
; 1399 :     err = Write_LocalFileHeader(zi, filename, size_extrafield_local, extrafield_local);

  0048b	49 8b d7	 mov	 rdx, r15
  0048e	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR extrafield_local$[rsp]
  00496	48 8b cb	 mov	 rcx, rbx
  00499	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR size_extrafield_local$[rsp]
  004a1	89 83 0c 01 01
	00		 mov	 DWORD PTR [rbx+65804], eax
  004a7	4c 89 ab 18 01
	01 00		 mov	 QWORD PTR [rbx+65816], r13
  004ae	4c 89 ab 20 01
	01 00		 mov	 QWORD PTR [rbx+65824], r13
  004b5	4c 89 ab 10 01
	01 00		 mov	 QWORD PTR [rbx+65808], r13
  004bc	e8 00 00 00 00	 call	 Write_LocalFileHeader

; 1400 : 
; 1401 : #ifdef HAVE_BZIP2
; 1402 :     zi->ci.bstream.avail_in = (uInt)0;
; 1403 :     zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1404 :     zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1405 :     zi->ci.bstream.total_in_hi32 = 0;
; 1406 :     zi->ci.bstream.total_in_lo32 = 0;
; 1407 :     zi->ci.bstream.total_out_hi32 = 0;
; 1408 :     zi->ci.bstream.total_out_lo32 = 0;
; 1409 : #endif
; 1410 : 
; 1411 :     zi->ci.stream.avail_in = (uInt)0;

  004c1	48 c7 83 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rbx+128], 0

; 1412 :     zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1413 :     zi->ci.stream.next_out = zi->ci.buffered_data;

  004cc	48 8d 8b 00 01
	00 00		 lea	 rcx, QWORD PTR [rbx+256]
  004d3	48 89 8b 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rcx
  004da	8b f0		 mov	 esi, eax
  004dc	48 c7 83 90 00
	00 00 00 00 01
	00		 mov	 QWORD PTR [rbx+144], 65536 ; 00010000H

; 1414 :     zi->ci.stream.total_in = 0;
; 1415 :     zi->ci.stream.total_out = 0;
; 1416 :     zi->ci.stream.data_type = Z_BINARY;

  004e7	44 89 ab c0 00
	00 00		 mov	 DWORD PTR [rbx+192], r13d

; 1417 : 
; 1418 : #ifdef HAVE_BZIP2
; 1419 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED || zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1420 : #else
; 1421 :     if ((err==ZIP_OK) && (zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  004ee	85 c0		 test	 eax, eax
  004f0	0f 85 9e 00 00
	00		 jne	 $LN42@zipOpenNew
  004f6	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  004fd	0f 85 91 00 00
	00		 jne	 $LN42@zipOpenNew
  00503	39 83 fc 00 00
	00		 cmp	 DWORD PTR [rbx+252], eax
  00509	0f 85 85 00 00
	00		 jne	 $LN42@zipOpenNew

; 1422 : #endif
; 1423 :     {
; 1424 :         if(zi->ci.method == Z_DEFLATED)
; 1425 :         {
; 1426 :           zi->ci.stream.zalloc = (alloc_func)0;
; 1427 :           zi->ci.stream.zfree = (free_func)0;
; 1428 :           zi->ci.stream.opaque = (voidpf)0;
; 1429 : 
; 1430 :           if (windowBits>0)
; 1431 :               windowBits = -windowBits;
; 1432 : 
; 1433 :           err = deflateInit2(&zi->ci.stream, level, Z_DEFLATED, windowBits, memLevel, strategy);

  0050f	44 8b 8c 24 e8
	00 00 00	 mov	 r9d, DWORD PTR windowBits$[rsp]
  00517	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0P@CNPFHDLN@1?43?41?41?9motley@
  0051e	8b 94 24 d8 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00525	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00529	41 f7 d9	 neg	 r9d
  0052c	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  00534	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00539	41 b8 08 00 00
	00		 mov	 r8d, 8
  0053f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00546	44 0f 48 8c 24
	e8 00 00 00	 cmovs	 r9d, DWORD PTR windowBits$[rsp]
  0054f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00553	41 f7 d9	 neg	 r9d
  00556	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  0055d	4c 89 ab a8 00
	00 00		 mov	 QWORD PTR [rbx+168], r13
  00564	4c 89 ab b0 00
	00 00		 mov	 QWORD PTR [rbx+176], r13
  0056b	4c 89 ab b8 00
	00 00		 mov	 QWORD PTR [rbx+184], r13
  00572	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00576	e8 00 00 00 00	 call	 deflateInit2_
  0057b	8b f0		 mov	 esi, eax

; 1434 : 
; 1435 :           if (err==Z_OK)

  0057d	85 c0		 test	 eax, eax
  0057f	75 13		 jne	 SHORT $LN42@zipOpenNew

; 1436 :               zi->ci.stream_initialised = Z_DEFLATED;

  00581	c7 83 d0 00 00
	00 08 00 00 00	 mov	 DWORD PTR [rbx+208], 8
  0058b	44 89 ab 40 01
	01 00		 mov	 DWORD PTR [rbx+65856], r13d
  00592	eb 0b		 jmp	 SHORT $LN64@zipOpenNew
$LN42@zipOpenNew:

; 1437 :         }
; 1438 :         else if(zi->ci.method == Z_BZIP2ED)
; 1439 :         {
; 1440 : #ifdef HAVE_BZIP2
; 1441 :             // Init BZip stuff here
; 1442 :           zi->ci.bstream.bzalloc = 0;
; 1443 :           zi->ci.bstream.bzfree = 0;
; 1444 :           zi->ci.bstream.opaque = (voidpf)0;
; 1445 : 
; 1446 :           err = BZ2_bzCompressInit(&zi->ci.bstream, level, 0,35);
; 1447 :           if(err == BZ_OK)
; 1448 :             zi->ci.stream_initialised = Z_BZIP2ED;
; 1449 : #endif
; 1450 :         }
; 1451 : 
; 1452 :     }
; 1453 : 
; 1454 : #    ifndef NOCRYPT
; 1455 :     zi->ci.crypt_header_size = 0;

  00594	44 89 ab 40 01
	01 00		 mov	 DWORD PTR [rbx+65856], r13d

; 1456 :     if ((err==Z_OK) && (password != NULL))

  0059b	85 f6		 test	 esi, esi
  0059d	75 7d		 jne	 SHORT $LN46@zipOpenNew
$LN64@zipOpenNew:
  0059f	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR password$[rsp]
  005a7	48 85 ff	 test	 rdi, rdi
  005aa	74 69		 je	 SHORT $LN63@zipOpenNew

; 1457 :     {
; 1458 :         unsigned char bufHead[RAND_HEAD_LEN];
; 1459 :         unsigned int sizeHead;
; 1460 :         zi->ci.encrypt = 1;

  005ac	c7 83 08 01 01
	00 01 00 00 00	 mov	 DWORD PTR [rbx+65800], 1

; 1461 :         zi->ci.pcrc_32_tab = get_crc_table();

  005b6	e8 00 00 00 00	 call	 get_crc_table

; 1462 :         /*init_keys(password,zi->ci.keys,zi->ci.pcrc_32_tab);*/
; 1463 : 
; 1464 :         sizeHead=crypthead(password,bufHead,RAND_HEAD_LEN,zi->ci.keys,zi->ci.pcrc_32_tab,crcForCrypting);

  005bb	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR crcForCrypting$[rsp]
  005c2	4c 8d 8b 28 01
	01 00		 lea	 r9, QWORD PTR [rbx+65832]
  005c9	89 54 24 28	 mov	 DWORD PTR [rsp+40], edx
  005cd	48 8b cf	 mov	 rcx, rdi
  005d0	48 8d 54 24 40	 lea	 rdx, QWORD PTR bufHead$1[rsp]
  005d5	48 89 83 38 01
	01 00		 mov	 QWORD PTR [rbx+65848], rax
  005dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005e1	e8 00 00 00 00	 call	 crypthead

; 1465 :         zi->ci.crypt_header_size = sizeHead;
; 1466 : 
; 1467 :         if (ZWRITE64(zi->z_filefunc,zi->filestream,bufHead,sizeHead) != sizeHead)

  005e6	4c 8b 53 10	 mov	 r10, QWORD PTR [rbx+16]
  005ea	4c 8d 44 24 40	 lea	 r8, QWORD PTR bufHead$1[rsp]
  005ef	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  005f3	44 8b c8	 mov	 r9d, eax
  005f6	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  005fa	8b f8		 mov	 edi, eax
  005fc	89 83 40 01 01
	00		 mov	 DWORD PTR [rbx+65856], eax
  00602	41 ff d2	 call	 r10
  00605	3b c7		 cmp	 eax, edi
  00607	74 0c		 je	 SHORT $LN63@zipOpenNew

; 1468 :                 err = ZIP_ERRNO;

  00609	be ff ff ff ff	 mov	 esi, -1

; 1474 :     return err;

  0060e	8b c6		 mov	 eax, esi
  00610	e9 5c fe ff ff	 jmp	 $LN106@zipOpenNew
$LN63@zipOpenNew:

; 1469 :     }
; 1470 : #    endif
; 1471 : 
; 1472 :     if (err==Z_OK)
; 1473 :         zi->in_opened_file_inzip = 1;

  00615	c7 43 70 01 00
	00 00		 mov	 DWORD PTR [rbx+112], 1
$LN46@zipOpenNew:

; 1474 :     return err;

  0061c	8b c6		 mov	 eax, esi
  0061e	e9 4e fe ff ff	 jmp	 $LN106@zipOpenNew
$LN16@zipOpenNew:

; 1296 :         return ZIP_PARAMERROR;

  00623	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1475 : }

  00628	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0062c	41 5e		 pop	 r14
  0062e	41 5d		 pop	 r13
  00630	41 5c		 pop	 r12
  00632	5f		 pop	 rdi
  00633	5e		 pop	 rsi
  00634	5b		 pop	 rbx
  00635	c3		 ret	 0
zipOpenNewFileInZip4_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zipOpenNewFileInZip3 PROC				; COMDAT

; 1497 :                                         const char* password, uLong crcForCrypting) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1498 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  0002b	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  0002f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  00036	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0003a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00041	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  00045	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  0004c	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00050	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00057	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0005b	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00062	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00066	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0006d	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00071	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00079	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0007d	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00084	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00088	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00090	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00094	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0009b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0009f	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1499 :                                    extrafield_local, size_extrafield_local,
; 1500 :                                    extrafield_global, size_extrafield_global,
; 1501 :                                    comment, method, level, raw,
; 1502 :                                    windowBits, memLevel, strategy,
; 1503 :                                    password, crcForCrypting, VERSIONMADEBY, 0, 0);
; 1504 : }

  000a4	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000ab	c3		 ret	 0
zipOpenNewFileInZip3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip3_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
windowBits$ = 264
memLevel$ = 272
strategy$ = 280
password$ = 288
crcForCrypting$ = 296
zip64$ = 304
zipOpenNewFileInZip3_64 PROC				; COMDAT

; 1511 :                                          const char* password, uLong crcForCrypting, int zip64) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1512 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR crcForCrypting$[rsp]
  00026	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0002a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR password$[rsp]
  00032	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00036	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR strategy$[rsp]
  0003d	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00041	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR memLevel$[rsp]
  00048	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  0004c	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR windowBits$[rsp]
  00053	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00057	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0005e	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00062	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00069	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0006d	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00074	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00078	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00080	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00084	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0008b	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0008f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00097	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  0009b	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  000a2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a6	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1513 :                                    extrafield_local, size_extrafield_local,
; 1514 :                                    extrafield_global, size_extrafield_global,
; 1515 :                                    comment, method, level, raw,
; 1516 :                                    windowBits, memLevel, strategy,
; 1517 :                                    password, crcForCrypting, VERSIONMADEBY, 0, zip64);
; 1518 : }

  000ab	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000b2	c3		 ret	 0
zipOpenNewFileInZip3_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zipOpenNewFileInZip2 PROC				; COMDAT

; 1523 :                                         const char* comment, int method, int level, int raw) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1524 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0001c	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00020	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00024	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  0002b	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00033	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0003b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0003f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00046	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0004a	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0005d	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00061	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00068	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00074	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00078	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1525 :                                    extrafield_local, size_extrafield_local,
; 1526 :                                    extrafield_global, size_extrafield_global,
; 1527 :                                    comment, method, level, raw,
; 1528 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1529 :                                    NULL, 0, VERSIONMADEBY, 0, 0);
; 1530 : }

  00088	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0008f	c3		 ret	 0
zipOpenNewFileInZip2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip2_64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
raw$ = 256
zip64$ = 264
zipOpenNewFileInZip2_64 PROC				; COMDAT

; 1535 :                                            const char* comment, int method, int level, int raw, int zip64) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1536 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00027	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0002b	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR raw$[rsp]
  00032	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0003a	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00042	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00046	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0004d	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00051	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00058	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0005c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00064	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00068	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  0006f	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00073	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0007b	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  0007f	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00086	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008a	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1537 :                                    extrafield_local, size_extrafield_local,
; 1538 :                                    extrafield_global, size_extrafield_global,
; 1539 :                                    comment, method, level, raw,
; 1540 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1541 :                                    NULL, 0, VERSIONMADEBY, 0, zip64);
; 1542 : }

  0008f	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00096	c3		 ret	 0
zipOpenNewFileInZip2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip64
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zip64$ = 256
zipOpenNewFileInZip64 PROC				; COMDAT

; 1547 :                                          const char* comment, int method, int level, int zip64) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1548 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR zip64$[rsp]
  00011	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00015	33 c0		 xor	 eax, eax
  00017	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  0001b	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  0001f	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  00023	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00027	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0002b	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  00033	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  0003b	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  0003f	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  00046	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0004a	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  00051	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00055	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  0005d	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  00061	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00068	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0006c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  00074	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00078	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1549 :                                    extrafield_local, size_extrafield_local,
; 1550 :                                    extrafield_global, size_extrafield_global,
; 1551 :                                    comment, method, level, 0,
; 1552 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1553 :                                    NULL, 0, VERSIONMADEBY, 0, zip64);
; 1554 : }

  00088	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0008f	c3		 ret	 0
zipOpenNewFileInZip64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipOpenNewFileInZip
_TEXT	SEGMENT
file$ = 176
filename$ = 184
zipfi$ = 192
extrafield_local$ = 200
size_extrafield_local$ = 208
extrafield_global$ = 216
size_extrafield_global$ = 224
comment$ = 232
method$ = 240
level$ = 248
zipOpenNewFileInZip PROC				; COMDAT

; 1559 :                                        const char* comment, int method, int level) {

$LN4:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1560 :     return zipOpenNewFileInZip4_64(file, filename, zipfi,

  0000a	33 c0		 xor	 eax, eax
  0000c	41 89 43 e8	 mov	 DWORD PTR [r11-24], eax
  00010	41 89 43 e0	 mov	 DWORD PTR [r11-32], eax
  00014	41 89 43 d8	 mov	 DWORD PTR [r11-40], eax
  00018	89 44 24 78	 mov	 DWORD PTR [rsp+120], eax
  0001c	49 89 43 c8	 mov	 QWORD PTR [r11-56], rax
  00020	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00024	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR [rsp+96], 8
  0002c	c7 44 24 58 f1
	ff ff ff	 mov	 DWORD PTR [rsp+88], -15
  00034	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00038	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0003f	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00043	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR method$[rsp]
  0004a	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0004e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR comment$[rsp]
  00056	49 89 43 90	 mov	 QWORD PTR [r11-112], rax
  0005a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_global$[rsp]
  00061	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00065	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR extrafield_global$[rsp]
  0006d	49 89 43 80	 mov	 QWORD PTR [r11-128], rax
  00071	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR size_extrafield_local$[rsp]
  00078	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007c	e8 00 00 00 00	 call	 zipOpenNewFileInZip4_64

; 1561 :                                    extrafield_local, size_extrafield_local,
; 1562 :                                    extrafield_global, size_extrafield_global,
; 1563 :                                    comment, method, level, 0,
; 1564 :                                    -MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY,
; 1565 :                                    NULL, 0, VERSIONMADEBY, 0, 0);
; 1566 : }

  00081	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00088	c3		 ret	 0
zipOpenNewFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zip64FlushWriteBuffer
_TEXT	SEGMENT
zi$ = 48
zip64FlushWriteBuffer PROC				; COMDAT

; 1568 : local int zip64FlushWriteBuffer(zip64_internal* zi) {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1569 :     int err=ZIP_OK;
; 1570 : 
; 1571 :     if (zi->ci.encrypt != 0)

  0000a	83 b9 08 01 01
	00 00		 cmp	 DWORD PTR [rcx+65800], 0
  00011	48 8b d9	 mov	 rbx, rcx
  00014	74 65		 je	 SHORT $LN3@zip64Flush
  00016	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp

; 1572 :     {
; 1573 : #ifndef NOCRYPT
; 1574 :         uInt i;
; 1575 :         int t;
; 1576 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0001b	33 ed		 xor	 ebp, ebp
  0001d	39 a9 d4 00 00
	00		 cmp	 DWORD PTR [rcx+212], ebp
  00023	76 51		 jbe	 SHORT $LN15@zip64Flush
  00025	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  0002a	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  0002f	90		 npad	 1
$LL4@zip64Flush:

; 1577 :             zi->ci.buffered_data[i] = zencode(zi->ci.keys, zi->ci.pcrc_32_tab, zi->ci.buffered_data[i],t);

  00030	48 8d 8b 28 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65832]
  00037	e8 00 00 00 00	 call	 decrypt_byte
  0003c	48 8b 93 38 01
	01 00		 mov	 rdx, QWORD PTR [rbx+65848]
  00043	48 8d 8b 28 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65832]
  0004a	44 0f b6 84 1d
	00 01 00 00	 movzx	 r8d, BYTE PTR [rbp+rbx+256]
  00053	8b f0		 mov	 esi, eax
  00055	e8 00 00 00 00	 call	 update_keys
  0005a	40 30 b4 1d 00
	01 00 00	 xor	 BYTE PTR [rbp+rbx+256], sil
  00062	ff c5		 inc	 ebp
  00064	3b ab d4 00 00
	00		 cmp	 ebp, DWORD PTR [rbx+212]
  0006a	72 c4		 jb	 SHORT $LL4@zip64Flush

; 1572 :     {
; 1573 : #ifndef NOCRYPT
; 1574 :         uInt i;
; 1575 :         int t;
; 1576 :         for (i=0;i<zi->ci.pos_in_buffered_data;i++)

  0006c	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  00071	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
$LN15@zip64Flush:
  00076	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
$LN3@zip64Flush:

; 1578 : #endif
; 1579 :     }
; 1580 : 
; 1581 :     if (ZWRITE64(zi->z_filefunc,zi->filestream,zi->ci.buffered_data,zi->ci.pos_in_buffered_data) != zi->ci.pos_in_buffered_data)

  0007b	8b bb d4 00 00
	00		 mov	 edi, DWORD PTR [rbx+212]
  00081	4c 8d 83 00 01
	00 00		 lea	 r8, QWORD PTR [rbx+256]
  00088	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0008c	44 8b cf	 mov	 r9d, edi
  0008f	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00093	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00097	ff d0		 call	 rax

; 1582 :       err = ZIP_ERRNO;
; 1583 : 
; 1584 :     zi->ci.totalCompressedData += zi->ci.pos_in_buffered_data;

  00099	8b 8b d4 00 00
	00		 mov	 ecx, DWORD PTR [rbx+212]
  0009f	2b c7		 sub	 eax, edi
  000a1	f7 d8		 neg	 eax

; 1585 : 
; 1586 : #ifdef HAVE_BZIP2
; 1587 :     if(zi->ci.method == Z_BZIP2ED)
; 1588 :     {
; 1589 :       zi->ci.totalUncompressedData += zi->ci.bstream.total_in_lo32;
; 1590 :       zi->ci.bstream.total_in_lo32 = 0;
; 1591 :       zi->ci.bstream.total_in_hi32 = 0;
; 1592 :     }
; 1593 :     else
; 1594 : #endif
; 1595 :     {
; 1596 :       zi->ci.totalUncompressedData += zi->ci.stream.total_in;
; 1597 :       zi->ci.stream.total_in = 0;
; 1598 :     }
; 1599 : 
; 1600 : 
; 1601 :     zi->ci.pos_in_buffered_data = 0;

  000a3	c7 83 d4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+212], 0
  000ad	1b c0		 sbb	 eax, eax
  000af	48 01 8b 18 01
	01 00		 add	 QWORD PTR [rbx+65816], rcx
  000b6	8b 8b 84 00 00
	00		 mov	 ecx, DWORD PTR [rbx+132]
  000bc	48 01 8b 20 01
	01 00		 add	 QWORD PTR [rbx+65824], rcx
  000c3	c7 83 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rbx+132], 0

; 1602 : 
; 1603 :     return err;
; 1604 : }

  000cd	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000d2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d6	5f		 pop	 rdi
  000d7	c3		 ret	 0
zip64FlushWriteBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipWriteInFileInZip
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
zipWriteInFileInZip PROC				; COMDAT

; 1606 : extern int ZEXPORT zipWriteInFileInZip(zipFile file, const void* buf, unsigned int len) {

$LN44:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1607 :     zip64_internal* zi;
; 1608 :     int err=ZIP_OK;

  00015	33 ed		 xor	 ebp, ebp
  00017	41 8b f8	 mov	 edi, r8d
  0001a	4c 8b f2	 mov	 r14, rdx
  0001d	48 8b d9	 mov	 rbx, rcx

; 1609 : 
; 1610 :     if (file == NULL)

  00020	48 85 c9	 test	 rcx, rcx
  00023	0f 84 2b 01 00
	00		 je	 $LN32@zipWriteIn

; 1611 :         return ZIP_PARAMERROR;
; 1612 :     zi = (zip64_internal*)file;
; 1613 : 
; 1614 :     if (zi->in_opened_file_inzip == 0)

  00029	39 69 70	 cmp	 DWORD PTR [rcx+112], ebp
  0002c	0f 84 22 01 00
	00		 je	 $LN32@zipWriteIn

; 1616 : 
; 1617 :     zi->ci.crc32 = crc32(zi->ci.crc32,buf,(uInt)len);

  00032	8b 89 04 01 01
	00		 mov	 ecx, DWORD PTR [rcx+65796]
  00038	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  0003d	e8 00 00 00 00	 call	 crc32

; 1618 : 
; 1619 : #ifdef HAVE_BZIP2
; 1620 :     if(zi->ci.method == Z_BZIP2ED && (!zi->ci.raw))
; 1621 :     {
; 1622 :       zi->ci.bstream.next_in = (void*)buf;
; 1623 :       zi->ci.bstream.avail_in = len;
; 1624 :       err = BZ_RUN_OK;
; 1625 : 
; 1626 :       while ((err==BZ_RUN_OK) && (zi->ci.bstream.avail_in>0))
; 1627 :       {
; 1628 :         if (zi->ci.bstream.avail_out == 0)
; 1629 :         {
; 1630 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1631 :             err = ZIP_ERRNO;
; 1632 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1633 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1634 :         }
; 1635 : 
; 1636 : 
; 1637 :         if(err != BZ_RUN_OK)
; 1638 :           break;
; 1639 : 
; 1640 :         if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1641 :         {
; 1642 :           uLong uTotalOutBefore_lo = zi->ci.bstream.total_out_lo32;
; 1643 : //          uLong uTotalOutBefore_hi = zi->ci.bstream.total_out_hi32;
; 1644 :           err=BZ2_bzCompress(&zi->ci.bstream,  BZ_RUN);
; 1645 : 
; 1646 :           zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore_lo) ;
; 1647 :         }
; 1648 :       }
; 1649 : 
; 1650 :       if(err == BZ_RUN_OK)
; 1651 :         err = ZIP_OK;
; 1652 :     }
; 1653 :     else
; 1654 : #endif
; 1655 :     {
; 1656 :       zi->ci.stream.next_in = buf;

  00042	4c 89 73 78	 mov	 QWORD PTR [rbx+120], r14

; 1657 :       zi->ci.stream.avail_in = len;

  00046	41 be ff ff ff
	ff		 mov	 r14d, -1
  0004c	89 83 04 01 01
	00		 mov	 DWORD PTR [rbx+65796], eax
  00052	89 bb 80 00 00
	00		 mov	 DWORD PTR [rbx+128], edi
  00058	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@zipWriteIn:

; 1658 : 
; 1659 :       while ((err==ZIP_OK) && (zi->ci.stream.avail_in>0))

  00060	83 bb 80 00 00
	00 00		 cmp	 DWORD PTR [rbx+128], 0
  00067	76 73		 jbe	 SHORT $LN34@zipWriteIn

; 1660 :       {
; 1661 :           if (zi->ci.stream.avail_out == 0)

  00069	44 8b 83 90 00
	00 00		 mov	 r8d, DWORD PTR [rbx+144]
  00070	45 85 c0	 test	 r8d, r8d
  00073	75 2d		 jne	 SHORT $LN31@zipWriteIn

; 1662 :           {
; 1663 :               if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00075	48 8b cb	 mov	 rcx, rbx
  00078	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  0007d	41 3b c6	 cmp	 eax, r14d

; 1664 :                   err = ZIP_ERRNO;
; 1665 :               zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;

  00080	c7 83 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rbx+144], 65536 ; 00010000H

; 1666 :               zi->ci.stream.next_out = zi->ci.buffered_data;

  0008a	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  00091	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  00097	41 0f 44 ee	 cmove	 ebp, r14d
  0009b	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
$LN31@zipWriteIn:

; 1667 :           }
; 1668 : 
; 1669 : 
; 1670 :           if(err != ZIP_OK)

  000a2	85 ed		 test	 ebp, ebp
  000a4	75 36		 jne	 SHORT $LN34@zipWriteIn

; 1671 :               break;
; 1672 : 
; 1673 :           if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000a6	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  000ad	75 36		 jne	 SHORT $LN27@zipWriteIn
  000af	39 ab fc 00 00
	00		 cmp	 DWORD PTR [rbx+252], ebp
  000b5	75 2e		 jne	 SHORT $LN27@zipWriteIn

; 1674 :           {
; 1675 :               uLong uTotalOutBefore = zi->ci.stream.total_out;

  000b7	8b bb 94 00 00
	00		 mov	 edi, DWORD PTR [rbx+148]

; 1676 :               err=deflate(&zi->ci.stream,  Z_NO_FLUSH);

  000bd	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  000c1	33 d2		 xor	 edx, edx
  000c3	e8 00 00 00 00	 call	 deflate

; 1677 : 
; 1678 :               zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  000c8	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  000ce	8b e8		 mov	 ebp, eax
  000d0	2b cf		 sub	 ecx, edi
  000d2	01 8b d4 00 00
	00		 add	 DWORD PTR [rbx+212], ecx
  000d8	85 c0		 test	 eax, eax
  000da	74 84		 je	 SHORT $LL2@zipWriteIn
$LN34@zipWriteIn:

; 1699 :               }
; 1700 :           }
; 1701 :       }// while(...)
; 1702 :     }
; 1703 : 
; 1704 :     return err;

  000dc	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]
  000e1	8b c5		 mov	 eax, ebp
  000e3	eb 74		 jmp	 SHORT $LN1@zipWriteIn
$LN27@zipWriteIn:

; 1679 :           }
; 1680 :           else
; 1681 :           {
; 1682 :               uInt copy_this,i;
; 1683 :               if (zi->ci.stream.avail_in < zi->ci.stream.avail_out)

  000e5	8b 83 80 00 00
	00		 mov	 eax, DWORD PTR [rbx+128]
  000eb	41 3b c0	 cmp	 eax, r8d
  000ee	44 0f 42 c0	 cmovb	 r8d, eax

; 1684 :                   copy_this = zi->ci.stream.avail_in;
; 1685 :               else
; 1686 :                   copy_this = zi->ci.stream.avail_out;
; 1687 : 
; 1688 :               for (i = 0; i < copy_this; i++)

  000f2	45 85 c0	 test	 r8d, r8d
  000f5	74 27		 je	 SHORT $LN5@zipWriteIn
  000f7	33 d2		 xor	 edx, edx
  000f9	45 8b c8	 mov	 r9d, r8d
  000fc	0f 1f 40 00	 npad	 4
$LL6@zipWriteIn:

; 1689 :                   *(((char*)zi->ci.stream.next_out)+i) =

  00100	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  00104	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00108	48 8b 8b 88 00
	00 00		 mov	 rcx, QWORD PTR [rbx+136]
  0010f	0f b6 44 02 ff	 movzx	 eax, BYTE PTR [rdx+rax-1]
  00114	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  00118	49 83 e9 01	 sub	 r9, 1
  0011c	75 e2		 jne	 SHORT $LL6@zipWriteIn
$LN5@zipWriteIn:

; 1690 :                       *(((const char*)zi->ci.stream.next_in)+i);
; 1691 :               {
; 1692 :                   zi->ci.stream.avail_in -= copy_this;

  0011e	44 29 83 80 00
	00 00		 sub	 DWORD PTR [rbx+128], r8d

; 1693 :                   zi->ci.stream.avail_out-= copy_this;

  00125	44 29 83 90 00
	00 00		 sub	 DWORD PTR [rbx+144], r8d

; 1694 :                   zi->ci.stream.next_in+= copy_this;
; 1695 :                   zi->ci.stream.next_out+= copy_this;
; 1696 :                   zi->ci.stream.total_in+= copy_this;

  0012c	44 01 83 84 00
	00 00		 add	 DWORD PTR [rbx+132], r8d

; 1697 :                   zi->ci.stream.total_out+= copy_this;

  00133	44 01 83 94 00
	00 00		 add	 DWORD PTR [rbx+148], r8d
  0013a	41 8b c0	 mov	 eax, r8d
  0013d	48 01 43 78	 add	 QWORD PTR [rbx+120], rax
  00141	48 01 83 88 00
	00 00		 add	 QWORD PTR [rbx+136], rax

; 1698 :                   zi->ci.pos_in_buffered_data += copy_this;

  00148	44 01 83 d4 00
	00 00		 add	 DWORD PTR [rbx+212], r8d
  0014f	e9 0c ff ff ff	 jmp	 $LL2@zipWriteIn
$LN32@zipWriteIn:

; 1615 :         return ZIP_PARAMERROR;

  00154	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
$LN1@zipWriteIn:

; 1705 : }

  00159	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0015e	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  00163	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00168	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0016c	41 5e		 pop	 r14
  0016e	c3		 ret	 0
zipWriteInFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw
_TEXT	SEGMENT
file$ = 8
uncompressed_size$ = 16
crc32$ = 24
zipCloseFileInZipRaw PROC				; COMDAT

; 1708 :     return zipCloseFileInZipRaw64 (file, uncompressed_size, crc32);

  00000	8b d2		 mov	 edx, edx
  00002	e9 00 00 00 00	 jmp	 zipCloseFileInZipRaw64
zipCloseFileInZipRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZipRaw64
_TEXT	SEGMENT
tv962 = 32
file$ = 112
$T1 = 112
uncompressed_size$ = 120
crc32$ = 128
$T2 = 136
zipCloseFileInZipRaw64 PROC				; COMDAT

; 1711 : extern int ZEXPORT zipCloseFileInZipRaw64(zipFile file, ZPOS64_T uncompressed_size, uLong crc32) {

$LN96:
  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	41 56		 push	 r14
  00006	41 57		 push	 r15
  00008	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1712 :     zip64_internal* zi;
; 1713 :     ZPOS64_T compressed_size;
; 1714 :     uLong invalidValue = 0xffffffff;
; 1715 :     unsigned datasize = 0;
; 1716 :     int err=ZIP_OK;

  0000c	45 33 ed	 xor	 r13d, r13d
  0000f	45 8b f0	 mov	 r14d, r8d
  00012	4c 8b fa	 mov	 r15, rdx
  00015	48 8b d9	 mov	 rbx, rcx
  00018	41 8b c5	 mov	 eax, r13d

; 1717 : 
; 1718 :     if (file == NULL)

  0001b	48 85 c9	 test	 rcx, rcx
  0001e	0f 84 d9 04 00
	00		 je	 $LN57@zipCloseFi

; 1719 :         return ZIP_PARAMERROR;
; 1720 :     zi = (zip64_internal*)file;
; 1721 : 
; 1722 :     if (zi->in_opened_file_inzip == 0)

  00024	39 41 70	 cmp	 DWORD PTR [rcx+112], eax
  00027	0f 84 d0 04 00
	00		 je	 $LN57@zipCloseFi

; 1724 :     zi->ci.stream.avail_in = 0;
; 1725 : 
; 1726 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  0002d	83 b9 f8 00 00
	00 08		 cmp	 DWORD PTR [rcx+248], 8
  00034	48 89 6c 24 78	 mov	 QWORD PTR [rsp+120], rbp
  00039	48 89 74 24 40	 mov	 QWORD PTR [rsp+64], rsi
  0003e	48 89 7c 24 38	 mov	 QWORD PTR [rsp+56], rdi
  00043	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  00048	44 89 a9 80 00
	00 00		 mov	 DWORD PTR [rcx+128], r13d
  0004f	75 5e		 jne	 SHORT $LN3@zipCloseFi
  00051	39 81 fc 00 00
	00		 cmp	 DWORD PTR [rcx+252], eax
  00057	75 56		 jne	 SHORT $LN3@zipCloseFi
  00059	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@zipCloseFi:

; 1727 :                 {
; 1728 :                         while (err==ZIP_OK)
; 1729 :                         {
; 1730 :                                 uLong uTotalOutBefore;
; 1731 :                                 if (zi->ci.stream.avail_out == 0)

  00060	44 39 ab 90 00
	00 00		 cmp	 DWORD PTR [rbx+144], r13d
  00067	75 20		 jne	 SHORT $LN8@zipCloseFi

; 1732 :                                 {
; 1733 :                                         if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	e8 00 00 00 00	 call	 zip64FlushWriteBuffer

; 1734 :                                                 err = ZIP_ERRNO;
; 1735 :                                         zi->ci.stream.avail_out = (uInt)Z_BUFSIZE;
; 1736 :                                         zi->ci.stream.next_out = zi->ci.buffered_data;

  00071	48 8d 83 00 01
	00 00		 lea	 rax, QWORD PTR [rbx+256]
  00078	c7 83 90 00 00
	00 00 00 01 00	 mov	 DWORD PTR [rbx+144], 65536 ; 00010000H
  00082	48 89 83 88 00
	00 00		 mov	 QWORD PTR [rbx+136], rax
$LN8@zipCloseFi:

; 1737 :                                 }
; 1738 :                                 uTotalOutBefore = zi->ci.stream.total_out;

  00089	8b bb 94 00 00
	00		 mov	 edi, DWORD PTR [rbx+148]

; 1739 :                                 err=deflate(&zi->ci.stream,  Z_FINISH);

  0008f	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  00093	ba 04 00 00 00	 mov	 edx, 4
  00098	e8 00 00 00 00	 call	 deflate

; 1740 :                                 zi->ci.pos_in_buffered_data += (uInt)(zi->ci.stream.total_out - uTotalOutBefore) ;

  0009d	8b 8b 94 00 00
	00		 mov	 ecx, DWORD PTR [rbx+148]
  000a3	2b cf		 sub	 ecx, edi
  000a5	01 8b d4 00 00
	00		 add	 DWORD PTR [rbx+212], ecx
  000ab	85 c0		 test	 eax, eax
  000ad	74 b1		 je	 SHORT $LL2@zipCloseFi
$LN3@zipCloseFi:

; 1741 :                         }
; 1742 :                 }
; 1743 :     else if ((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1744 :     {
; 1745 : #ifdef HAVE_BZIP2
; 1746 :       err = BZ_FINISH_OK;
; 1747 :       while (err==BZ_FINISH_OK)
; 1748 :       {
; 1749 :         uLong uTotalOutBefore;
; 1750 :         if (zi->ci.bstream.avail_out == 0)
; 1751 :         {
; 1752 :           if (zip64FlushWriteBuffer(zi) == ZIP_ERRNO)
; 1753 :             err = ZIP_ERRNO;
; 1754 :           zi->ci.bstream.avail_out = (uInt)Z_BUFSIZE;
; 1755 :           zi->ci.bstream.next_out = (char*)zi->ci.buffered_data;
; 1756 :         }
; 1757 :         uTotalOutBefore = zi->ci.bstream.total_out_lo32;
; 1758 :         err=BZ2_bzCompress(&zi->ci.bstream,  BZ_FINISH);
; 1759 :         if(err == BZ_STREAM_END)
; 1760 :           err = Z_STREAM_END;
; 1761 : 
; 1762 :         zi->ci.pos_in_buffered_data += (uInt)(zi->ci.bstream.total_out_lo32 - uTotalOutBefore);
; 1763 :       }
; 1764 : 
; 1765 :       if(err == BZ_FINISH_OK)
; 1766 :         err = ZIP_OK;
; 1767 : #endif
; 1768 :     }
; 1769 : 
; 1770 :     if (err==Z_STREAM_END)
; 1771 :         err=ZIP_OK; /* this is normal */
; 1772 : 
; 1773 :     if ((zi->ci.pos_in_buffered_data>0) && (err==ZIP_OK))

  000af	83 f8 01	 cmp	 eax, 1
  000b2	41 8b cd	 mov	 ecx, r13d
  000b5	bf ff ff ff ff	 mov	 edi, -1
  000ba	0f 45 c8	 cmovne	 ecx, eax
  000bd	8b f1		 mov	 esi, ecx
  000bf	44 39 ab d4 00
	00 00		 cmp	 DWORD PTR [rbx+212], r13d
  000c6	76 14		 jbe	 SHORT $LN13@zipCloseFi
  000c8	85 c9		 test	 ecx, ecx
  000ca	75 10		 jne	 SHORT $LN13@zipCloseFi

; 1774 :                 {
; 1775 :         if (zip64FlushWriteBuffer(zi)==ZIP_ERRNO)

  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	41 8b f5	 mov	 esi, r13d
  000d2	e8 00 00 00 00	 call	 zip64FlushWriteBuffer
  000d7	3b c7		 cmp	 eax, edi
  000d9	0f 44 f7	 cmove	 esi, edi
$LN13@zipCloseFi:

; 1776 :             err = ZIP_ERRNO;
; 1777 :                 }
; 1778 : 
; 1779 :     if ((zi->ci.method == Z_DEFLATED) && (!zi->ci.raw))

  000dc	83 bb f8 00 00
	00 08		 cmp	 DWORD PTR [rbx+248], 8
  000e3	75 1e		 jne	 SHORT $LN14@zipCloseFi
  000e5	44 39 ab fc 00
	00 00		 cmp	 DWORD PTR [rbx+252], r13d
  000ec	75 2c		 jne	 SHORT $LN16@zipCloseFi

; 1780 :     {
; 1781 :         int tmp_err = deflateEnd(&zi->ci.stream);

  000ee	48 8d 4b 78	 lea	 rcx, QWORD PTR [rbx+120]
  000f2	e8 00 00 00 00	 call	 deflateEnd

; 1782 :         if (err == ZIP_OK)

  000f7	85 f6		 test	 esi, esi

; 1783 :             err = tmp_err;
; 1784 :         zi->ci.stream_initialised = 0;

  000f9	44 89 ab d0 00
	00 00		 mov	 DWORD PTR [rbx+208], r13d
  00100	0f 44 f0	 cmove	 esi, eax
$LN14@zipCloseFi:

; 1785 :     }
; 1786 : #ifdef HAVE_BZIP2
; 1787 :     else if((zi->ci.method == Z_BZIP2ED) && (!zi->ci.raw))
; 1788 :     {
; 1789 :       int tmperr = BZ2_bzCompressEnd(&zi->ci.bstream);
; 1790 :                         if (err==ZIP_OK)
; 1791 :                                 err = tmperr;
; 1792 :                         zi->ci.stream_initialised = 0;
; 1793 :     }
; 1794 : #endif
; 1795 : 
; 1796 :     if (!zi->ci.raw)

  00103	44 39 ab fc 00
	00 00		 cmp	 DWORD PTR [rbx+252], r13d
  0010a	75 0e		 jne	 SHORT $LN16@zipCloseFi

; 1797 :     {
; 1798 :         crc32 = (uLong)zi->ci.crc32;

  0010c	44 8b b3 04 01
	01 00		 mov	 r14d, DWORD PTR [rbx+65796]

; 1799 :         uncompressed_size = zi->ci.totalUncompressedData;

  00113	4c 8b bb 20 01
	01 00		 mov	 r15, QWORD PTR [rbx+65824]
$LN16@zipCloseFi:

; 1800 :     }
; 1801 :     compressed_size = zi->ci.totalCompressedData;
; 1802 : 
; 1803 : #    ifndef NOCRYPT
; 1804 :     compressed_size += zi->ci.crypt_header_size;

  0011a	8b ab 40 01 01
	00		 mov	 ebp, DWORD PTR [rbx+65856]

; 1805 : #    endif
; 1806 : 
; 1807 :     // update Current Item crc and sizes,
; 1808 :     if(compressed_size >= 0xffffffff || uncompressed_size >= 0xffffffff || zi->ci.pos_local_header >= 0xffffffff)

  00120	41 bc ff ff ff
	ff		 mov	 r12d, -1		; ffffffffH
  00126	48 03 ab 18 01
	01 00		 add	 rbp, QWORD PTR [rbx+65816]
  0012d	49 3b ec	 cmp	 rbp, r12
  00130	73 34		 jae	 SHORT $LN18@zipCloseFi
  00132	4d 3b fc	 cmp	 r15, r12
  00135	73 2f		 jae	 SHORT $LN18@zipCloseFi
  00137	4c 39 a3 d8 00
	00 00		 cmp	 QWORD PTR [rbx+216], r12
  0013e	73 26		 jae	 SHORT $LN18@zipCloseFi

; 1812 :       /*version needed*/
; 1813 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00140	48 8d bb e0 00
	00 00		 lea	 rdi, QWORD PTR [rbx+224]
  00147	4c 89 74 24 20	 mov	 QWORD PTR tv962[rsp], r14
  0014c	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0014f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00155	48 83 c1 10	 add	 rcx, 16
  00159	49 8b d6	 mov	 rdx, r14
  0015c	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  00161	4c 8b f7	 mov	 r14, rdi

; 1879 :         p += 8;
; 1880 :       }
; 1881 : 
; 1882 :       // Update how much extra free space we got in the memory buffer
; 1883 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1884 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1885 :       zi->ci.size_centralExtraFree -= datasize + 4;
; 1886 :       zi->ci.size_centralheader += datasize + 4;
; 1887 : 
; 1888 :       // Update the extra info size field
; 1889 :       zi->ci.size_centralExtra += datasize + 4;
; 1890 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  00164	eb 5c		 jmp	 SHORT $LN19@zipCloseFi
$LN18@zipCloseFi:

; 1809 :     {
; 1810 :       /*version Made by*/
; 1811 :       zip64local_putValue_inmemory(zi->ci.central_header+4,(uLong)45,2);

  00166	48 8d bb e0 00
	00 00		 lea	 rdi, QWORD PTR [rbx+224]
  0016d	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  00172	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00175	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017b	48 83 c1 04	 add	 rcx, 4
  0017f	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1812 :       /*version needed*/
; 1813 :       zip64local_putValue_inmemory(zi->ci.central_header+6,(uLong)45,2);

  00184	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00187	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  0018c	48 83 c1 06	 add	 rcx, 6
  00190	41 b8 02 00 00
	00		 mov	 r8d, 2
  00196	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1814 : 
; 1815 :     }
; 1816 : 
; 1817 :     zip64local_putValue_inmemory(zi->ci.central_header+16,crc32,4); /*crc*/

  0019b	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0019e	41 b8 04 00 00
	00		 mov	 r8d, 4
  001a4	41 8b c6	 mov	 eax, r14d
  001a7	48 83 c1 10	 add	 rcx, 16
  001ab	8b d0		 mov	 edx, eax
  001ad	48 89 44 24 20	 mov	 QWORD PTR tv962[rsp], rax
  001b2	4c 8b f7	 mov	 r14, rdi
  001b5	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1818 : 
; 1819 : 
; 1820 :     if(compressed_size >= 0xffffffff)
; 1821 :       zip64local_putValue_inmemory(zi->ci.central_header+20, invalidValue,4); /*compr size*/

  001ba	49 8b d4	 mov	 rdx, r12
  001bd	49 3b ec	 cmp	 rbp, r12
  001c0	73 03		 jae	 SHORT $LN20@zipCloseFi
$LN19@zipCloseFi:

; 1822 :     else
; 1823 :       zip64local_putValue_inmemory(zi->ci.central_header+20, compressed_size,4); /*compr size*/

  001c2	48 8b d5	 mov	 rdx, rbp
$LN20@zipCloseFi:

; 1824 : 
; 1825 :     /// set internal file attributes field
; 1826 :     if (zi->ci.stream.data_type == Z_ASCII)

  001c5	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001c8	41 b8 04 00 00
	00		 mov	 r8d, 4
  001ce	48 83 c1 14	 add	 rcx, 20
  001d2	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  001d7	83 bb c0 00 00
	00 01		 cmp	 DWORD PTR [rbx+192], 1
  001de	75 17		 jne	 SHORT $LN21@zipCloseFi

; 1827 :         zip64local_putValue_inmemory(zi->ci.central_header+36,(uLong)Z_ASCII,2);

  001e0	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  001e3	ba 01 00 00 00	 mov	 edx, 1
  001e8	48 83 c1 24	 add	 rcx, 36			; 00000024H
  001ec	41 b8 02 00 00
	00		 mov	 r8d, 2
  001f2	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
$LN21@zipCloseFi:

; 1828 : 
; 1829 :     if(uncompressed_size >= 0xffffffff)
; 1830 :       zip64local_putValue_inmemory(zi->ci.central_header+24, invalidValue,4); /*uncompr size*/
; 1831 :     else
; 1832 :       zip64local_putValue_inmemory(zi->ci.central_header+24, uncompressed_size,4); /*uncompr size*/
; 1833 : 
; 1834 :     // Add ZIP64 extra info field for uncompressed size
; 1835 :     if(uncompressed_size >= 0xffffffff)

  001f7	49 8b 0e	 mov	 rcx, QWORD PTR [r14]
  001fa	4d 3b fc	 cmp	 r15, r12
  001fd	49 8b d7	 mov	 rdx, r15
  00200	41 b8 04 00 00
	00		 mov	 r8d, 4
  00206	49 0f 43 d4	 cmovae	 rdx, r12
  0020a	48 83 c1 18	 add	 rcx, 24
  0020e	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1836 :       datasize += 8;
; 1837 : 
; 1838 :     // Add ZIP64 extra info field for compressed size
; 1839 :     if(compressed_size >= 0xffffffff)

  00213	4d 3b fc	 cmp	 r15, r12
  00216	b8 08 00 00 00	 mov	 eax, 8
  0021b	41 0f 42 c5	 cmovb	 eax, r13d

; 1840 :       datasize += 8;
; 1841 : 
; 1842 :     // Add ZIP64 extra info field for relative offset to local file header of current file
; 1843 :     if(zi->ci.pos_local_header >= 0xffffffff)

  0021f	49 3b ec	 cmp	 rbp, r12
  00222	8d 48 08	 lea	 ecx, DWORD PTR [rax+8]
  00225	0f 42 c8	 cmovb	 ecx, eax

; 1844 :       datasize += 8;
; 1845 : 
; 1846 :     if(datasize > 0)

  00228	4c 39 a3 d8 00
	00 00		 cmp	 QWORD PTR [rbx+216], r12
  0022f	44 8d 69 08	 lea	 r13d, DWORD PTR [rcx+8]
  00233	44 0f 42 e9	 cmovb	 r13d, ecx
  00237	45 85 ed	 test	 r13d, r13d
  0023a	0f 84 42 01 00
	00		 je	 $LN55@zipCloseFi

; 1847 :     {
; 1848 :       char* p = NULL;
; 1849 : 
; 1850 :       if((uLong)(datasize + 4) > zi->ci.size_centralExtraFree)

  00240	4c 8d b3 f0 00
	00 00		 lea	 r14, QWORD PTR [rbx+240]
  00247	41 8d 45 04	 lea	 eax, DWORD PTR [r13+4]
  0024b	41 3b 06	 cmp	 eax, DWORD PTR [r14]
  0024e	76 25		 jbe	 SHORT $LN28@zipCloseFi

; 1851 :       {
; 1852 :         // we cannot write more data to the buffer that we have room for.
; 1853 :         return ZIP_BADZIPFILE;

  00250	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
$LN93@zipCloseFi:
  00255	48 8b 7c 24 38	 mov	 rdi, QWORD PTR [rsp+56]
  0025a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0025f	48 8b 6c 24 78	 mov	 rbp, QWORD PTR [rsp+120]
  00264	4c 8b 64 24 30	 mov	 r12, QWORD PTR [rsp+48]

; 1944 : }

  00269	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0026d	41 5f		 pop	 r15
  0026f	41 5e		 pop	 r14
  00271	41 5d		 pop	 r13
  00273	5b		 pop	 rbx
  00274	c3		 ret	 0
$LN28@zipCloseFi:

; 1854 :       }
; 1855 : 
; 1856 :       p = zi->ci.central_header + zi->ci.size_centralheader;

  00275	48 8b bb e0 00
	00 00		 mov	 rdi, QWORD PTR [rbx+224]
  0027c	4c 8d a3 ec 00
	00 00		 lea	 r12, QWORD PTR [rbx+236]
  00283	41 8b 0c 24	 mov	 ecx, DWORD PTR [r12]

; 1857 : 
; 1858 :       // Add Extra Information Header for 'ZIP64 information'
; 1859 :       zip64local_putValue_inmemory(p, 0x0001, 2); // HeaderID

  00287	ba 01 00 00 00	 mov	 edx, 1
  0028c	48 03 f9	 add	 rdi, rcx
  0028f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00295	48 8b cf	 mov	 rcx, rdi
  00298	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1860 :       p += 2;
; 1861 :       zip64local_putValue_inmemory(p, datasize, 2); // DataSize

  0029d	41 8b d5	 mov	 edx, r13d
  002a0	48 8d 4f 02	 lea	 rcx, QWORD PTR [rdi+2]
  002a4	41 b8 02 00 00
	00		 mov	 r8d, 2
  002aa	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1862 :       p += 2;
; 1863 : 
; 1864 :       if(uncompressed_size >= 0xffffffff)

  002af	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  002b4	4c 89 74 24 70	 mov	 QWORD PTR $T1[rsp], r14
  002b9	48 83 c7 04	 add	 rdi, 4
  002bd	4c 3b f8	 cmp	 r15, rax
  002c0	72 26		 jb	 SHORT $LN29@zipCloseFi

; 1865 :       {
; 1866 :         zip64local_putValue_inmemory(p, uncompressed_size, 8);

  002c2	41 b8 08 00 00
	00		 mov	 r8d, 8
  002c8	49 8b d7	 mov	 rdx, r15
  002cb	48 8b cf	 mov	 rcx, rdi
  002ce	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1867 :         p += 8;

  002d3	48 8d 83 f0 00
	00 00		 lea	 rax, QWORD PTR [rbx+240]
  002da	48 83 c7 08	 add	 rdi, 8
  002de	48 89 44 24 70	 mov	 QWORD PTR $T1[rsp], rax
  002e3	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
$LN29@zipCloseFi:

; 1868 :       }
; 1869 : 
; 1870 :       if(compressed_size >= 0xffffffff)

  002e8	4c 89 b4 24 88
	00 00 00	 mov	 QWORD PTR $T2[rsp], r14
  002f0	48 3b e8	 cmp	 rbp, rax
  002f3	72 2e		 jb	 SHORT $LN30@zipCloseFi

; 1871 :       {
; 1872 :         zip64local_putValue_inmemory(p, compressed_size, 8);

  002f5	41 b8 08 00 00
	00		 mov	 r8d, 8
  002fb	48 8b d5	 mov	 rdx, rbp
  002fe	48 8b cf	 mov	 rcx, rdi
  00301	e8 00 00 00 00	 call	 zip64local_putValue_inmemory

; 1873 :         p += 8;

  00306	48 8b 44 24 70	 mov	 rax, QWORD PTR $T1[rsp]
  0030b	4c 8d a3 ec 00
	00 00		 lea	 r12, QWORD PTR [rbx+236]
  00312	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  0031a	48 83 c7 08	 add	 rdi, 8
  0031e	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
$LN30@zipCloseFi:

; 1874 :       }
; 1875 : 
; 1876 :       if(zi->ci.pos_local_header >= 0xffffffff)

  00323	48 8b 93 d8 00
	00 00		 mov	 rdx, QWORD PTR [rbx+216]
  0032a	48 3b d0	 cmp	 rdx, rax
  0032d	72 16		 jb	 SHORT $LN31@zipCloseFi

; 1877 :       {
; 1878 :         zip64local_putValue_inmemory(p, zi->ci.pos_local_header, 8);

  0032f	41 b8 08 00 00
	00		 mov	 r8d, 8
  00335	48 8b cf	 mov	 rcx, rdi
  00338	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  0033d	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR $T2[rsp]
$LN31@zipCloseFi:

; 1879 :         p += 8;
; 1880 :       }
; 1881 : 
; 1882 :       // Update how much extra free space we got in the memory buffer
; 1883 :       // and increase the centralheader size so the new ZIP64 fields are included
; 1884 :       // ( 4 below is the size of HeaderID and DataSize field )
; 1885 :       zi->ci.size_centralExtraFree -= datasize + 4;
; 1886 :       zi->ci.size_centralheader += datasize + 4;
; 1887 : 
; 1888 :       // Update the extra info size field
; 1889 :       zi->ci.size_centralExtra += datasize + 4;
; 1890 :       zip64local_putValue_inmemory(zi->ci.central_header+30,(uLong)zi->ci.size_centralExtra,2);

  00345	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  0034c	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00351	41 2b c5	 sub	 eax, r13d
  00354	48 83 c1 1e	 add	 rcx, 30
  00358	41 01 06	 add	 DWORD PTR [r14], eax
  0035b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00361	41 8d 45 04	 lea	 eax, DWORD PTR [r13+4]
  00365	01 83 ec 00 00
	00		 add	 DWORD PTR [rbx+236], eax
  0036b	41 8d 45 04	 lea	 eax, DWORD PTR [r13+4]
  0036f	01 83 e8 00 00
	00		 add	 DWORD PTR [rbx+232], eax
  00375	8b 93 e8 00 00
	00		 mov	 edx, DWORD PTR [rbx+232]
  0037b	e8 00 00 00 00	 call	 zip64local_putValue_inmemory
  00380	eb 07		 jmp	 SHORT $LN27@zipCloseFi
$LN55@zipCloseFi:
  00382	4c 8d a3 ec 00
	00 00		 lea	 r12, QWORD PTR [rbx+236]
$LN27@zipCloseFi:

; 1891 :     }
; 1892 : 
; 1893 :     if (err==ZIP_OK)

  00389	85 f6		 test	 esi, esi
  0038b	75 16		 jne	 SHORT $LN32@zipCloseFi

; 1894 :         err = add_data_in_datablock(&zi->central_dir, zi->ci.central_header, (uLong)zi->ci.size_centralheader);

  0038d	45 8b 04 24	 mov	 r8d, DWORD PTR [r12]
  00391	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  00395	48 8b 93 e0 00
	00 00		 mov	 rdx, QWORD PTR [rbx+224]
  0039c	e8 00 00 00 00	 call	 add_data_in_datablock
  003a1	8b f0		 mov	 esi, eax
$LN32@zipCloseFi:

; 1895 : 
; 1896 :     free(zi->ci.central_header);

  003a3	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  003aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1897 : 
; 1898 :     if (err==ZIP_OK)

  003b0	85 f6		 test	 esi, esi
  003b2	0f 85 30 01 00
	00		 jne	 $LN46@zipCloseFi

; 1899 :     {
; 1900 :         // Update the LocalFileHeader with the new values.
; 1901 : 
; 1902 :         ZPOS64_T cur_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  003b8	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003bc	48 8b cb	 mov	 rcx, rbx
  003bf	e8 00 00 00 00	 call	 call_ztell64

; 1903 : 
; 1904 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_local_header + 14,ZLIB_FILEFUNC_SEEK_SET)!=0)

  003c4	4c 8b 83 d8 00
	00 00		 mov	 r8, QWORD PTR [rbx+216]
  003cb	45 33 c9	 xor	 r9d, r9d
  003ce	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003d2	49 83 c0 0e	 add	 r8, 14
  003d6	48 8b cb	 mov	 rcx, rbx
  003d9	4c 8b e0	 mov	 r12, rax
  003dc	e8 00 00 00 00	 call	 call_zseek64
  003e1	85 c0		 test	 eax, eax
  003e3	74 0b		 je	 SHORT $LN53@zipCloseFi

; 1905 :             err = ZIP_ERRNO;

  003e5	41 bd ff ff ff
	ff		 mov	 r13d, -1
  003eb	41 8b f5	 mov	 esi, r13d

; 1906 : 
; 1907 :         if (err==ZIP_OK)

  003ee	eb 1f		 jmp	 SHORT $LN35@zipCloseFi
$LN53@zipCloseFi:

; 1908 :             err = zip64local_putValue(&zi->z_filefunc,zi->filestream,crc32,4); /* crc 32, unknown */

  003f0	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv962[rsp]
  003f5	41 b9 04 00 00
	00		 mov	 r9d, 4
  003fb	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  003ff	48 8b cb	 mov	 rcx, rbx
  00402	e8 00 00 00 00	 call	 zip64local_putValue
  00407	8b f0		 mov	 esi, eax
  00409	41 bd ff ff ff
	ff		 mov	 r13d, -1
$LN35@zipCloseFi:

; 1909 : 
; 1910 :         if(uncompressed_size >= 0xffffffff || compressed_size >= 0xffffffff )

  0040f	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00414	48 8d 7b 58	 lea	 rdi, QWORD PTR [rbx+88]
  00418	4c 3b f8	 cmp	 r15, rax
  0041b	73 51		 jae	 SHORT $LN38@zipCloseFi
  0041d	48 8d 7b 58	 lea	 rdi, QWORD PTR [rbx+88]
  00421	48 3b e8	 cmp	 rbp, rax
  00424	73 48		 jae	 SHORT $LN38@zipCloseFi

; 1926 :         }
; 1927 :         else
; 1928 :         {
; 1929 :           if (err==ZIP_OK) /* compressed size, unknown */

  00426	85 f6		 test	 esi, esi
  00428	0f 85 a3 00 00
	00		 jne	 $LN40@zipCloseFi

; 1930 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,compressed_size,4);

  0042e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00432	41 b9 04 00 00
	00		 mov	 r9d, 4
  00438	4c 8b c5	 mov	 r8, rbp
  0043b	48 8b cb	 mov	 rcx, rbx
  0043e	e8 00 00 00 00	 call	 zip64local_putValue
  00443	48 8d 7b 58	 lea	 rdi, QWORD PTR [rbx+88]
  00447	8b f0		 mov	 esi, eax

; 1931 : 
; 1932 :           if (err==ZIP_OK) /* uncompressed size, unknown */

  00449	85 c0		 test	 eax, eax
  0044b	0f 85 80 00 00
	00		 jne	 $LN40@zipCloseFi

; 1933 :               err = zip64local_putValue(&zi->z_filefunc,zi->filestream,uncompressed_size,4);

  00451	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00455	41 b9 04 00 00
	00		 mov	 r9d, 4
  0045b	4d 8b c7	 mov	 r8, r15
  0045e	48 8b cb	 mov	 rcx, rbx
  00461	e8 00 00 00 00	 call	 zip64local_putValue
  00466	8b f0		 mov	 esi, eax
  00468	48 8d 7b 58	 lea	 rdi, QWORD PTR [rbx+88]
  0046c	eb 63		 jmp	 SHORT $LN40@zipCloseFi
$LN38@zipCloseFi:

; 1911 :         {
; 1912 :           if(zi->ci.pos_zip64extrainfo > 0)

  0046e	4c 8b 83 10 01
	01 00		 mov	 r8, QWORD PTR [rbx+65808]
  00475	4d 85 c0	 test	 r8, r8
  00478	74 52		 je	 SHORT $LN39@zipCloseFi

; 1913 :           {
; 1914 :             // Update the size in the ZIP64 extended field.
; 1915 :             if (ZSEEK64(zi->z_filefunc,zi->filestream, zi->ci.pos_zip64extrainfo + 4,ZLIB_FILEFUNC_SEEK_SET)!=0)

  0047a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0047e	49 83 c0 04	 add	 r8, 4
  00482	45 33 c9	 xor	 r9d, r9d
  00485	48 8b cb	 mov	 rcx, rbx
  00488	e8 00 00 00 00	 call	 call_zseek64
  0048d	85 c0		 test	 eax, eax
  0048f	74 05		 je	 SHORT $LN41@zipCloseFi

; 1916 :               err = ZIP_ERRNO;

  00491	41 8b f5	 mov	 esi, r13d

; 1917 : 
; 1918 :             if (err==ZIP_OK) /* compressed size, unknown */

  00494	eb 3b		 jmp	 SHORT $LN40@zipCloseFi
$LN41@zipCloseFi:
  00496	85 f6		 test	 esi, esi
  00498	75 37		 jne	 SHORT $LN40@zipCloseFi

; 1919 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, uncompressed_size, 8);

  0049a	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  0049d	41 b9 08 00 00
	00		 mov	 r9d, 8
  004a3	4d 8b c7	 mov	 r8, r15
  004a6	48 8b cb	 mov	 rcx, rbx
  004a9	e8 00 00 00 00	 call	 zip64local_putValue
  004ae	8b f0		 mov	 esi, eax

; 1920 : 
; 1921 :             if (err==ZIP_OK) /* uncompressed size, unknown */

  004b0	85 c0		 test	 eax, eax
  004b2	75 1d		 jne	 SHORT $LN40@zipCloseFi

; 1922 :               err = zip64local_putValue(&zi->z_filefunc, zi->filestream, compressed_size, 8);

  004b4	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  004b7	41 b9 08 00 00
	00		 mov	 r9d, 8
  004bd	4c 8b c5	 mov	 r8, rbp
  004c0	48 8b cb	 mov	 rcx, rbx
  004c3	e8 00 00 00 00	 call	 zip64local_putValue
  004c8	8b f0		 mov	 esi, eax

; 1923 :           }

  004ca	eb 05		 jmp	 SHORT $LN40@zipCloseFi
$LN39@zipCloseFi:

; 1924 :           else
; 1925 :               err = ZIP_BADZIPFILE; // Caller passed zip64 = 0, so no room for zip64 info -> fatal

  004cc	be 99 ff ff ff	 mov	 esi, -103		; ffffffffffffff99H
$LN40@zipCloseFi:

; 1934 :         }
; 1935 : 
; 1936 :         if (ZSEEK64(zi->z_filefunc,zi->filestream, cur_pos_inzip,ZLIB_FILEFUNC_SEEK_SET)!=0)

  004d1	48 8b 17	 mov	 rdx, QWORD PTR [rdi]
  004d4	45 33 c9	 xor	 r9d, r9d
  004d7	4d 8b c4	 mov	 r8, r12
  004da	48 8b cb	 mov	 rcx, rbx
  004dd	e8 00 00 00 00	 call	 call_zseek64
  004e2	85 c0		 test	 eax, eax
  004e4	41 0f 45 f5	 cmovne	 esi, r13d
$LN46@zipCloseFi:

; 1937 :             err = ZIP_ERRNO;
; 1938 :     }
; 1939 : 
; 1940 :     zi->number_entry ++;

  004e8	48 ff 83 58 01
	01 00		 inc	 QWORD PTR [rbx+65880]

; 1941 :     zi->in_opened_file_inzip = 0;
; 1942 : 
; 1943 :     return err;

  004ef	8b c6		 mov	 eax, esi
  004f1	c7 43 70 00 00
	00 00		 mov	 DWORD PTR [rbx+112], 0
  004f8	e9 58 fd ff ff	 jmp	 $LN93@zipCloseFi
$LN57@zipCloseFi:

; 1723 :         return ZIP_PARAMERROR;

  004fd	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1944 : }

  00502	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00506	41 5f		 pop	 r15
  00508	41 5e		 pop	 r14
  0050a	41 5d		 pop	 r13
  0050c	5b		 pop	 rbx
  0050d	c3		 ret	 0
zipCloseFileInZipRaw64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipCloseFileInZip
_TEXT	SEGMENT
file$ = 8
zipCloseFileInZip PROC					; COMDAT

; 1947 :     return zipCloseFileInZipRaw (file,0,0);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx
  00005	e9 00 00 00 00	 jmp	 zipCloseFileInZipRaw
zipCloseFileInZip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryLocator
_TEXT	SEGMENT
zi$ = 48
zip64eocd_pos_inzip$ = 56
Write_Zip64EndOfCentralDirectoryLocator PROC		; COMDAT

; 1950 : local int Write_Zip64EndOfCentralDirectoryLocator(zip64_internal* zi, ZPOS64_T zip64eocd_pos_inzip) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b fa	 mov	 rdi, rdx

; 1951 :   int err = ZIP_OK;
; 1952 :   ZPOS64_T pos = zip64eocd_pos_inzip - zi->add_position_when_writing_offset;
; 1953 : 
; 1954 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDLOCHEADERMAGIC,4);

  0000d	41 b9 04 00 00
	00		 mov	 r9d, 4
  00013	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00017	41 b8 50 4b 06
	07		 mov	 r8d, 117853008		; 07064b50H
  0001d	48 2b b9 50 01
	01 00		 sub	 rdi, QWORD PTR [rcx+65872]
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1955 : 
; 1956 :   /*num disks*/
; 1957 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0002c	85 c0		 test	 eax, eax
  0002e	75 4a		 jne	 SHORT $LN8@Write_Zip6

; 1958 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00030	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00034	41 b9 04 00 00
	00		 mov	 r9d, 4
  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	48 8b cb	 mov	 rcx, rbx
  00040	e8 00 00 00 00	 call	 zip64local_putValue

; 1959 : 
; 1960 :   /*relative offset*/
; 1961 :     if (err==ZIP_OK) /* Relative offset to the Zip64EndOfCentralDirectory */

  00045	85 c0		 test	 eax, eax
  00047	75 31		 jne	 SHORT $LN8@Write_Zip6

; 1962 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, pos,8);

  00049	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0004d	41 b9 08 00 00
	00		 mov	 r9d, 8
  00053	4c 8b c7	 mov	 r8, rdi
  00056	48 8b cb	 mov	 rcx, rbx
  00059	e8 00 00 00 00	 call	 zip64local_putValue

; 1963 : 
; 1964 :   /*total disks*/ /* Do not support spawning of disk so always say 1 here*/
; 1965 :     if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  0005e	85 c0		 test	 eax, eax
  00060	75 18		 jne	 SHORT $LN8@Write_Zip6

; 1966 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)1,4);

  00062	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00066	41 b9 04 00 00
	00		 mov	 r9d, 4
  0006c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00072	48 8b cb	 mov	 rcx, rbx
  00075	e8 00 00 00 00	 call	 zip64local_putValue
$LN8@Write_Zip6:

; 1967 : 
; 1968 :     return err;
; 1969 : }

  0007a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00083	5f		 pop	 rdi
  00084	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryLocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT Write_Zip64EndOfCentralDirectoryRecord
_TEXT	SEGMENT
zi$ = 48
size_centraldir$ = 56
centraldir_pos_inzip$ = 64
Write_Zip64EndOfCentralDirectoryRecord PROC		; COMDAT

; 1971 : local int Write_Zip64EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f8	 mov	 rdi, r8
  00012	8b f2		 mov	 esi, edx

; 1972 :   int err = ZIP_OK;
; 1973 : 
; 1974 :   uLong Zip64DataSize = 44;
; 1975 : 
; 1976 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ZIP64ENDHEADERMAGIC,4);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	41 b8 50 4b 06
	06		 mov	 r8d, 101075792		; 06064b50H
  0001e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 1977 : 
; 1978 :   if (err==ZIP_OK) /* size of this 'zip64 end of central directory' */

  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 05 01 00
	00		 jne	 $LN10@Write_Zip6

; 1979 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)Zip64DataSize,8); // why ZPOS64_T of this ?

  00034	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00038	41 b9 08 00 00
	00		 mov	 r9d, 8
  0003e	41 b8 2c 00 00
	00		 mov	 r8d, 44			; 0000002cH
  00044	48 8b cb	 mov	 rcx, rbx
  00047	e8 00 00 00 00	 call	 zip64local_putValue

; 1980 : 
; 1981 :   if (err==ZIP_OK) /* version made by */

  0004c	85 c0		 test	 eax, eax
  0004e	0f 85 e5 00 00
	00		 jne	 $LN10@Write_Zip6

; 1982 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00054	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00058	41 b9 02 00 00
	00		 mov	 r9d, 2
  0005e	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00064	48 8b cb	 mov	 rcx, rbx
  00067	e8 00 00 00 00	 call	 zip64local_putValue

; 1983 : 
; 1984 :   if (err==ZIP_OK) /* version needed */

  0006c	85 c0		 test	 eax, eax
  0006e	0f 85 c5 00 00
	00		 jne	 $LN10@Write_Zip6

; 1985 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)45,2);

  00074	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00078	41 b9 02 00 00
	00		 mov	 r9d, 2
  0007e	41 b8 2d 00 00
	00		 mov	 r8d, 45			; 0000002dH
  00084	48 8b cb	 mov	 rcx, rbx
  00087	e8 00 00 00 00	 call	 zip64local_putValue

; 1986 : 
; 1987 :   if (err==ZIP_OK) /* number of this disk */

  0008c	85 c0		 test	 eax, eax
  0008e	0f 85 a5 00 00
	00		 jne	 $LN10@Write_Zip6

; 1988 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  00094	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00098	41 b9 04 00 00
	00		 mov	 r9d, 4
  0009e	45 33 c0	 xor	 r8d, r8d
  000a1	48 8b cb	 mov	 rcx, rbx
  000a4	e8 00 00 00 00	 call	 zip64local_putValue

; 1989 : 
; 1990 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  000a9	85 c0		 test	 eax, eax
  000ab	0f 85 88 00 00
	00		 jne	 $LN10@Write_Zip6

; 1991 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,4);

  000b1	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000b5	41 b9 04 00 00
	00		 mov	 r9d, 4
  000bb	45 33 c0	 xor	 r8d, r8d
  000be	48 8b cb	 mov	 rcx, rbx
  000c1	e8 00 00 00 00	 call	 zip64local_putValue

; 1992 : 
; 1993 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  000c6	85 c0		 test	 eax, eax
  000c8	75 6f		 jne	 SHORT $LN10@Write_Zip6

; 1994 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000ca	4c 8b 83 58 01
	01 00		 mov	 r8, QWORD PTR [rbx+65880]
  000d1	41 b9 08 00 00
	00		 mov	 r9d, 8
  000d7	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000db	48 8b cb	 mov	 rcx, rbx
  000de	e8 00 00 00 00	 call	 zip64local_putValue

; 1995 : 
; 1996 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  000e3	85 c0		 test	 eax, eax
  000e5	75 52		 jne	 SHORT $LN10@Write_Zip6

; 1997 :     err = zip64local_putValue(&zi->z_filefunc, zi->filestream, zi->number_entry, 8);

  000e7	4c 8b 83 58 01
	01 00		 mov	 r8, QWORD PTR [rbx+65880]
  000ee	41 b9 08 00 00
	00		 mov	 r9d, 8
  000f4	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000f8	48 8b cb	 mov	 rcx, rbx
  000fb	e8 00 00 00 00	 call	 zip64local_putValue

; 1998 : 
; 1999 :   if (err==ZIP_OK) /* size of the central directory */

  00100	85 c0		 test	 eax, eax
  00102	75 35		 jne	 SHORT $LN10@Write_Zip6

; 2000 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(ZPOS64_T)size_centraldir,8);

  00104	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00108	44 8b c6	 mov	 r8d, esi
  0010b	41 b9 08 00 00
	00		 mov	 r9d, 8
  00111	48 8b cb	 mov	 rcx, rbx
  00114	e8 00 00 00 00	 call	 zip64local_putValue

; 2001 : 
; 2002 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  00119	85 c0		 test	 eax, eax
  0011b	75 1c		 jne	 SHORT $LN10@Write_Zip6

; 2003 :   {
; 2004 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  0011d	48 2b bb 50 01
	01 00		 sub	 rdi, QWORD PTR [rbx+65872]

; 2005 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (ZPOS64_T)pos,8);

  00124	41 b9 08 00 00
	00		 mov	 r9d, 8
  0012a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0012e	4c 8b c7	 mov	 r8, rdi
  00131	48 8b cb	 mov	 rcx, rbx
  00134	e8 00 00 00 00	 call	 zip64local_putValue
$LN10@Write_Zip6:

; 2006 :   }
; 2007 :   return err;
; 2008 : }

  00139	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0013e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00143	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00147	5f		 pop	 rdi
  00148	c3		 ret	 0
Write_Zip64EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT Write_EndOfCentralDirectoryRecord
_TEXT	SEGMENT
zi$ = 48
size_centraldir$ = 56
centraldir_pos_inzip$ = 64
Write_EndOfCentralDirectoryRecord PROC			; COMDAT

; 2010 : local int Write_EndOfCentralDirectoryRecord(zip64_internal* zi, uLong size_centraldir, ZPOS64_T centraldir_pos_inzip) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	56		 push	 rsi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	49 8b f0	 mov	 rsi, r8
  00012	8b ea		 mov	 ebp, edx

; 2011 :   int err = ZIP_OK;
; 2012 : 
; 2013 :   /*signature*/
; 2014 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)ENDHEADERMAGIC,4);

  00014	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  00018	41 b8 50 4b 05
	06		 mov	 r8d, 101010256		; 06054b50H
  0001e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00024	48 8b d9	 mov	 rbx, rcx
  00027	e8 00 00 00 00	 call	 zip64local_putValue

; 2015 : 
; 2016 :   if (err==ZIP_OK) /* number of this disk */

  0002c	85 c0		 test	 eax, eax
  0002e	0f 85 e0 00 00
	00		 jne	 $LN13@Write_EndO

; 2017 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00034	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00038	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003e	45 33 c0	 xor	 r8d, r8d
  00041	48 8b cb	 mov	 rcx, rbx
  00044	e8 00 00 00 00	 call	 zip64local_putValue

; 2018 : 
; 2019 :   if (err==ZIP_OK) /* number of the disk with the start of the central directory */

  00049	85 c0		 test	 eax, eax
  0004b	0f 85 c3 00 00
	00		 jne	 $LN13@Write_EndO

; 2020 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0,2);

  00051	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00055	41 b9 02 00 00
	00		 mov	 r9d, 2
  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8b cb	 mov	 rcx, rbx
  00061	e8 00 00 00 00	 call	 zip64local_putValue

; 2021 : 
; 2022 :   if (err==ZIP_OK) /* total number of entries in the central dir on this disk */

  00066	85 c0		 test	 eax, eax
  00068	0f 85 a6 00 00
	00		 jne	 $LN13@Write_EndO

; 2023 :   {
; 2024 :     {
; 2025 :       if(zi->number_entry >= 0xFFFF)

  0006e	48 8b 83 58 01
	01 00		 mov	 rax, QWORD PTR [rbx+65880]
  00075	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  0007a	bf ff ff 00 00	 mov	 edi, 65535		; 0000ffffH

; 2026 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record

  0007f	44 8b c7	 mov	 r8d, edi
  00082	48 3b c7	 cmp	 rax, rdi
  00085	73 03		 jae	 SHORT $LN6@Write_EndO

; 2027 :       else
; 2028 :         err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  00087	44 8b c0	 mov	 r8d, eax
$LN6@Write_EndO:

; 2029 :     }
; 2030 :   }
; 2031 : 
; 2032 :   if (err==ZIP_OK) /* total number of entries in the central dir */

  0008a	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  0008e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00094	48 8b cb	 mov	 rcx, rbx
  00097	e8 00 00 00 00	 call	 zip64local_putValue
  0009c	85 c0		 test	 eax, eax
  0009e	75 6f		 jne	 SHORT $LN30@Write_EndO

; 2033 :   {
; 2034 :     if(zi->number_entry >= 0xFFFF)

  000a0	48 8b 83 58 01
	01 00		 mov	 rax, QWORD PTR [rbx+65880]
  000a7	48 3b c7	 cmp	 rax, rdi
  000aa	73 02		 jae	 SHORT $LN9@Write_EndO

; 2035 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)0xffff,2); // use value in ZIP64 record
; 2036 :     else
; 2037 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)zi->number_entry,2);

  000ac	8b f8		 mov	 edi, eax
$LN9@Write_EndO:

; 2038 :   }
; 2039 : 
; 2040 :   if (err==ZIP_OK) /* size of the central directory */

  000ae	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000b2	41 b9 02 00 00
	00		 mov	 r9d, 2
  000b8	4c 8b c7	 mov	 r8, rdi
  000bb	48 8b cb	 mov	 rcx, rbx
  000be	e8 00 00 00 00	 call	 zip64local_putValue
  000c3	85 c0		 test	 eax, eax
  000c5	75 48		 jne	 SHORT $LN30@Write_EndO

; 2041 :     err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_centraldir,4);

  000c7	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000cb	4c 8b c5	 mov	 r8, rbp
  000ce	41 b9 04 00 00
	00		 mov	 r9d, 4
  000d4	48 8b cb	 mov	 rcx, rbx
  000d7	e8 00 00 00 00	 call	 zip64local_putValue

; 2042 : 
; 2043 :   if (err==ZIP_OK) /* offset of start of central directory with respect to the starting disk number */

  000dc	85 c0		 test	 eax, eax
  000de	75 2f		 jne	 SHORT $LN30@Write_EndO

; 2044 :   {
; 2045 :     ZPOS64_T pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000e0	48 8b 8b 50 01
	01 00		 mov	 rcx, QWORD PTR [rbx+65872]
  000e7	48 8b c6	 mov	 rax, rsi
  000ea	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000ee	48 2b c1	 sub	 rax, rcx

; 2046 :     if(pos >= 0xffffffff)

  000f1	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  000f7	41 b9 04 00 00
	00		 mov	 r9d, 4
  000fd	49 3b c0	 cmp	 rax, r8
  00100	73 05		 jae	 SHORT $LN31@Write_EndO

; 2047 :     {
; 2048 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)0xffffffff,4);
; 2049 :     }
; 2050 :     else
; 2051 :       err = zip64local_putValue(&zi->z_filefunc,zi->filestream, (uLong)(centraldir_pos_inzip - zi->add_position_when_writing_offset),4);

  00102	2b f1		 sub	 esi, ecx
  00104	44 8b c6	 mov	 r8d, esi
$LN31@Write_EndO:
  00107	48 8b cb	 mov	 rcx, rbx
  0010a	e8 00 00 00 00	 call	 zip64local_putValue
$LN30@Write_EndO:
  0010f	48 8b 7c 24 30	 mov	 rdi, QWORD PTR [rsp+48]
$LN13@Write_EndO:

; 2052 :   }
; 2053 : 
; 2054 :    return err;
; 2055 : }

  00114	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00119	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0011e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00122	5e		 pop	 rsi
  00123	c3		 ret	 0
Write_EndOfCentralDirectoryRecord ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT Write_GlobalComment
_TEXT	SEGMENT
zi$ = 48
global_comment$ = 56
Write_GlobalComment PROC				; COMDAT

; 2057 : local int Write_GlobalComment(zip64_internal* zi, const char* global_comment) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2058 :   int err = ZIP_OK;
; 2059 :   uInt size_global_comment = 0;

  0001a	33 db		 xor	 ebx, ebx
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8b e9	 mov	 rbp, rcx

; 2060 : 
; 2061 :   if(global_comment != NULL)

  00022	49 c7 c6 ff ff
	ff ff		 mov	 r14, -1
  00029	48 85 d2	 test	 rdx, rdx
  0002c	74 0c		 je	 SHORT $LN2@Write_Glob

; 2062 :     size_global_comment = (uInt)strlen(global_comment);

  0002e	49 8b de	 mov	 rbx, r14
$LL6@Write_Glob:
  00031	48 ff c3	 inc	 rbx
  00034	80 3c 1a 00	 cmp	 BYTE PTR [rdx+rbx], 0
  00038	75 f7		 jne	 SHORT $LL6@Write_Glob
$LN2@Write_Glob:

; 2063 : 
; 2064 :   err = zip64local_putValue(&zi->z_filefunc,zi->filestream,(uLong)size_global_comment,2);

  0003a	48 8b 51 58	 mov	 rdx, QWORD PTR [rcx+88]
  0003e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00044	44 8b c3	 mov	 r8d, ebx
  00047	e8 00 00 00 00	 call	 zip64local_putValue
  0004c	8b f0		 mov	 esi, eax

; 2065 : 
; 2066 :   if (err == ZIP_OK && size_global_comment > 0)

  0004e	85 c0		 test	 eax, eax
  00050	75 20		 jne	 SHORT $LN4@Write_Glob
  00052	85 db		 test	 ebx, ebx
  00054	74 1c		 je	 SHORT $LN4@Write_Glob

; 2067 :   {
; 2068 :     if (ZWRITE64(zi->z_filefunc,zi->filestream, global_comment, size_global_comment) != size_global_comment)

  00056	48 8b 45 10	 mov	 rax, QWORD PTR [rbp+16]
  0005a	44 8b cb	 mov	 r9d, ebx
  0005d	48 8b 55 58	 mov	 rdx, QWORD PTR [rbp+88]
  00061	4c 8b c7	 mov	 r8, rdi
  00064	48 8b 4d 38	 mov	 rcx, QWORD PTR [rbp+56]
  00068	ff d0		 call	 rax
  0006a	3b c3		 cmp	 eax, ebx
  0006c	41 0f 45 f6	 cmovne	 esi, r14d

; 2069 :       err = ZIP_ERRNO;
; 2070 :   }
; 2071 :   return err;

  00070	8b c6		 mov	 eax, esi
$LN4@Write_Glob:

; 2072 : }

  00072	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00077	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0007c	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00081	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00086	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008a	41 5e		 pop	 r14
  0008c	c3		 ret	 0
Write_GlobalComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\zip.c
;	COMDAT zipClose
_TEXT	SEGMENT
file$ = 80
global_comment$ = 88
zipClose PROC						; COMDAT

; 2074 : extern int ZEXPORT zipClose(zipFile file, const char* global_comment) {

$LN37:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	41 56		 push	 r14
  00005	41 57		 push	 r15
  00007	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2075 :     zip64_internal* zi;
; 2076 :     int err = 0;

  0000b	33 f6		 xor	 esi, esi
  0000d	4c 8b fa	 mov	 r15, rdx
  00010	48 8b d9	 mov	 rbx, rcx

; 2077 :     uLong size_centraldir = 0;

  00013	44 8b f6	 mov	 r14d, esi

; 2078 :     ZPOS64_T centraldir_pos_inzip;
; 2079 :     ZPOS64_T pos;
; 2080 : 
; 2081 :     if (file == NULL)

  00016	48 85 c9	 test	 rcx, rcx
  00019	75 10		 jne	 SHORT $LN4@zipClose

; 2082 :         return ZIP_PARAMERROR;

  0001b	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 2142 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	41 5f		 pop	 r15
  00026	41 5e		 pop	 r14
  00028	5e		 pop	 rsi
  00029	5b		 pop	 rbx
  0002a	c3		 ret	 0
$LN4@zipClose:

; 2083 : 
; 2084 :     zi = (zip64_internal*)file;
; 2085 : 
; 2086 :     if (zi->in_opened_file_inzip == 1)

  0002b	83 79 70 01	 cmp	 DWORD PTR [rcx+112], 1
  0002f	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  00034	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  00039	75 07		 jne	 SHORT $LN5@zipClose

; 2087 :     {
; 2088 :         err = zipCloseFileInZip (file);

  0003b	e8 00 00 00 00	 call	 zipCloseFileInZip
  00040	8b f0		 mov	 esi, eax
$LN5@zipClose:

; 2089 :     }
; 2090 : 
; 2091 : #ifndef NO_ADDFILEINEXISTINGZIP
; 2092 :     if (global_comment==NULL)

  00042	4d 85 ff	 test	 r15, r15
  00045	75 07		 jne	 SHORT $LN24@zipClose

; 2093 :         global_comment = zi->globalcomment;

  00047	4c 8b bb 60 01
	01 00		 mov	 r15, QWORD PTR [rbx+65888]
$LN24@zipClose:

; 2094 : #endif
; 2095 : 
; 2096 :     centraldir_pos_inzip = ZTELL64(zi->z_filefunc,zi->filestream);

  0004e	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00052	48 8b cb	 mov	 rcx, rbx
  00055	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  0005a	e8 00 00 00 00	 call	 call_ztell64
  0005f	4c 8b e0	 mov	 r12, rax

; 2097 : 
; 2098 :     if (err==ZIP_OK)

  00062	41 bd ff ff ff
	ff		 mov	 r13d, -1
  00068	85 f6		 test	 esi, esi
  0006a	75 4b		 jne	 SHORT $LN3@zipClose

; 2099 :     {
; 2100 :         linkedlist_datablock_internal* ldi = zi->central_dir.first_block;

  0006c	48 8b 7b 60	 mov	 rdi, QWORD PTR [rbx+96]

; 2101 :         while (ldi!=NULL)

  00070	48 85 ff	 test	 rdi, rdi
  00073	74 42		 je	 SHORT $LN3@zipClose
  00075	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL2@zipClose:

; 2102 :         {
; 2103 :             if ((err==ZIP_OK) && (ldi->filled_in_this_block>0))

  00080	85 f6		 test	 esi, esi
  00082	75 22		 jne	 SHORT $LN9@zipClose
  00084	8b 6f 0c	 mov	 ebp, DWORD PTR [rdi+12]
  00087	85 ed		 test	 ebp, ebp
  00089	74 1b		 je	 SHORT $LN9@zipClose

; 2104 :             {
; 2105 :                 if (ZWRITE64(zi->z_filefunc,zi->filestream, ldi->data, ldi->filled_in_this_block) != ldi->filled_in_this_block)

  0008b	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0008f	4c 8d 47 14	 lea	 r8, QWORD PTR [rdi+20]
  00093	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00097	44 8b cd	 mov	 r9d, ebp
  0009a	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0009e	ff d0		 call	 rax
  000a0	3b c5		 cmp	 eax, ebp
  000a2	41 0f 45 f5	 cmovne	 esi, r13d
$LN9@zipClose:

; 2106 :                     err = ZIP_ERRNO;
; 2107 :             }
; 2108 : 
; 2109 :             size_centraldir += ldi->filled_in_this_block;

  000a6	44 03 77 0c	 add	 r14d, DWORD PTR [rdi+12]

; 2110 :             ldi = ldi->next_datablock;

  000aa	48 8b 3f	 mov	 rdi, QWORD PTR [rdi]
  000ad	48 85 ff	 test	 rdi, rdi
  000b0	75 ce		 jne	 SHORT $LL2@zipClose

; 2101 :         while (ldi!=NULL)

  000b2	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
$LN3@zipClose:

; 2111 :         }
; 2112 :     }
; 2113 :     free_linkedlist(&(zi->central_dir));

  000b7	48 8d 4b 60	 lea	 rcx, QWORD PTR [rbx+96]
  000bb	e8 00 00 00 00	 call	 free_linkedlist

; 2114 : 
; 2115 :     set_end(&zi->set);          // set was zeroed, so this is safe

  000c0	48 8d 8b 70 01
	01 00		 lea	 rcx, QWORD PTR [rbx+65904]
  000c7	e8 00 00 00 00	 call	 set_end

; 2116 : 
; 2117 :     pos = centraldir_pos_inzip - zi->add_position_when_writing_offset;

  000cc	49 8b c4	 mov	 rax, r12

; 2118 :     if(pos >= 0xffffffff || zi->number_entry >= 0xFFFF)

  000cf	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  000d4	48 2b 83 50 01
	01 00		 sub	 rax, QWORD PTR [rbx+65872]
  000db	48 3b c1	 cmp	 rax, rcx
  000de	73 0d		 jae	 SHORT $LN11@zipClose
  000e0	48 81 bb 58 01
	01 00 ff ff 00
	00		 cmp	 QWORD PTR [rbx+65880], 65535 ; 0000ffffH
  000eb	72 28		 jb	 SHORT $LN10@zipClose
$LN11@zipClose:

; 2119 :     {
; 2120 :       ZPOS64_T Zip64EOCDpos = ZTELL64(zi->z_filefunc,zi->filestream);

  000ed	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  000f1	48 8b cb	 mov	 rcx, rbx
  000f4	e8 00 00 00 00	 call	 call_ztell64

; 2121 :       Write_Zip64EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  000f9	4d 8b c4	 mov	 r8, r12
  000fc	41 8b d6	 mov	 edx, r14d
  000ff	48 8b cb	 mov	 rcx, rbx
  00102	48 8b f8	 mov	 rdi, rax
  00105	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryRecord

; 2122 : 
; 2123 :       Write_Zip64EndOfCentralDirectoryLocator(zi, Zip64EOCDpos);

  0010a	48 8b d7	 mov	 rdx, rdi
  0010d	48 8b cb	 mov	 rcx, rbx
  00110	e8 00 00 00 00	 call	 Write_Zip64EndOfCentralDirectoryLocator
$LN10@zipClose:

; 2124 :     }
; 2125 : 
; 2126 :     if (err==ZIP_OK)

  00115	48 8b 7c 24 58	 mov	 rdi, QWORD PTR [rsp+88]
  0011a	85 f6		 test	 esi, esi
  0011c	75 21		 jne	 SHORT $LN13@zipClose

; 2127 :       err = Write_EndOfCentralDirectoryRecord(zi, size_centraldir, centraldir_pos_inzip);

  0011e	4d 8b c4	 mov	 r8, r12
  00121	41 8b d6	 mov	 edx, r14d
  00124	48 8b cb	 mov	 rcx, rbx
  00127	e8 00 00 00 00	 call	 Write_EndOfCentralDirectoryRecord
  0012c	8b f0		 mov	 esi, eax

; 2128 : 
; 2129 :     if(err == ZIP_OK)

  0012e	85 c0		 test	 eax, eax
  00130	75 0d		 jne	 SHORT $LN13@zipClose

; 2130 :       err = Write_GlobalComment(zi, global_comment);

  00132	49 8b d7	 mov	 rdx, r15
  00135	48 8b cb	 mov	 rcx, rbx
  00138	e8 00 00 00 00	 call	 Write_GlobalComment
  0013d	8b f0		 mov	 esi, eax
$LN13@zipClose:

; 2131 : 
; 2132 :     if (ZCLOSE64(zi->z_filefunc,zi->filestream) != 0)

  0013f	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00143	48 8b 53 58	 mov	 rdx, QWORD PTR [rbx+88]
  00147	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0014b	ff d0		 call	 rax
  0014d	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  00152	85 c0		 test	 eax, eax
  00154	74 06		 je	 SHORT $LN15@zipClose

; 2133 :         if (err == ZIP_OK)

  00156	85 f6		 test	 esi, esi
  00158	41 0f 44 f5	 cmove	 esi, r13d
$LN15@zipClose:

; 2134 :             err = ZIP_ERRNO;
; 2135 : 
; 2136 : #ifndef NO_ADDFILEINEXISTINGZIP
; 2137 :     free(zi->globalcomment);

  0015c	48 8b 8b 60 01
	01 00		 mov	 rcx, QWORD PTR [rbx+65888]
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2138 : #endif
; 2139 :     free(zi);

  00169	48 8b cb	 mov	 rcx, rbx
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2140 : 
; 2141 :     return err;

  00172	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]
  00177	8b c6		 mov	 eax, esi

; 2142 : }

  00179	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0017d	41 5f		 pop	 r15
  0017f	41 5e		 pop	 r14
  00181	5e		 pop	 rsi
  00182	5b		 pop	 rbx
  00183	c3		 ret	 0
zipClose ENDP
_TEXT	ENDS
END
