; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35209.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	unz_copyright
	ORG $+13
unz_copyright DB ' unzip 1.01 Copyright 1998-2004 Gilles Vollant - http:/'
	DB	'/www.winimage.com/zLibDll', 00H
PUBLIC	unzGetGlobalComment
PUBLIC	unzCloseCurrentFile
PUBLIC	unzGetLocalExtrafield
PUBLIC	unzeof
PUBLIC	unztell64
PUBLIC	unztell
PUBLIC	unzReadCurrentFile
PUBLIC	unzGetCurrentFileZStreamPos64
PUBLIC	unzOpenCurrentFile2
PUBLIC	unzOpenCurrentFilePassword
PUBLIC	unzOpenCurrentFile
PUBLIC	unzOpenCurrentFile3
PUBLIC	unzGoToFilePos
PUBLIC	unzGoToFilePos64
PUBLIC	unzGetFilePos
PUBLIC	unzGetFilePos64
PUBLIC	unzLocateFile
PUBLIC	unzGoToNextFile
PUBLIC	unzGoToFirstFile
PUBLIC	unzGetCurrentFileInfo
PUBLIC	unzGetCurrentFileInfo64
PUBLIC	unzGetGlobalInfo
PUBLIC	unzGetGlobalInfo64
PUBLIC	unzClose
PUBLIC	unzOpen64
PUBLIC	unzOpen
PUBLIC	unzOpen2_64
PUBLIC	unzOpen2
PUBLIC	unzStringFileNameCompare
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetGlobalComment DD imagerel $LN18
	DD	imagerel $LN18+167
	DD	imagerel $unwind$unzGetGlobalComment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzCloseCurrentFile DD imagerel $LN16
	DD	imagerel $LN16+171
	DD	imagerel $unwind$unzCloseCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetLocalExtrafield DD imagerel $LN21
	DD	imagerel $LN21+239
	DD	imagerel $unwind$unzGetLocalExtrafield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzReadCurrentFile DD imagerel $LN97
	DD	imagerel $LN97+61
	DD	imagerel $unwind$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzReadCurrentFile DD imagerel $LN97+61
	DD	imagerel $LN97+623
	DD	imagerel $chain$4$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unzReadCurrentFile DD imagerel $LN97+623
	DD	imagerel $LN97+785
	DD	imagerel $chain$6$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$unzReadCurrentFile DD imagerel $LN97+785
	DD	imagerel $LN97+800
	DD	imagerel $chain$7$unzReadCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile2 DD imagerel $LN4
	DD	imagerel $LN4+23
	DD	imagerel $unwind$unzOpenCurrentFile2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFilePassword DD imagerel $LN4
	DD	imagerel $LN4+27
	DD	imagerel $unwind$unzOpenCurrentFilePassword
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile DD imagerel $LN4
	DD	imagerel $LN4+31
	DD	imagerel $unwind$unzOpenCurrentFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenCurrentFile3 DD imagerel $LN63
	DD	imagerel $LN63+111
	DD	imagerel $unwind$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unzOpenCurrentFile3 DD imagerel $LN63+111
	DD	imagerel $LN63+229
	DD	imagerel $chain$1$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unzOpenCurrentFile3 DD imagerel $LN63+229
	DD	imagerel $LN63+847
	DD	imagerel $chain$3$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzOpenCurrentFile3 DD imagerel $LN63+847
	DD	imagerel $LN63+867
	DD	imagerel $chain$4$unzOpenCurrentFile3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_CheckCurrentFileCoherencyHeader DD imagerel unz64local_CheckCurrentFileCoherencyHeader
	DD	imagerel unz64local_CheckCurrentFileCoherencyHeader+550
	DD	imagerel $unwind$unz64local_CheckCurrentFileCoherencyHeader
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$unzGoToFilePos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFilePos64 DD imagerel $LN8
	DD	imagerel $LN8+50
	DD	imagerel $unwind$unzGoToFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzGoToFilePos64 DD imagerel $LN8+50
	DD	imagerel $LN8+114
	DD	imagerel $chain$0$unzGoToFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unzGoToFilePos64 DD imagerel $LN8+114
	DD	imagerel $LN8+125
	DD	imagerel $chain$1$unzGoToFilePos64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetFilePos DD imagerel $LN7
	DD	imagerel $LN7+42
	DD	imagerel $unwind$unzGetFilePos
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzLocateFile DD imagerel $LN31
	DD	imagerel $LN31+90
	DD	imagerel $unwind$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unzLocateFile DD imagerel $LN31+90
	DD	imagerel $LN31+471
	DD	imagerel $chain$3$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$unzLocateFile DD imagerel $LN31+471
	DD	imagerel $LN31+475
	DD	imagerel $chain$5$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$unzLocateFile DD imagerel $LN31+475
	DD	imagerel $LN31+491
	DD	imagerel $chain$6$unzLocateFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToNextFile DD imagerel $LN16
	DD	imagerel $LN16+121
	DD	imagerel $unwind$unzGoToNextFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unzGoToNextFile DD imagerel $LN16+121
	DD	imagerel $LN16+181
	DD	imagerel $chain$0$unzGoToNextFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unzGoToNextFile DD imagerel $LN16+181
	DD	imagerel $LN16+192
	DD	imagerel $chain$1$unzGoToNextFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGoToFirstFile DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$unzGoToFirstFile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo DD imagerel $LN9
	DD	imagerel $LN9+246
	DD	imagerel $unwind$unzGetCurrentFileInfo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzGetCurrentFileInfo64 DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$unzGetCurrentFileInfo64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_GetCurrentFileInfoInternal DD imagerel unz64local_GetCurrentFileInfoInternal
	DD	imagerel unz64local_GetCurrentFileInfoInternal+1432
	DD	imagerel $unwind$unz64local_GetCurrentFileInfoInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzClose DD imagerel $LN8
	DD	imagerel $LN8+71
	DD	imagerel $unwind$unzClose
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2_64 DD imagerel $LN7
	DD	imagerel $LN7+96
	DD	imagerel $unwind$unzOpen2_64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpen2 DD imagerel $LN7
	DD	imagerel $LN7+65
	DD	imagerel $unwind$unzOpen2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unzOpenInternal DD imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+174
	DD	imagerel $unwind$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unzOpenInternal DD imagerel unzOpenInternal+174
	DD	imagerel unzOpenInternal+877
	DD	imagerel $chain$3$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$unzOpenInternal DD imagerel unzOpenInternal+877
	DD	imagerel unzOpenInternal+1137
	DD	imagerel $chain$4$unzOpenInternal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+103
	DD	imagerel $unwind$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64+103
	DD	imagerel unz64local_SearchCentralDir64+123
	DD	imagerel $chain$0$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64+123
	DD	imagerel unz64local_SearchCentralDir64+313
	DD	imagerel $chain$1$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64+313
	DD	imagerel unz64local_SearchCentralDir64+337
	DD	imagerel $chain$2$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unz64local_SearchCentralDir64 DD imagerel unz64local_SearchCentralDir64+337
	DD	imagerel unz64local_SearchCentralDir64+542
	DD	imagerel $chain$3$unz64local_SearchCentralDir64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+105
	DD	imagerel $unwind$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+105
	DD	imagerel unz64local_SearchCentralDir+125
	DD	imagerel $chain$0$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+125
	DD	imagerel unz64local_SearchCentralDir+312
	DD	imagerel $chain$1$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+312
	DD	imagerel unz64local_SearchCentralDir+326
	DD	imagerel $chain$2$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$unz64local_SearchCentralDir DD imagerel unz64local_SearchCentralDir+326
	DD	imagerel unz64local_SearchCentralDir+346
	DD	imagerel $chain$3$unz64local_SearchCentralDir
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getLong64 DD imagerel unz64local_getLong64
	DD	imagerel unz64local_getLong64+200
	DD	imagerel $unwind$unz64local_getLong64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getLong DD imagerel unz64local_getLong
	DD	imagerel unz64local_getLong+144
	DD	imagerel $unwind$unz64local_getLong
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$unz64local_getShort DD imagerel unz64local_getShort
	DD	imagerel unz64local_getShort+124
	DD	imagerel $unwind$unz64local_getShort
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_keys DD imagerel init_keys
	DD	imagerel init_keys+107
	DD	imagerel $unwind$init_keys
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_keys DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getShort DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getLong DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_getLong64 DD 060f01H
	DD	08640fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unz64local_SearchCentralDir DD 021H
	DD	imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+105
	DD	imagerel $unwind$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unz64local_SearchCentralDir DD 021H
	DD	imagerel unz64local_SearchCentralDir+105
	DD	imagerel unz64local_SearchCentralDir+125
	DD	imagerel $chain$0$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unz64local_SearchCentralDir DD 020521H
	DD	0ac405H
	DD	imagerel unz64local_SearchCentralDir+105
	DD	imagerel unz64local_SearchCentralDir+125
	DD	imagerel $chain$0$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unz64local_SearchCentralDir DD 020521H
	DD	0be405H
	DD	imagerel unz64local_SearchCentralDir
	DD	imagerel unz64local_SearchCentralDir+105
	DD	imagerel $unwind$unz64local_SearchCentralDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_SearchCentralDir DD 081001H
	DD	0d3410H
	DD	0f00c3210H
	DD	07008d00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unz64local_SearchCentralDir64 DD 021H
	DD	imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+103
	DD	imagerel $unwind$unz64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$unz64local_SearchCentralDir64 DD 021H
	DD	imagerel unz64local_SearchCentralDir64+103
	DD	imagerel unz64local_SearchCentralDir64+123
	DD	imagerel $chain$0$unz64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unz64local_SearchCentralDir64 DD 020521H
	DD	0cc405H
	DD	imagerel unz64local_SearchCentralDir64+103
	DD	imagerel unz64local_SearchCentralDir64+123
	DD	imagerel $chain$0$unz64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unz64local_SearchCentralDir64 DD 020521H
	DD	04d405H
	DD	imagerel unz64local_SearchCentralDir64
	DD	imagerel unz64local_SearchCentralDir64+103
	DD	imagerel $unwind$unz64local_SearchCentralDir64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_SearchCentralDir64 DD 070d01H
	DD	0f009420dH
	DD	07005e007H
	DD	050036004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzOpenInternal DD 020021H
	DD	02ef400H
	DD	imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+174
	DD	imagerel $unwind$unzOpenInternal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unzOpenInternal DD 041021H
	DD	02ef410H
	DD	02fe408H
	DD	imagerel unzOpenInternal
	DD	imagerel unzOpenInternal+174
	DD	imagerel $unwind$unzOpenInternal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenInternal DD 09ab01H
	DD	03574abH
	DD	034349eH
	DD	0300111H
	DD	06003c005H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2 DD 020701H
	DD	0110107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpen2_64 DD 020701H
	DD	0110107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzClose DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_GetCurrentFileInfoInternal DD 0ebe01H
	DD	013f4beH
	DD	014e46cH
	DD	0157464H
	DD	016345cH
	DD	0170121H
	DD	0c013d015H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo64 DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetCurrentFileInfo DD 030901H
	DD	0160109H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFirstFile DD 042c01H
	DD	0c342cH
	DD	070029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unzGoToNextFile DD 021H
	DD	imagerel $LN16
	DD	imagerel $LN16+121
	DD	imagerel $unwind$unzGoToNextFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzGoToNextFile DD 020521H
	DD	0c3405H
	DD	imagerel $LN16
	DD	imagerel $LN16+121
	DD	imagerel $unwind$unzGoToNextFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToNextFile DD 020601H
	DD	070029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unzLocateFile DD 021H
	DD	imagerel $LN31
	DD	imagerel $LN31+90
	DD	imagerel $unwind$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$unzLocateFile DD 080021H
	DD	034f400H
	DD	035e400H
	DD	03cc400H
	DD	03b3400H
	DD	imagerel $LN31
	DD	imagerel $LN31+90
	DD	imagerel $unwind$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unzLocateFile DD 083f21H
	DD	034f43fH
	DD	035e42bH
	DD	03cc41cH
	DD	03b3408H
	DD	imagerel $LN31
	DD	imagerel $LN31+90
	DD	imagerel $unwind$unzLocateFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzLocateFile DD 050b01H
	DD	036010bH
	DD	060037004H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetFilePos DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unzGoToFilePos64 DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+50
	DD	imagerel $unwind$unzGoToFilePos64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$unzGoToFilePos64 DD 020521H
	DD	0c3405H
	DD	imagerel $LN8
	DD	imagerel $LN8+50
	DD	imagerel $unwind$unzGoToFilePos64
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos64 DD 020601H
	DD	070029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGoToFilePos DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unz64local_CheckCurrentFileCoherencyHeader DD 0b6801H
	DD	04d468H
	DD	0e5460H
	DD	0f00a420eH
	DD	0c006e008H
	DD	060037004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzOpenCurrentFile3 DD 021H
	DD	imagerel $LN63
	DD	imagerel $LN63+111
	DD	imagerel $unwind$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$unzOpenCurrentFile3 DD 040021H
	DD	0e7400H
	DD	0d6400H
	DD	imagerel $LN63
	DD	imagerel $LN63+111
	DD	imagerel $unwind$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$unzOpenCurrentFile3 DD 040f21H
	DD	0e740fH
	DD	0d6405H
	DD	imagerel $LN63
	DD	imagerel $LN63+111
	DD	imagerel $unwind$unzOpenCurrentFile3
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile3 DD 060e01H
	DD	0f340eH
	DD	0f00a720eH
	DD	05006e008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFilePassword DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzOpenCurrentFile2 DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$unzReadCurrentFile DD 021H
	DD	imagerel $LN97
	DD	imagerel $LN97+61
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$unzReadCurrentFile DD 0a0021H
	DD	04e400H
	DD	05c400H
	DD	0c7400H
	DD	0b6400H
	DD	0a5400H
	DD	imagerel $LN97
	DD	imagerel $LN97+61
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$unzReadCurrentFile DD 0a1921H
	DD	04e419H
	DD	05c414H
	DD	0c740fH
	DD	0b640aH
	DD	0a5405H
	DD	imagerel $LN97
	DD	imagerel $LN97+61
	DD	imagerel $unwind$unzReadCurrentFile
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzReadCurrentFile DD 040a01H
	DD	0f006520aH
	DD	03002d004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetLocalExtrafield DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzCloseCurrentFile DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unzGetGlobalComment DD 084501H
	DD	066445H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT decrypt_byte
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$dead$ = 16
decrypt_byte PROC					; COMDAT

; 36   :     unsigned temp;  /* POTENTIAL BUG:  temp*(temp^1) may overflow in an
; 37   :                      * unpredictable manner on 16-bit systems; not a problem
; 38   :                      * with any known compiler so far, though */
; 39   : 
; 40   :     (void)pcrc_32_tab;
; 41   :     temp = ((unsigned)(*(pkeys+2)) & 0xffff) | 2;

  00000	8b 51 08	 mov	 edx, DWORD PTR [rcx+8]
  00003	81 e2 fd ff 00
	00		 and	 edx, 65533		; 0000fffdH
  00009	83 ca 02	 or	 edx, 2

; 42   :     return (int)(((temp * (temp ^ 1)) >> 8) & 0xff);

  0000c	8b c2		 mov	 eax, edx
  0000e	83 f0 01	 xor	 eax, 1
  00011	0f af c2	 imul	 eax, edx
  00014	c1 e8 08	 shr	 eax, 8
  00017	0f b6 c0	 movzx	 eax, al

; 43   : }

  0001a	c3		 ret	 0
decrypt_byte ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT update_keys
_TEXT	SEGMENT
pkeys$ = 8
pcrc_32_tab$ = 16
c$ = 24
update_keys PROC					; COMDAT

; 49   :     (*(pkeys+0)) = CRC32((*(pkeys+0)), c);

  00000	44 8b 11	 mov	 r10d, DWORD PTR [rcx]
  00003	4c 8b d9	 mov	 r11, rcx
  00006	45 8b ca	 mov	 r9d, r10d
  00009	41 8b c0	 mov	 eax, r8d
  0000c	4c 33 c8	 xor	 r9, rax
  0000f	41 c1 ea 08	 shr	 r10d, 8
  00013	41 0f b6 c1	 movzx	 eax, r9b
  00017	44 33 14 82	 xor	 r10d, DWORD PTR [rdx+rax*4]
  0001b	44 89 11	 mov	 DWORD PTR [rcx], r10d

; 50   :     (*(pkeys+1)) += (*(pkeys+0)) & 0xff;

  0001e	41 0f b6 c2	 movzx	 eax, r10b

; 51   :     (*(pkeys+1)) = (*(pkeys+1)) * 134775813L + 1;

  00022	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00025	69 c0 05 84 08
	08		 imul	 eax, eax, 134775813	; 08088405H
  0002b	ff c0		 inc	 eax
  0002d	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 52   :     {
; 53   :       register int keyshift = (int)((*(pkeys+1)) >> 24);
; 54   :       (*(pkeys+2)) = CRC32((*(pkeys+2)), keyshift);

  00030	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00033	48 c1 e8 18	 shr	 rax, 24
  00037	48 33 c1	 xor	 rax, rcx
  0003a	c1 e9 08	 shr	 ecx, 8
  0003d	0f b6 c0	 movzx	 eax, al
  00040	33 0c 82	 xor	 ecx, DWORD PTR [rdx+rax*4]

; 55   :     }
; 56   :     return c;

  00043	41 8b c0	 mov	 eax, r8d
  00046	41 89 4b 08	 mov	 DWORD PTR [r11+8], ecx

; 57   : }

  0004a	c3		 ret	 0
update_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\crypt.h
;	COMDAT init_keys
_TEXT	SEGMENT
passwd$ = 48
pkeys$ = 56
pcrc_32_tab$ = 64
init_keys PROC						; COMDAT

; 64   : static void init_keys(const char* passwd, unsigned long* pkeys, const z_crc_t* pcrc_32_tab) {

  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 65   :     *(pkeys+0) = 305419896L;

  0000f	c7 02 78 56 34
	12		 mov	 DWORD PTR [rdx], 305419896 ; 12345678H
  00015	49 8b f0	 mov	 rsi, r8

; 66   :     *(pkeys+1) = 591751049L;

  00018	c7 42 04 89 67
	45 23		 mov	 DWORD PTR [rdx+4], 591751049 ; 23456789H
  0001f	48 8b fa	 mov	 rdi, rdx

; 67   :     *(pkeys+2) = 878082192L;

  00022	c7 42 08 90 78
	56 34		 mov	 DWORD PTR [rdx+8], 878082192 ; 34567890H
  00029	48 8b d9	 mov	 rbx, rcx

; 68   :     while (*passwd != '\0') {

  0002c	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  0002f	84 c0		 test	 al, al
  00031	74 28		 je	 SHORT $LN3@init_keys
  00033	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL2@init_keys:

; 69   :         update_keys(pkeys,pcrc_32_tab,(int)*passwd);

  00040	44 0f be c0	 movsx	 r8d, al
  00044	48 8b d6	 mov	 rdx, rsi
  00047	48 8b cf	 mov	 rcx, rdi
  0004a	e8 00 00 00 00	 call	 update_keys
  0004f	0f b6 43 01	 movzx	 eax, BYTE PTR [rbx+1]

; 70   :         passwd++;

  00053	48 8d 5b 01	 lea	 rbx, QWORD PTR [rbx+1]
  00057	84 c0		 test	 al, al
  00059	75 e5		 jne	 SHORT $LL2@init_keys
$LN3@init_keys:

; 71   :     }
; 72   : }

  0005b	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00060	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00065	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00069	5f		 pop	 rdi
  0006a	c3		 ret	 0
init_keys ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_getShort
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
c$ = 48
filestream$ = 56
pX$ = 64
unz64local_getShort PROC				; COMDAT

; 198  :                               uLong *pX) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 199  :     unsigned char c[2];
; 200  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,c,2);

  0000f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b d9	 mov	 rbx, rcx
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00022	41 b9 02 00 00
	00		 mov	 r9d, 2
  00028	48 8b f2	 mov	 rsi, rdx
  0002b	ff d0		 call	 rax

; 201  :     if (err==2)

  0002d	83 f8 02	 cmp	 eax, 2
  00030	75 23		 jne	 SHORT $LN2@unz64local

; 202  :     {
; 203  :         *pX = c[0] | ((uLong)c[1] << 8);

  00032	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00037	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR c$[rsp+1]
  0003c	c1 e1 08	 shl	 ecx, 8
  0003f	0b c8		 or	 ecx, eax
  00041	89 0f		 mov	 DWORD PTR [rdi], ecx

; 204  :         return UNZ_OK;

  00043	33 c0		 xor	 eax, eax

; 210  :             return UNZ_ERRNO;
; 211  :         else
; 212  :             return UNZ_EOF;
; 213  :     }
; 214  : }

  00045	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0004a	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0004f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00053	5f		 pop	 rdi
  00054	c3		 ret	 0
$LN2@unz64local:

; 205  :     }
; 206  :     else
; 207  :     {
; 208  :         *pX = 0;

  00055	c7 07 00 00 00
	00		 mov	 DWORD PTR [rdi], 0

; 209  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0005b	48 8b d6	 mov	 rdx, rsi
  0005e	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00062	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00066	ff d0		 call	 rax

; 210  :             return UNZ_ERRNO;
; 211  :         else
; 212  :             return UNZ_EOF;
; 213  :     }
; 214  : }

  00068	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0006d	f7 d8		 neg	 eax
  0006f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00074	1b c0		 sbb	 eax, eax
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5f		 pop	 rdi
  0007b	c3		 ret	 0
unz64local_getShort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_getLong
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
c$ = 48
filestream$ = 56
pX$ = 64
unz64local_getLong PROC					; COMDAT

; 218  :                              uLong *pX) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 219  :     unsigned char c[4];
; 220  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,c,4);

  0000f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00013	49 8b f8	 mov	 rdi, r8
  00016	48 8b d9	 mov	 rbx, rcx
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00022	41 b9 04 00 00
	00		 mov	 r9d, 4
  00028	48 8b f2	 mov	 rsi, rdx
  0002b	ff d0		 call	 rax

; 221  :     if (err==4)

  0002d	83 f8 04	 cmp	 eax, 4
  00030	75 37		 jne	 SHORT $LN2@unz64local

; 222  :     {
; 223  :         *pX = c[0] | ((uLong)c[1] << 8) | ((uLong)c[2] << 16) | ((uLong)c[3] << 24);

  00032	0f b6 44 24 32	 movzx	 eax, BYTE PTR c$[rsp+2]
  00037	0f b6 4c 24 33	 movzx	 ecx, BYTE PTR c$[rsp+3]
  0003c	c1 e1 08	 shl	 ecx, 8
  0003f	0b c8		 or	 ecx, eax
  00041	0f b6 44 24 31	 movzx	 eax, BYTE PTR c$[rsp+1]
  00046	c1 e1 08	 shl	 ecx, 8
  00049	0b c8		 or	 ecx, eax
  0004b	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00050	c1 e1 08	 shl	 ecx, 8
  00053	0b c8		 or	 ecx, eax
  00055	89 0f		 mov	 DWORD PTR [rdi], ecx

; 224  :         return UNZ_OK;

  00057	33 c0		 xor	 eax, eax

; 230  :             return UNZ_ERRNO;
; 231  :         else
; 232  :             return UNZ_EOF;
; 233  :     }
; 234  : }

  00059	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0005e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00063	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00067	5f		 pop	 rdi
  00068	c3		 ret	 0
$LN2@unz64local:

; 225  :     }
; 226  :     else
; 227  :     {
; 228  :         *pX = 0;

  00069	c7 07 00 00 00
	00		 mov	 DWORD PTR [rdi], 0

; 229  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  0006f	48 8b d6	 mov	 rdx, rsi
  00072	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  00076	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  0007a	ff d0		 call	 rax

; 230  :             return UNZ_ERRNO;
; 231  :         else
; 232  :             return UNZ_EOF;
; 233  :     }
; 234  : }

  0007c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00081	f7 d8		 neg	 eax
  00083	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00088	1b c0		 sbb	 eax, eax
  0008a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008e	5f		 pop	 rdi
  0008f	c3		 ret	 0
unz64local_getLong ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_getLong64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 48
c$ = 48
filestream$ = 56
pX$ = 64
unz64local_getLong64 PROC				; COMDAT

; 239  :                                ZPOS64_T *pX) {

  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 240  :     unsigned char c[8];
; 241  :     int err = (int)ZREAD64(*pzlib_filefunc_def,filestream,c,8);

  0000f	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00013	49 8b f0	 mov	 rsi, r8
  00016	48 8b d9	 mov	 rbx, rcx
  00019	4c 8d 44 24 30	 lea	 r8, QWORD PTR c$[rsp]
  0001e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00022	41 b9 08 00 00
	00		 mov	 r9d, 8
  00028	48 8b fa	 mov	 rdi, rdx
  0002b	ff d0		 call	 rax

; 242  :     if (err==8)

  0002d	83 f8 08	 cmp	 eax, 8
  00030	75 6e		 jne	 SHORT $LN2@unz64local

; 243  :     {
; 244  :         *pX = c[0] | ((ZPOS64_T)c[1] << 8) | ((ZPOS64_T)c[2] << 16) | ((ZPOS64_T)c[3] << 24)

  00032	0f b6 44 24 36	 movzx	 eax, BYTE PTR c$[rsp+6]
  00037	0f b6 4c 24 37	 movzx	 ecx, BYTE PTR c$[rsp+7]
  0003c	48 c1 e1 08	 shl	 rcx, 8
  00040	48 0b c8	 or	 rcx, rax
  00043	0f b6 44 24 35	 movzx	 eax, BYTE PTR c$[rsp+5]
  00048	48 c1 e1 08	 shl	 rcx, 8
  0004c	48 0b c8	 or	 rcx, rax
  0004f	0f b6 44 24 34	 movzx	 eax, BYTE PTR c$[rsp+4]
  00054	48 c1 e1 08	 shl	 rcx, 8
  00058	48 0b c8	 or	 rcx, rax
  0005b	0f b6 44 24 33	 movzx	 eax, BYTE PTR c$[rsp+3]
  00060	48 c1 e1 08	 shl	 rcx, 8
  00064	48 0b c8	 or	 rcx, rax
  00067	0f b6 44 24 32	 movzx	 eax, BYTE PTR c$[rsp+2]
  0006c	48 c1 e1 08	 shl	 rcx, 8
  00070	48 0b c8	 or	 rcx, rax
  00073	0f b6 44 24 31	 movzx	 eax, BYTE PTR c$[rsp+1]
  00078	48 c1 e1 08	 shl	 rcx, 8
  0007c	48 0b c8	 or	 rcx, rax
  0007f	0f b6 44 24 30	 movzx	 eax, BYTE PTR c$[rsp]
  00084	48 c1 e1 08	 shl	 rcx, 8
  00088	48 0b c8	 or	 rcx, rax
  0008b	48 89 0e	 mov	 QWORD PTR [rsi], rcx

; 245  :             | ((ZPOS64_T)c[4] << 32) | ((ZPOS64_T)c[5] << 40) | ((ZPOS64_T)c[6] << 48) | ((ZPOS64_T)c[7] << 56);
; 246  :         return UNZ_OK;

  0008e	33 c0		 xor	 eax, eax

; 252  :             return UNZ_ERRNO;
; 253  :         else
; 254  :             return UNZ_EOF;
; 255  :     }
; 256  : }

  00090	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00095	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  0009a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
$LN2@unz64local:

; 247  :     }
; 248  :     else
; 249  :     {
; 250  :         *pX = 0;

  000a0	48 c7 06 00 00
	00 00		 mov	 QWORD PTR [rsi], 0

; 251  :         if (ZERROR64(*pzlib_filefunc_def,filestream))

  000a7	48 8b d7	 mov	 rdx, rdi
  000aa	48 8b 43 30	 mov	 rax, QWORD PTR [rbx+48]
  000ae	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  000b2	ff d0		 call	 rax

; 252  :             return UNZ_ERRNO;
; 253  :         else
; 254  :             return UNZ_EOF;
; 255  :     }
; 256  : }

  000b4	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000b9	f7 d8		 neg	 eax
  000bb	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  000c0	1b c0		 sbb	 eax, eax
  000c2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c6	5f		 pop	 rdi
  000c7	c3		 ret	 0
unz64local_getLong64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT strcmpcasenosensitive_internal
_TEXT	SEGMENT
fileName1$ = 8
fileName2$ = 16
strcmpcasenosensitive_internal PROC			; COMDAT

; 259  : local int strcmpcasenosensitive_internal(const char* fileName1, const char* fileName2) {

  00000	4c 8b d9	 mov	 r11, rcx
  00003	4c 8b ca	 mov	 r9, rdx
  00006	4c 2b da	 sub	 r11, rdx
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL4@strcmpcase:

; 260  :     for (;;)
; 261  :     {
; 262  :         char c1=*(fileName1++);

  00010	43 0f b6 04 0b	 movzx	 eax, BYTE PTR [r11+r9]
  00015	45 0f b6 11	 movzx	 r10d, BYTE PTR [r9]

; 263  :         char c2=*(fileName2++);

  00019	4d 8d 49 01	 lea	 r9, QWORD PTR [r9+1]

; 264  :         if ((c1>='a') && (c1<='z'))

  0001d	3c 61		 cmp	 al, 97			; 00000061H
  0001f	7c 06		 jl	 SHORT $LN5@strcmpcase
  00021	3c 7a		 cmp	 al, 122			; 0000007aH
  00023	7f 02		 jg	 SHORT $LN5@strcmpcase

; 265  :             c1 -= 0x20;

  00025	2c 20		 sub	 al, 32			; 00000020H
$LN5@strcmpcase:

; 266  :         if ((c2>='a') && (c2<='z'))

  00027	41 8d 52 9f	 lea	 edx, DWORD PTR [r10-97]

; 267  :             c2 -= 0x20;
; 268  :         if (c1=='\0')

  0002b	80 fa 19	 cmp	 dl, 25
  0002e	41 8d 4a e0	 lea	 ecx, DWORD PTR [r10-32]
  00032	44 0f b6 c1	 movzx	 r8d, cl
  00036	45 0f 47 c2	 cmova	 r8d, r10d
  0003a	84 c0		 test	 al, al
  0003c	74 18		 je	 SHORT $LN14@strcmpcase

; 270  :         if (c2=='\0')

  0003e	45 84 c0	 test	 r8b, r8b
  00041	74 07		 je	 SHORT $LN15@strcmpcase

; 271  :             return 1;
; 272  :         if (c1<c2)

  00043	41 3a c0	 cmp	 al, r8b
  00046	7c 08		 jl	 SHORT $LN16@strcmpcase

; 274  :         if (c1>c2)

  00048	7e c6		 jle	 SHORT $LL4@strcmpcase
$LN15@strcmpcase:

; 275  :             return 1;
; 276  :     }
; 277  : }

  0004a	b8 01 00 00 00	 mov	 eax, 1
  0004f	c3		 ret	 0
$LN16@strcmpcase:

; 273  :             return -1;

  00050	b8 ff ff ff ff	 mov	 eax, -1

; 275  :             return 1;
; 276  :     }
; 277  : }

  00055	c3		 ret	 0
$LN14@strcmpcase:

; 269  :             return ((c2=='\0') ? 0 : -1);

  00056	41 f6 d8	 neg	 r8b
  00059	1b c0		 sbb	 eax, eax

; 275  :             return 1;
; 276  :     }
; 277  : }

  0005b	c3		 ret	 0
strcmpcasenosensitive_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzStringFileNameCompare
_TEXT	SEGMENT
fileName1$ = 8
fileName2$ = 16
iCaseSensitivity$ = 24
unzStringFileNameCompare PROC				; COMDAT

; 302  :     if (iCaseSensitivity==0)
; 303  :         iCaseSensitivity=CASESENSITIVITYDEFAULTVALUE;
; 304  : 
; 305  :     if (iCaseSensitivity==1)

  00000	45 85 c0	 test	 r8d, r8d
  00003	b8 02 00 00 00	 mov	 eax, 2
  00008	41 0f 45 c0	 cmovne	 eax, r8d
  0000c	83 f8 01	 cmp	 eax, 1
  0000f	75 1b		 jne	 SHORT $LN3@unzStringF

; 306  :         return strcmp(fileName1,fileName2);

  00011	48 2b d1	 sub	 rdx, rcx
$LL5@unzStringF:
  00014	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
  00017	3a 04 11	 cmp	 al, BYTE PTR [rcx+rdx]
  0001a	75 0a		 jne	 SHORT $LN7@unzStringF
  0001c	48 ff c1	 inc	 rcx
  0001f	84 c0		 test	 al, al
  00021	75 f1		 jne	 SHORT $LL5@unzStringF
  00023	33 c0		 xor	 eax, eax

; 309  : }

  00025	c3		 ret	 0
$LN7@unzStringF:

; 306  :         return strcmp(fileName1,fileName2);

  00026	1b c0		 sbb	 eax, eax
  00028	83 c8 01	 or	 eax, 1

; 309  : }

  0002b	c3		 ret	 0
$LN3@unzStringF:

; 307  : 
; 308  :     return STRCMPCASENOSENTIVEFUNCTION(fileName1,fileName2);

  0002c	e9 00 00 00 00	 jmp	 strcmpcasenosensitive_internal
unzStringFileNameCompare ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_SearchCentralDir
_TEXT	SEGMENT
pzlib_filefunc_def$ = 80
filestream$ = 88
uSizeFile$1$ = 96
unz64local_SearchCentralDir PROC			; COMDAT

; 323  : local ZPOS64_T unz64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream) {

  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 55		 push	 r13
  0000a	41 57		 push	 r15
  0000c	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 324  :     unsigned char* buf;
; 325  :     ZPOS64_T uSizeFile;
; 326  :     ZPOS64_T uBackRead;
; 327  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 328  :     ZPOS64_T uPosFound=CENTRALDIRINVALID;
; 329  : 
; 330  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  00010	41 b9 02 00 00
	00		 mov	 r9d, 2
  00016	45 33 c0	 xor	 r8d, r8d
  00019	4c 8b ea	 mov	 r13, rdx
  0001c	4c 8b f9	 mov	 r15, rcx
  0001f	bd ff ff 00 00	 mov	 ebp, 65535		; 0000ffffH
  00024	48 c7 c6 ff ff
	ff ff		 mov	 rsi, -1
  0002b	e8 00 00 00 00	 call	 call_zseek64
  00030	85 c0		 test	 eax, eax
  00032	0f 85 0e 01 00
	00		 jne	 $LN35@unz64local

; 331  :         return CENTRALDIRINVALID;
; 332  : 
; 333  : 
; 334  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00038	49 8b d5	 mov	 rdx, r13
  0003b	49 8b cf	 mov	 rcx, r15
  0003e	e8 00 00 00 00	 call	 call_ztell64

; 335  : 
; 336  :     if (uMaxBack>uSizeFile)

  00043	48 3b c5	 cmp	 rax, rbp
  00046	48 89 44 24 60	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 337  :         uMaxBack = uSizeFile;
; 338  : 
; 339  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  0004b	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  00050	48 8b d8	 mov	 rbx, rax
  00053	48 0f 42 e8	 cmovb	 rbp, rax
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0005d	48 8b f8	 mov	 rdi, rax

; 340  :     if (buf==NULL)

  00060	48 85 c0	 test	 rax, rax
  00063	0f 84 dd 00 00
	00		 je	 $LN35@unz64local
  00069	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14

; 341  :         return CENTRALDIRINVALID;
; 342  : 
; 343  :     uBackRead = 4;

  0006e	41 be 04 00 00
	00		 mov	 r14d, 4

; 344  :     while (uBackRead<uMaxBack)

  00074	49 3b ee	 cmp	 rbp, r14
  00077	0f 86 bb 00 00
	00		 jbe	 $LN37@unz64local
  0007d	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
$LL2@unz64local:

; 345  :     {
; 346  :         uLong uReadSize;
; 347  :         ZPOS64_T uReadPos ;
; 348  :         int i;
; 349  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00082	49 8d 8e 00 04
	00 00		 lea	 rcx, QWORD PTR [r14+1024]

; 350  :             uBackRead = uMaxBack;
; 351  :         else
; 352  :             uBackRead+=BUFREADCOMMENT;
; 353  :         uReadPos = uSizeFile-uBackRead ;

  00089	4c 8b e3	 mov	 r12, rbx
  0008c	48 3b cd	 cmp	 rcx, rbp

; 354  : 
; 355  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008f	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00094	4c 8b f5	 mov	 r14, rbp

; 356  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 357  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00097	49 8b d5	 mov	 rdx, r13
  0009a	4c 0f 46 f1	 cmovbe	 r14, rcx
  0009e	49 8b cf	 mov	 rcx, r15
  000a1	4d 2b e6	 sub	 r12, r14
  000a4	41 2b dc	 sub	 ebx, r12d
  000a7	4d 8b c4	 mov	 r8, r12
  000aa	4c 3b f0	 cmp	 r14, rax
  000ad	0f 47 d8	 cmova	 ebx, eax
  000b0	45 33 c9	 xor	 r9d, r9d
  000b3	e8 00 00 00 00	 call	 call_zseek64
  000b8	85 c0		 test	 eax, eax
  000ba	75 77		 jne	 SHORT $LN48@unz64local

; 358  :             break;
; 359  : 
; 360  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000bc	49 8b 47 08	 mov	 rax, QWORD PTR [r15+8]
  000c0	44 8b cb	 mov	 r9d, ebx
  000c3	49 8b 4f 38	 mov	 rcx, QWORD PTR [r15+56]
  000c7	4c 8b c7	 mov	 r8, rdi
  000ca	49 8b d5	 mov	 rdx, r13
  000cd	ff d0		 call	 rax
  000cf	3b c3		 cmp	 eax, ebx
  000d1	75 60		 jne	 SHORT $LN48@unz64local

; 361  :             break;
; 362  : 
; 363  :         for (i=(int)uReadSize-3; (i--)>0;)

  000d3	8d 53 fd	 lea	 edx, DWORD PTR [rbx-3]
  000d6	85 d2		 test	 edx, edx
  000d8	7e 4b		 jle	 SHORT $LN34@unz64local
  000da	48 63 c2	 movsxd	 rax, edx
  000dd	49 c7 c0 fd ff
	ff ff		 mov	 r8, -3
  000e4	48 83 c0 03	 add	 rax, 3
  000e8	48 03 c7	 add	 rax, rdi
  000eb	4c 2b c7	 sub	 r8, rdi
  000ee	66 90		 npad	 2
$LL6@unz64local:
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff ca		 dec	 edx
  000f5	48 ff c8	 dec	 rax

; 364  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 365  :                 ((*(buf+i+2))==0x05) && ((*(buf+i+3))==0x06))

  000f8	80 78 fd 50	 cmp	 BYTE PTR [rax-3], 80	; 00000050H
  000fc	75 11		 jne	 SHORT $LN4@unz64local
  000fe	80 79 fd 4b	 cmp	 BYTE PTR [rcx-3], 75	; 0000004bH
  00102	75 0b		 jne	 SHORT $LN4@unz64local
  00104	80 78 ff 05	 cmp	 BYTE PTR [rax-1], 5
  00108	75 05		 jne	 SHORT $LN4@unz64local
  0010a	80 38 06	 cmp	 BYTE PTR [rax], 6
  0010d	74 0b		 je	 SHORT $LN21@unz64local
$LN4@unz64local:

; 361  :             break;
; 362  : 
; 363  :         for (i=(int)uReadSize-3; (i--)>0;)

  0010f	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00113	48 85 c9	 test	 rcx, rcx
  00116	7f d8		 jg	 SHORT $LL6@unz64local
  00118	eb 0b		 jmp	 SHORT $LN34@unz64local
$LN21@unz64local:

; 366  :             {
; 367  :                 uPosFound = uReadPos+(unsigned)i;

  0011a	8b f2		 mov	 esi, edx
  0011c	49 03 f4	 add	 rsi, r12

; 368  :                 break;
; 369  :             }
; 370  : 
; 371  :         if (uPosFound!=CENTRALDIRINVALID)

  0011f	48 83 fe ff	 cmp	 rsi, -1
  00123	75 0e		 jne	 SHORT $LN48@unz64local
$LN34@unz64local:

; 344  :     while (uBackRead<uMaxBack)

  00125	48 8b 5c 24 60	 mov	 rbx, QWORD PTR uSizeFile$1$[rsp]
  0012a	4c 3b f5	 cmp	 r14, rbp
  0012d	0f 82 4f ff ff
	ff		 jb	 $LL2@unz64local
$LN48@unz64local:
  00133	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
$LN37@unz64local:

; 372  :             break;
; 373  :     }
; 374  :     free(buf);

  00138	48 8b cf	 mov	 rcx, rdi
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 375  :     return uPosFound;

  00141	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
$LN35@unz64local:

; 376  : }

  00146	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0014b	48 8b c6	 mov	 rax, rsi
  0014e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00152	41 5f		 pop	 r15
  00154	41 5d		 pop	 r13
  00156	5f		 pop	 rdi
  00157	5e		 pop	 rsi
  00158	5d		 pop	 rbp
  00159	c3		 ret	 0
unz64local_SearchCentralDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_SearchCentralDir64
_TEXT	SEGMENT
pzlib_filefunc_def$ = 96
filestream$ = 104
uL$ = 112
uSizeFile$1$ = 112
relativeOffset$ = 120
unz64local_SearchCentralDir64 PROC			; COMDAT

; 384  :                                              voidpf filestream) {

  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	56		 push	 rsi
  00004	57		 push	 rdi
  00005	41 56		 push	 r14
  00007	41 57		 push	 r15
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 385  :     unsigned char* buf;
; 386  :     ZPOS64_T uSizeFile;
; 387  :     ZPOS64_T uBackRead;
; 388  :     ZPOS64_T uMaxBack=0xffff; /* maximum size of global comment */
; 389  :     ZPOS64_T uPosFound=CENTRALDIRINVALID;
; 390  :     uLong uL;
; 391  :                 ZPOS64_T relativeOffset;
; 392  : 
; 393  :     if (ZSEEK64(*pzlib_filefunc_def,filestream,0,ZLIB_FILEFUNC_SEEK_END) != 0)

  0000d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00013	45 33 c0	 xor	 r8d, r8d
  00016	48 8b f2	 mov	 rsi, rdx
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	41 be ff ff 00
	00		 mov	 r14d, 65535		; 0000ffffH
  00022	49 c7 c7 ff ff
	ff ff		 mov	 r15, -1
  00029	e8 00 00 00 00	 call	 call_zseek64
  0002e	85 c0		 test	 eax, eax
  00030	0f 85 d4 01 00
	00		 jne	 $LN46@unz64local

; 394  :         return CENTRALDIRINVALID;
; 395  : 
; 396  : 
; 397  :     uSizeFile = ZTELL64(*pzlib_filefunc_def,filestream);

  00036	48 8b d6	 mov	 rdx, rsi
  00039	48 8b cf	 mov	 rcx, rdi
  0003c	e8 00 00 00 00	 call	 call_ztell64

; 398  : 
; 399  :     if (uMaxBack>uSizeFile)

  00041	49 3b c6	 cmp	 rax, r14
  00044	48 89 44 24 70	 mov	 QWORD PTR uSizeFile$1$[rsp], rax

; 400  :         uMaxBack = uSizeFile;
; 401  : 
; 402  :     buf = (unsigned char*)ALLOC(BUFREADCOMMENT+4);

  00049	b9 04 04 00 00	 mov	 ecx, 1028		; 00000404H
  0004e	48 8b d8	 mov	 rbx, rax
  00051	4c 0f 42 f0	 cmovb	 r14, rax
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0005b	48 8b e8	 mov	 rbp, rax

; 403  :     if (buf==NULL)

  0005e	48 85 c0	 test	 rax, rax
  00061	0f 84 a3 01 00
	00		 je	 $LN46@unz64local
  00067	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13

; 404  :         return CENTRALDIRINVALID;
; 405  : 
; 406  :     uBackRead = 4;

  0006c	41 bd 04 00 00
	00		 mov	 r13d, 4

; 407  :     while (uBackRead<uMaxBack)

  00072	4d 3b f5	 cmp	 r14, r13
  00075	0f 86 be 00 00
	00		 jbe	 $LN59@unz64local
  0007b	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
$LL2@unz64local:

; 408  :     {
; 409  :         uLong uReadSize;
; 410  :         ZPOS64_T uReadPos;
; 411  :         int i;
; 412  :         if (uBackRead+BUFREADCOMMENT>uMaxBack)

  00080	49 8d 8d 00 04
	00 00		 lea	 rcx, QWORD PTR [r13+1024]

; 413  :             uBackRead = uMaxBack;
; 414  :         else
; 415  :             uBackRead+=BUFREADCOMMENT;
; 416  :         uReadPos = uSizeFile-uBackRead ;

  00087	4c 8b e3	 mov	 r12, rbx
  0008a	49 3b ce	 cmp	 rcx, r14

; 417  : 
; 418  :         uReadSize = ((BUFREADCOMMENT+4) < (uSizeFile-uReadPos)) ?

  0008d	b8 04 04 00 00	 mov	 eax, 1028		; 00000404H
  00092	4d 8b ee	 mov	 r13, r14

; 419  :                      (BUFREADCOMMENT+4) : (uLong)(uSizeFile-uReadPos);
; 420  :         if (ZSEEK64(*pzlib_filefunc_def,filestream,uReadPos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00095	48 8b d6	 mov	 rdx, rsi
  00098	4c 0f 46 e9	 cmovbe	 r13, rcx
  0009c	48 8b cf	 mov	 rcx, rdi
  0009f	4d 2b e5	 sub	 r12, r13
  000a2	41 2b dc	 sub	 ebx, r12d
  000a5	4d 8b c4	 mov	 r8, r12
  000a8	4c 3b e8	 cmp	 r13, rax
  000ab	0f 47 d8	 cmova	 ebx, eax
  000ae	45 33 c9	 xor	 r9d, r9d
  000b1	e8 00 00 00 00	 call	 call_zseek64
  000b6	85 c0		 test	 eax, eax
  000b8	0f 85 76 00 00
	00		 jne	 $LN81@unz64local

; 421  :             break;
; 422  : 
; 423  :         if (ZREAD64(*pzlib_filefunc_def,filestream,buf,uReadSize)!=uReadSize)

  000be	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  000c2	44 8b cb	 mov	 r9d, ebx
  000c5	48 8b 4f 38	 mov	 rcx, QWORD PTR [rdi+56]
  000c9	4c 8b c5	 mov	 r8, rbp
  000cc	48 8b d6	 mov	 rdx, rsi
  000cf	ff d0		 call	 rax
  000d1	3b c3		 cmp	 eax, ebx
  000d3	75 5f		 jne	 SHORT $LN81@unz64local

; 424  :             break;
; 425  : 
; 426  :         for (i=(int)uReadSize-3; (i--)>0;)

  000d5	8d 53 fd	 lea	 edx, DWORD PTR [rbx-3]
  000d8	85 d2		 test	 edx, edx
  000da	7e 4a		 jle	 SHORT $LN45@unz64local
  000dc	48 63 c2	 movsxd	 rax, edx
  000df	49 c7 c0 fd ff
	ff ff		 mov	 r8, -3
  000e6	48 83 c0 03	 add	 rax, 3
  000ea	48 03 c5	 add	 rax, rbp
  000ed	4c 2b c5	 sub	 r8, rbp
$LL6@unz64local:
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff ca		 dec	 edx
  000f5	48 ff c8	 dec	 rax

; 427  :             if (((*(buf+i))==0x50) && ((*(buf+i+1))==0x4b) &&
; 428  :                 ((*(buf+i+2))==0x06) && ((*(buf+i+3))==0x07))

  000f8	80 78 fd 50	 cmp	 BYTE PTR [rax-3], 80	; 00000050H
  000fc	75 11		 jne	 SHORT $LN4@unz64local
  000fe	80 79 fd 4b	 cmp	 BYTE PTR [rcx-3], 75	; 0000004bH
  00102	75 0b		 jne	 SHORT $LN4@unz64local
  00104	80 78 ff 06	 cmp	 BYTE PTR [rax-1], 6
  00108	75 05		 jne	 SHORT $LN4@unz64local
  0010a	80 38 07	 cmp	 BYTE PTR [rax], 7
  0010d	74 0b		 je	 SHORT $LN32@unz64local
$LN4@unz64local:

; 424  :             break;
; 425  : 
; 426  :         for (i=(int)uReadSize-3; (i--)>0;)

  0010f	49 8d 0c 00	 lea	 rcx, QWORD PTR [r8+rax]
  00113	48 85 c9	 test	 rcx, rcx
  00116	7f d8		 jg	 SHORT $LL6@unz64local
  00118	eb 0c		 jmp	 SHORT $LN45@unz64local
$LN32@unz64local:

; 429  :             {
; 430  :                 uPosFound = uReadPos+(unsigned)i;

  0011a	44 8b fa	 mov	 r15d, edx
  0011d	4d 03 fc	 add	 r15, r12

; 431  :                 break;
; 432  :             }
; 433  : 
; 434  :         if (uPosFound!=CENTRALDIRINVALID)

  00120	49 83 ff ff	 cmp	 r15, -1
  00124	75 0e		 jne	 SHORT $LN81@unz64local
$LN45@unz64local:

; 407  :     while (uBackRead<uMaxBack)

  00126	48 8b 5c 24 70	 mov	 rbx, QWORD PTR uSizeFile$1$[rsp]
  0012b	4d 3b ee	 cmp	 r13, r14
  0012e	0f 82 4c ff ff
	ff		 jb	 $LL2@unz64local
$LN81@unz64local:
  00134	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
$LN59@unz64local:

; 435  :             break;
; 436  :     }
; 437  :     free(buf);

  00139	48 8b cd	 mov	 rcx, rbp
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00142	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]

; 438  :     if (uPosFound == CENTRALDIRINVALID)

  00147	49 83 ff ff	 cmp	 r15, -1
  0014b	0f 84 b9 00 00
	00		 je	 $LN46@unz64local

; 439  :         return CENTRALDIRINVALID;
; 440  : 
; 441  :     /* Zip64 end of central directory locator */
; 442  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, uPosFound,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00151	45 33 c9	 xor	 r9d, r9d
  00154	4d 8b c7	 mov	 r8, r15
  00157	48 8b d6	 mov	 rdx, rsi
  0015a	48 8b cf	 mov	 rcx, rdi
  0015d	e8 00 00 00 00	 call	 call_zseek64
  00162	85 c0		 test	 eax, eax
  00164	0f 85 a0 00 00
	00		 jne	 $LN46@unz64local

; 443  :         return CENTRALDIRINVALID;
; 444  : 
; 445  :     /* the signature, already checked */
; 446  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  0016a	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  0016f	48 8b d6	 mov	 rdx, rsi
  00172	48 8b cf	 mov	 rcx, rdi
  00175	e8 00 00 00 00	 call	 unz64local_getLong
  0017a	85 c0		 test	 eax, eax
  0017c	0f 85 88 00 00
	00		 jne	 $LN46@unz64local

; 447  :         return CENTRALDIRINVALID;
; 448  : 
; 449  :     /* number of the disk with the start of the zip64 end of central directory */
; 450  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  00182	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  00187	48 8b d6	 mov	 rdx, rsi
  0018a	48 8b cf	 mov	 rcx, rdi
  0018d	e8 00 00 00 00	 call	 unz64local_getLong
  00192	85 c0		 test	 eax, eax
  00194	0f 85 70 00 00
	00		 jne	 $LN46@unz64local

; 451  :         return CENTRALDIRINVALID;
; 452  :     if (uL != 0)

  0019a	39 44 24 70	 cmp	 DWORD PTR uL$[rsp], eax
  0019e	75 6a		 jne	 SHORT $LN46@unz64local

; 453  :         return CENTRALDIRINVALID;
; 454  : 
; 455  :     /* relative offset of the zip64 end of central directory record */
; 456  :     if (unz64local_getLong64(pzlib_filefunc_def,filestream,&relativeOffset)!=UNZ_OK)

  001a0	4c 8d 44 24 78	 lea	 r8, QWORD PTR relativeOffset$[rsp]
  001a5	48 8b d6	 mov	 rdx, rsi
  001a8	48 8b cf	 mov	 rcx, rdi
  001ab	e8 00 00 00 00	 call	 unz64local_getLong64
  001b0	85 c0		 test	 eax, eax
  001b2	75 56		 jne	 SHORT $LN46@unz64local

; 457  :         return CENTRALDIRINVALID;
; 458  : 
; 459  :     /* total number of disks */
; 460  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001b4	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001b9	48 8b d6	 mov	 rdx, rsi
  001bc	48 8b cf	 mov	 rcx, rdi
  001bf	e8 00 00 00 00	 call	 unz64local_getLong
  001c4	85 c0		 test	 eax, eax
  001c6	75 42		 jne	 SHORT $LN46@unz64local

; 461  :         return CENTRALDIRINVALID;
; 462  :     if (uL != 1)

  001c8	83 7c 24 70 01	 cmp	 DWORD PTR uL$[rsp], 1
  001cd	75 3b		 jne	 SHORT $LN46@unz64local

; 463  :         return CENTRALDIRINVALID;
; 464  : 
; 465  :     /* Goto end of central directory record */
; 466  :     if (ZSEEK64(*pzlib_filefunc_def,filestream, relativeOffset,ZLIB_FILEFUNC_SEEK_SET)!=0)

  001cf	48 8b 5c 24 78	 mov	 rbx, QWORD PTR relativeOffset$[rsp]
  001d4	45 33 c9	 xor	 r9d, r9d
  001d7	4c 8b c3	 mov	 r8, rbx
  001da	48 8b d6	 mov	 rdx, rsi
  001dd	48 8b cf	 mov	 rcx, rdi
  001e0	e8 00 00 00 00	 call	 call_zseek64
  001e5	85 c0		 test	 eax, eax
  001e7	75 21		 jne	 SHORT $LN46@unz64local

; 467  :         return CENTRALDIRINVALID;
; 468  : 
; 469  :      /* the signature */
; 470  :     if (unz64local_getLong(pzlib_filefunc_def,filestream,&uL)!=UNZ_OK)

  001e9	4c 8d 44 24 70	 lea	 r8, QWORD PTR uL$[rsp]
  001ee	48 8b d6	 mov	 rdx, rsi
  001f1	48 8b cf	 mov	 rcx, rdi
  001f4	e8 00 00 00 00	 call	 unz64local_getLong
  001f9	85 c0		 test	 eax, eax
  001fb	75 0d		 jne	 SHORT $LN46@unz64local

; 471  :         return CENTRALDIRINVALID;
; 472  : 
; 473  :     if (uL != 0x06064b50)

  001fd	81 7c 24 70 50
	4b 06 06	 cmp	 DWORD PTR uL$[rsp], 101075792 ; 06064b50H

; 475  : 
; 476  :     return relativeOffset;

  00205	48 8b c3	 mov	 rax, rbx
  00208	74 07		 je	 SHORT $LN1@unz64local
$LN46@unz64local:

; 474  :         return CENTRALDIRINVALID;

  0020a	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LN1@unz64local:

; 477  : }

  00211	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00215	41 5f		 pop	 r15
  00217	41 5e		 pop	 r14
  00219	5f		 pop	 rdi
  0021a	5e		 pop	 rsi
  0021b	5d		 pop	 rbp
  0021c	5b		 pop	 rbx
  0021d	c3		 ret	 0
unz64local_SearchCentralDir64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpenInternal
_TEXT	SEGMENT
number_disk_with_CD$ = 32
number_disk$ = 36
us$ = 48
path$ = 416
pzlib_filefunc64_32_def$ = 424
is64bitOpenFunction$ = 432
uL$ = 440
uL64$1 = 440
uS$2 = 440
number_entry_CD$ = 440
unzOpenInternal PROC					; COMDAT

; 490  :                               int is64bitOpenFunction) {

  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	41 54		 push	 r12
  00005	48 8d 6c 24 80	 lea	 rbp, QWORD PTR [rsp-128]
  0000a	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H

; 491  :     unz64_s us;
; 492  :     unz64_s *s;
; 493  :     ZPOS64_T central_pos;
; 494  :     uLong   uL;
; 495  : 
; 496  :     uLong number_disk;          /* number of the current disk, used for
; 497  :                                    spanning ZIP, unsupported, always 0*/
; 498  :     uLong number_disk_with_CD;  /* number the disk with central dir, used
; 499  :                                    for spanning ZIP, unsupported, always 0*/
; 500  :     ZPOS64_T number_entry_CD;      /* total number of entries in
; 501  :                                    the central dir
; 502  :                                    (same than number_entry on nospan) */
; 503  : 
; 504  :     int err=UNZ_OK;
; 505  : 
; 506  :     if (unz_copyright[0]!=' ')
; 507  :         return NULL;
; 508  : 
; 509  :     us.z_filefunc.zseek32_file = NULL;

  00011	45 33 e4	 xor	 r12d, r12d
  00014	4c 8b c9	 mov	 r9, rcx
  00017	4c 89 65 80	 mov	 QWORD PTR us$[rbp-176], r12

; 510  :     us.z_filefunc.ztell32_file = NULL;

  0001b	4c 89 64 24 78	 mov	 QWORD PTR us$[rsp+72], r12

; 511  :     if (pzlib_filefunc64_32_def==NULL)

  00020	48 85 d2	 test	 rdx, rdx
  00023	75 0c		 jne	 SHORT $LN3@unzOpenInt

; 512  :         fill_fopen64_filefunc(&us.z_filefunc.zfile_func64);

  00025	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0002a	e8 00 00 00 00	 call	 fill_fopen64_filefunc
  0002f	eb 36		 jmp	 SHORT $LN4@unzOpenInt
$LN3@unzOpenInt:

; 513  :     else
; 514  :         us.z_filefunc = *pzlib_filefunc64_32_def;

  00031	0f 28 02	 movaps	 xmm0, XMMWORD PTR [rdx]
  00034	0f 28 4a 10	 movaps	 xmm1, XMMWORD PTR [rdx+16]
  00038	0f 29 44 24 30	 movaps	 XMMWORD PTR us$[rsp], xmm0
  0003d	0f 28 42 20	 movaps	 xmm0, XMMWORD PTR [rdx+32]
  00041	0f 29 4c 24 40	 movaps	 XMMWORD PTR us$[rsp+16], xmm1
  00046	0f 28 4a 30	 movaps	 xmm1, XMMWORD PTR [rdx+48]
  0004a	0f 29 44 24 50	 movaps	 XMMWORD PTR us$[rsp+32], xmm0
  0004f	0f 28 42 40	 movaps	 xmm0, XMMWORD PTR [rdx+64]
  00053	0f 29 4c 24 60	 movaps	 XMMWORD PTR us$[rsp+48], xmm1
  00058	f2 0f 10 4a 50	 movsd	 xmm1, QWORD PTR [rdx+80]
  0005d	0f 29 44 24 70	 movaps	 XMMWORD PTR us$[rsp+64], xmm0
  00062	f2 0f 11 4d 80	 movsd	 QWORD PTR us$[rbp-176], xmm1
$LN4@unzOpenInt:

; 515  :     us.is64bitOpenFunction = is64bitOpenFunction;

  00067	44 89 45 88	 mov	 DWORD PTR us$[rbp-168], r8d

; 516  : 
; 517  : 
; 518  : 
; 519  :     us.filestream = ZOPEN64(us.z_filefunc,

  0006b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00070	41 b8 05 00 00
	00		 mov	 r8d, 5
  00076	49 8b d1	 mov	 rdx, r9
  00079	e8 00 00 00 00	 call	 call_zopen64
  0007e	48 89 45 90	 mov	 QWORD PTR us$[rbp-160], rax
  00082	48 8b f0	 mov	 rsi, rax
  00085	48 85 c0	 test	 rax, rax

; 520  :                                                  path,
; 521  :                                                  ZLIB_FILEFUNC_MODE_READ |
; 522  :                                                  ZLIB_FILEFUNC_MODE_EXISTING);
; 523  :     if (us.filestream==NULL)

  00088	75 0c		 jne	 SHORT $LN5@unzOpenInt

; 665  : }

  0008a	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  00091	41 5c		 pop	 r12
  00093	5e		 pop	 rsi
  00094	5d		 pop	 rbp
  00095	c3		 ret	 0
$LN5@unzOpenInt:
  00096	48 89 9c 24 a0
	01 00 00	 mov	 QWORD PTR [rsp+416], rbx

; 524  :         return NULL;
; 525  : 
; 526  :     central_pos = unz64local_SearchCentralDir64(&us.z_filefunc,us.filestream);

  0009e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000a3	48 89 bc 24 a8
	01 00 00	 mov	 QWORD PTR [rsp+424], rdi
  000ab	48 8b d6	 mov	 rdx, rsi
  000ae	4c 89 b4 24 78
	01 00 00	 mov	 QWORD PTR [rsp+376], r14
  000b6	4c 89 bc 24 70
	01 00 00	 mov	 QWORD PTR [rsp+368], r15
  000be	e8 00 00 00 00	 call	 unz64local_SearchCentralDir64

; 527  :     if (central_pos!=CENTRALDIRINVALID)

  000c3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000c8	4c 8b f8	 mov	 r15, rax
  000cb	48 8b d6	 mov	 rdx, rsi
  000ce	48 83 f8 ff	 cmp	 rax, -1
  000d2	0f 84 3b 01 00
	00		 je	 $LN6@unzOpenInt

; 528  :     {
; 529  :         uLong uS;
; 530  :         ZPOS64_T uL64;
; 531  : 
; 532  :         us.isZip64 = 1;
; 533  : 
; 534  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 535  :                                       central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  000d8	45 33 c9	 xor	 r9d, r9d
  000db	c7 45 4c 01 00
	00 00		 mov	 DWORD PTR us$[rbp+28], 1
  000e2	4c 8b c0	 mov	 r8, rax
  000e5	e8 00 00 00 00	 call	 call_zseek64

; 536  :         err=UNZ_ERRNO;
; 537  : 
; 538  :         /* the signature, already checked */
; 539  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  000ea	f7 d8		 neg	 eax
  000ec	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  000f3	48 8b d6	 mov	 rdx, rsi
  000f6	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  000fb	1b ff		 sbb	 edi, edi
  000fd	e8 00 00 00 00	 call	 unz64local_getLong
  00102	85 c0		 test	 eax, eax

; 540  :             err=UNZ_ERRNO;
; 541  : 
; 542  :         /* size of zip64 end of central directory record */
; 543  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&uL64)!=UNZ_OK)

  00104	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL64$1[rbp-256]
  0010b	41 be ff ff ff
	ff		 mov	 r14d, -1
  00111	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00116	48 8b d6	 mov	 rdx, rsi
  00119	41 0f 45 fe	 cmovne	 edi, r14d
  0011d	e8 00 00 00 00	 call	 unz64local_getLong64
  00122	85 c0		 test	 eax, eax

; 544  :             err=UNZ_ERRNO;
; 545  : 
; 546  :         /* version made by */
; 547  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  00124	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uS$2[rbp-256]
  0012b	48 8b d6	 mov	 rdx, rsi
  0012e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00133	41 0f 45 fe	 cmovne	 edi, r14d
  00137	e8 00 00 00 00	 call	 unz64local_getShort
  0013c	85 c0		 test	 eax, eax

; 548  :             err=UNZ_ERRNO;
; 549  : 
; 550  :         /* version needed to extract */
; 551  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uS)!=UNZ_OK)

  0013e	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uS$2[rbp-256]
  00145	48 8b d6	 mov	 rdx, rsi
  00148	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0014d	41 0f 45 fe	 cmovne	 edi, r14d
  00151	e8 00 00 00 00	 call	 unz64local_getShort
  00156	85 c0		 test	 eax, eax

; 552  :             err=UNZ_ERRNO;
; 553  : 
; 554  :         /* number of this disk */
; 555  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  00158	4c 8d 44 24 24	 lea	 r8, QWORD PTR number_disk$[rsp]
  0015d	48 8b d6	 mov	 rdx, rsi
  00160	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00165	41 0f 45 fe	 cmovne	 edi, r14d
  00169	e8 00 00 00 00	 call	 unz64local_getLong
  0016e	85 c0		 test	 eax, eax

; 556  :             err=UNZ_ERRNO;
; 557  : 
; 558  :         /* number of the disk with the start of the central directory */
; 559  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00170	4c 8d 44 24 20	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  00175	48 8b d6	 mov	 rdx, rsi
  00178	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0017d	41 0f 45 fe	 cmovne	 edi, r14d
  00181	e8 00 00 00 00	 call	 unz64local_getLong
  00186	85 c0		 test	 eax, eax

; 560  :             err=UNZ_ERRNO;
; 561  : 
; 562  :         /* total number of entries in the central directory on this disk */
; 563  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.gi.number_entry)!=UNZ_OK)

  00188	4c 8d 45 98	 lea	 r8, QWORD PTR us$[rbp-152]
  0018c	48 8b d6	 mov	 rdx, rsi
  0018f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00194	41 0f 45 fe	 cmovne	 edi, r14d
  00198	e8 00 00 00 00	 call	 unz64local_getLong64

; 564  :             err=UNZ_ERRNO;
; 565  : 
; 566  :         /* total number of entries in the central directory */
; 567  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&number_entry_CD)!=UNZ_OK)

  0019d	48 8b 5d 90	 mov	 rbx, QWORD PTR us$[rbp-160]
  001a1	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR number_entry_CD$[rbp-256]
  001a8	85 c0		 test	 eax, eax
  001aa	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001af	48 8b d3	 mov	 rdx, rbx
  001b2	41 0f 45 fe	 cmovne	 edi, r14d
  001b6	e8 00 00 00 00	 call	 unz64local_getLong64
  001bb	85 c0		 test	 eax, eax

; 568  :             err=UNZ_ERRNO;
; 569  : 
; 570  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 571  :             (number_disk_with_CD!=0) ||

  001bd	48 8b 45 98	 mov	 rax, QWORD PTR us$[rbp-152]
  001c1	41 0f 45 fe	 cmovne	 edi, r14d
  001c5	48 39 85 b8 00
	00 00		 cmp	 QWORD PTR number_entry_CD$[rbp-256], rax
  001cc	75 0e		 jne	 SHORT $LN18@unzOpenInt
  001ce	44 39 64 24 20	 cmp	 DWORD PTR number_disk_with_CD$[rsp], r12d
  001d3	75 07		 jne	 SHORT $LN18@unzOpenInt
  001d5	44 39 64 24 24	 cmp	 DWORD PTR number_disk$[rsp], r12d
  001da	74 05		 je	 SHORT $LN17@unzOpenInt
$LN18@unzOpenInt:

; 572  :             (number_disk!=0))
; 573  :             err=UNZ_BADZIPFILE;

  001dc	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN17@unzOpenInt:

; 574  : 
; 575  :         /* size of the central directory */
; 576  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.size_central_dir)!=UNZ_OK)

  001e1	4c 8d 45 d0	 lea	 r8, QWORD PTR us$[rbp-96]
  001e5	48 8b d3	 mov	 rdx, rbx
  001e8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  001ed	e8 00 00 00 00	 call	 unz64local_getLong64

; 577  :             err=UNZ_ERRNO;
; 578  : 
; 579  :         /* offset of start of central directory with respect to the
; 580  :           starting disk number */
; 581  :         if (unz64local_getLong64(&us.z_filefunc, us.filestream,&us.offset_central_dir)!=UNZ_OK)

  001f2	48 8b 55 90	 mov	 rdx, QWORD PTR us$[rbp-160]
  001f6	4c 8d 45 d8	 lea	 r8, QWORD PTR us$[rbp-88]
  001fa	85 c0		 test	 eax, eax
  001fc	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00201	41 0f 45 fe	 cmovne	 edi, r14d
  00205	e8 00 00 00 00	 call	 unz64local_getLong64

; 582  :             err=UNZ_ERRNO;
; 583  : 
; 584  :         us.gi.size_comment = 0;

  0020a	44 89 65 a0	 mov	 DWORD PTR us$[rbp-144], r12d

; 585  :     }

  0020e	e9 37 01 00 00	 jmp	 $LN53@unzOpenInt
$LN6@unzOpenInt:

; 586  :     else
; 587  :     {
; 588  :         central_pos = unz64local_SearchCentralDir(&us.z_filefunc,us.filestream);

  00213	e8 00 00 00 00	 call	 unz64local_SearchCentralDir

; 589  :         if (central_pos==CENTRALDIRINVALID)
; 590  :             err=UNZ_ERRNO;
; 591  : 
; 592  :         us.isZip64 = 0;

  00218	48 83 f8 ff	 cmp	 rax, -1
  0021c	44 89 65 4c	 mov	 DWORD PTR us$[rbp+28], r12d
  00220	41 8b fc	 mov	 edi, r12d

; 593  : 
; 594  :         if (ZSEEK64(us.z_filefunc, us.filestream,
; 595  :                                         central_pos,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00223	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00228	40 0f 95 c7	 setne	 dil
  0022c	4c 8b c0	 mov	 r8, rax
  0022f	45 33 c9	 xor	 r9d, r9d
  00232	48 8b d6	 mov	 rdx, rsi
  00235	ff cf		 dec	 edi
  00237	4c 8b f8	 mov	 r15, rax
  0023a	e8 00 00 00 00	 call	 call_zseek64
  0023f	85 c0		 test	 eax, eax

; 596  :             err=UNZ_ERRNO;
; 597  : 
; 598  :         /* the signature, already checked */
; 599  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00241	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  00248	41 be ff ff ff
	ff		 mov	 r14d, -1
  0024e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00253	48 8b d6	 mov	 rdx, rsi
  00256	41 0f 45 fe	 cmovne	 edi, r14d
  0025a	e8 00 00 00 00	 call	 unz64local_getLong
  0025f	85 c0		 test	 eax, eax

; 600  :             err=UNZ_ERRNO;
; 601  : 
; 602  :         /* number of this disk */
; 603  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk)!=UNZ_OK)

  00261	4c 8d 44 24 24	 lea	 r8, QWORD PTR number_disk$[rsp]
  00266	48 8b d6	 mov	 rdx, rsi
  00269	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0026e	41 0f 45 fe	 cmovne	 edi, r14d
  00272	e8 00 00 00 00	 call	 unz64local_getShort
  00277	85 c0		 test	 eax, eax

; 604  :             err=UNZ_ERRNO;
; 605  : 
; 606  :         /* number of the disk with the start of the central directory */
; 607  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&number_disk_with_CD)!=UNZ_OK)

  00279	4c 8d 44 24 20	 lea	 r8, QWORD PTR number_disk_with_CD$[rsp]
  0027e	48 8b d6	 mov	 rdx, rsi
  00281	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00286	41 0f 45 fe	 cmovne	 edi, r14d
  0028a	e8 00 00 00 00	 call	 unz64local_getShort
  0028f	85 c0		 test	 eax, eax

; 608  :             err=UNZ_ERRNO;
; 609  : 
; 610  :         /* total number of entries in the central dir on this disk */
; 611  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00291	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  00298	48 8b d6	 mov	 rdx, rsi
  0029b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  002a0	41 0f 45 fe	 cmovne	 edi, r14d
  002a4	e8 00 00 00 00	 call	 unz64local_getShort

; 612  :             err=UNZ_ERRNO;
; 613  :         us.gi.number_entry = uL;

  002a9	8b 9d b8 00 00
	00		 mov	 ebx, DWORD PTR uL$[rbp-256]

; 614  : 
; 615  :         /* total number of entries in the central dir */
; 616  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002af	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  002b6	85 c0		 test	 eax, eax
  002b8	48 89 5d 98	 mov	 QWORD PTR us$[rbp-152], rbx
  002bc	48 8b d6	 mov	 rdx, rsi
  002bf	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  002c4	41 0f 45 fe	 cmovne	 edi, r14d
  002c8	e8 00 00 00 00	 call	 unz64local_getShort
  002cd	85 c0		 test	 eax, eax

; 617  :             err=UNZ_ERRNO;
; 618  :         number_entry_CD = uL;

  002cf	8b 85 b8 00 00
	00		 mov	 eax, DWORD PTR uL$[rbp-256]
  002d5	41 0f 45 fe	 cmovne	 edi, r14d
  002d9	48 3b c3	 cmp	 rax, rbx

; 619  : 
; 620  :         if ((number_entry_CD!=us.gi.number_entry) ||
; 621  :             (number_disk_with_CD!=0) ||

  002dc	75 0e		 jne	 SHORT $LN29@unzOpenInt
  002de	44 39 64 24 20	 cmp	 DWORD PTR number_disk_with_CD$[rsp], r12d
  002e3	75 07		 jne	 SHORT $LN29@unzOpenInt
  002e5	44 39 64 24 24	 cmp	 DWORD PTR number_disk$[rsp], r12d
  002ea	74 05		 je	 SHORT $LN28@unzOpenInt
$LN29@unzOpenInt:

; 622  :             (number_disk!=0))
; 623  :             err=UNZ_BADZIPFILE;

  002ec	bf 99 ff ff ff	 mov	 edi, -103		; ffffffffffffff99H
$LN28@unzOpenInt:

; 624  : 
; 625  :         /* size of the central directory */
; 626  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  002f1	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  002f8	48 8b d6	 mov	 rdx, rsi
  002fb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00300	e8 00 00 00 00	 call	 unz64local_getLong
  00305	85 c0		 test	 eax, eax

; 627  :             err=UNZ_ERRNO;
; 628  :         us.size_central_dir = uL;
; 629  : 
; 630  :         /* offset of start of central directory with respect to the
; 631  :             starting disk number */
; 632  :         if (unz64local_getLong(&us.z_filefunc, us.filestream,&uL)!=UNZ_OK)

  00307	4c 8d 85 b8 00
	00 00		 lea	 r8, QWORD PTR uL$[rbp-256]
  0030e	8b 85 b8 00 00
	00		 mov	 eax, DWORD PTR uL$[rbp-256]
  00314	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  00319	48 8b d6	 mov	 rdx, rsi
  0031c	48 89 45 d0	 mov	 QWORD PTR us$[rbp-96], rax
  00320	41 0f 45 fe	 cmovne	 edi, r14d
  00324	e8 00 00 00 00	 call	 unz64local_getLong
  00329	85 c0		 test	 eax, eax

; 633  :             err=UNZ_ERRNO;
; 634  :         us.offset_central_dir = uL;
; 635  : 
; 636  :         /* zipfile comment length */
; 637  :         if (unz64local_getShort(&us.z_filefunc, us.filestream,&us.gi.size_comment)!=UNZ_OK)

  0032b	4c 8d 45 a0	 lea	 r8, QWORD PTR us$[rbp-144]
  0032f	8b 85 b8 00 00
	00		 mov	 eax, DWORD PTR uL$[rbp-256]
  00335	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  0033a	48 8b d6	 mov	 rdx, rsi
  0033d	48 89 45 d8	 mov	 QWORD PTR us$[rbp-88], rax
  00341	41 0f 45 fe	 cmovne	 edi, r14d
  00345	e8 00 00 00 00	 call	 unz64local_getShort
$LN53@unzOpenInt:

; 638  :             err=UNZ_ERRNO;
; 639  :     }
; 640  : 
; 641  :     if ((central_pos<us.offset_central_dir+us.size_central_dir) &&

  0034a	48 8b 4d d8	 mov	 rcx, QWORD PTR us$[rbp-88]
  0034e	85 c0		 test	 eax, eax
  00350	48 8b 55 d0	 mov	 rdx, QWORD PTR us$[rbp-96]
  00354	41 0f 45 fe	 cmovne	 edi, r14d
  00358	4c 8b b4 24 78
	01 00 00	 mov	 r14, QWORD PTR [rsp+376]
  00360	48 8d 04 11	 lea	 rax, QWORD PTR [rcx+rdx]
  00364	4c 3b f8	 cmp	 r15, rax
  00367	0f 82 d1 00 00
	00		 jb	 $LN37@unzOpenInt

; 642  :         (err==UNZ_OK))
; 643  :         err=UNZ_BADZIPFILE;
; 644  : 
; 645  :     if (err!=UNZ_OK)

  0036d	85 ff		 test	 edi, edi
  0036f	0f 85 c9 00 00
	00		 jne	 $LN37@unzOpenInt

; 649  :     }
; 650  : 
; 651  :     us.byte_before_the_zipfile = central_pos -

  00375	49 8b c7	 mov	 rax, r15

; 652  :                             (us.offset_central_dir+us.size_central_dir);
; 653  :     us.central_pos = central_pos;

  00378	4c 89 7d c8	 mov	 QWORD PTR us$[rbp-104], r15
  0037c	48 2b c1	 sub	 rax, rcx

; 654  :     us.pfile_in_zip_read = NULL;

  0037f	4c 89 65 40	 mov	 QWORD PTR us$[rbp+16], r12
  00383	48 2b c2	 sub	 rax, rdx

; 655  :     us.encrypted = 0;

  00386	44 89 65 48	 mov	 DWORD PTR us$[rbp+24], r12d

; 656  : 
; 657  : 
; 658  :     s=(unz64_s*)ALLOC(sizeof(unz64_s));

  0038a	b9 38 01 00 00	 mov	 ecx, 312		; 00000138H
  0038f	48 89 45 a8	 mov	 QWORD PTR us$[rbp-136], rax
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00399	48 8b d8	 mov	 rbx, rax

; 659  :     if( s != NULL)

  0039c	48 85 c0	 test	 rax, rax
  0039f	0f 84 94 00 00
	00		 je	 $LN35@unzOpenInt

; 660  :     {
; 661  :         *s=us;

  003a5	48 8b d0	 mov	 rdx, rax
  003a8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR us$[rsp]
  003ad	41 b8 02 00 00
	00		 mov	 r8d, 2
  003b3	0f 1f 40 00 66
	0f 1f 84 00 00
	00 00 00	 npad	 13
$LL38@unzOpenInt:
  003c0	48 8d 92 80 00
	00 00		 lea	 rdx, QWORD PTR [rdx+128]
  003c7	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  003ca	0f 10 49 10	 movups	 xmm1, XMMWORD PTR [rcx+16]
  003ce	48 8d 89 80 00
	00 00		 lea	 rcx, QWORD PTR [rcx+128]
  003d5	0f 11 42 80	 movups	 XMMWORD PTR [rdx-128], xmm0
  003d9	0f 10 41 a0	 movups	 xmm0, XMMWORD PTR [rcx-96]
  003dd	0f 11 4a 90	 movups	 XMMWORD PTR [rdx-112], xmm1
  003e1	0f 10 49 b0	 movups	 xmm1, XMMWORD PTR [rcx-80]
  003e5	0f 11 42 a0	 movups	 XMMWORD PTR [rdx-96], xmm0
  003e9	0f 10 41 c0	 movups	 xmm0, XMMWORD PTR [rcx-64]
  003ed	0f 11 4a b0	 movups	 XMMWORD PTR [rdx-80], xmm1
  003f1	0f 10 49 d0	 movups	 xmm1, XMMWORD PTR [rcx-48]
  003f5	0f 11 42 c0	 movups	 XMMWORD PTR [rdx-64], xmm0
  003f9	0f 10 41 e0	 movups	 xmm0, XMMWORD PTR [rcx-32]
  003fd	0f 11 4a d0	 movups	 XMMWORD PTR [rdx-48], xmm1
  00401	0f 10 49 f0	 movups	 xmm1, XMMWORD PTR [rcx-16]
  00405	0f 11 42 e0	 movups	 XMMWORD PTR [rdx-32], xmm0
  00409	0f 11 4a f0	 movups	 XMMWORD PTR [rdx-16], xmm1
  0040d	49 83 e8 01	 sub	 r8, 1
  00411	75 ad		 jne	 SHORT $LL38@unzOpenInt
  00413	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  00416	48 8b 41 30	 mov	 rax, QWORD PTR [rcx+48]
  0041a	0f 10 49 10	 movups	 xmm1, XMMWORD PTR [rcx+16]
  0041e	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0
  00421	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [rcx+32]

; 662  :         unzGoToFirstFile((unzFile)s);

  00425	48 8b cb	 mov	 rcx, rbx
  00428	0f 11 4a 10	 movups	 XMMWORD PTR [rdx+16], xmm1
  0042c	0f 11 42 20	 movups	 XMMWORD PTR [rdx+32], xmm0
  00430	48 89 42 30	 mov	 QWORD PTR [rdx+48], rax
  00434	e8 00 00 00 00	 call	 unzGoToFirstFile
$LN35@unzOpenInt:

; 663  :     }
; 664  :     return (unzFile)s;

  00439	48 8b c3	 mov	 rax, rbx
  0043c	eb 0f		 jmp	 SHORT $LN52@unzOpenInt
$LN37@unzOpenInt:

; 646  :     {
; 647  :         ZCLOSE64(us.z_filefunc, us.filestream);

  0043e	48 8b 55 90	 mov	 rdx, QWORD PTR us$[rbp-160]
  00442	48 8b 4c 24 68	 mov	 rcx, QWORD PTR us$[rsp+56]
  00447	ff 54 24 58	 call	 QWORD PTR us$[rsp+40]

; 648  :         return NULL;

  0044b	33 c0		 xor	 eax, eax
$LN52@unzOpenInt:
  0044d	48 8b bc 24 a8
	01 00 00	 mov	 rdi, QWORD PTR [rsp+424]
  00455	48 8b 9c 24 a0
	01 00 00	 mov	 rbx, QWORD PTR [rsp+416]
  0045d	4c 8b bc 24 70
	01 00 00	 mov	 r15, QWORD PTR [rsp+368]

; 665  : }

  00465	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  0046c	41 5c		 pop	 r12
  0046e	5e		 pop	 rsi
  0046f	5d		 pop	 rbp
  00470	c3		 ret	 0
unzOpenInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpen2
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
path$ = 144
pzlib_filefunc32_def$ = 152
unzOpen2 PROC						; COMDAT

; 669  :                                 zlib_filefunc_def* pzlib_filefunc32_def) {

$LN7:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00007	4c 8b c9	 mov	 r9, rcx

; 670  :     if (pzlib_filefunc32_def != NULL)

  0000a	48 85 d2	 test	 rdx, rdx
  0000d	74 22		 je	 SHORT $LN2@unzOpen2

; 671  :     {
; 672  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 673  :         fill_zlib_filefunc64_32_def_from_filefunc32(&zlib_filefunc64_32_def_fill,pzlib_filefunc32_def);

  0000f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  00014	e8 00 00 00 00	 call	 fill_zlib_filefunc64_32_def_from_filefunc32

; 674  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 0);
; 675  :     }
; 676  :     else
; 677  :         return unzOpenInternal(path, NULL, 0);
; 678  : }

  00019	45 33 c0	 xor	 r8d, r8d
  0001c	48 8d 54 24 20	 lea	 rdx, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  00021	49 8b c9	 mov	 rcx, r9
  00024	e8 00 00 00 00	 call	 unzOpenInternal
  00029	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00030	c3		 ret	 0
$LN2@unzOpen2:
  00031	45 33 c0	 xor	 r8d, r8d
  00034	e8 00 00 00 00	 call	 unzOpenInternal
  00039	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00040	c3		 ret	 0
unzOpen2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpen2_64
_TEXT	SEGMENT
zlib_filefunc64_32_def_fill$1 = 32
path$ = 144
pzlib_filefunc_def$ = 152
unzOpen2_64 PROC					; COMDAT

; 681  :                                    zlib_filefunc64_def* pzlib_filefunc_def) {

$LN7:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 682  :     if (pzlib_filefunc_def != NULL)

  00007	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000d	48 85 d2	 test	 rdx, rdx
  00010	74 41		 je	 SHORT $LN2@unzOpen2_6

; 683  :     {
; 684  :         zlib_filefunc64_32_def zlib_filefunc64_32_def_fill;
; 685  :         zlib_filefunc64_32_def_fill.zfile_func64 = *pzlib_filefunc_def;

  00012	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]

; 686  :         zlib_filefunc64_32_def_fill.ztell32_file = NULL;

  00015	33 c0		 xor	 eax, eax
  00017	0f 10 4a 10	 movups	 xmm1, XMMWORD PTR [rdx+16]
  0001b	48 89 44 24 68	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+72], rax
  00020	0f 29 44 24 20	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp], xmm0
  00025	0f 10 42 20	 movups	 xmm0, XMMWORD PTR [rdx+32]

; 687  :         zlib_filefunc64_32_def_fill.zseek32_file = NULL;

  00029	48 89 44 24 70	 mov	 QWORD PTR zlib_filefunc64_32_def_fill$1[rsp+80], rax
  0002e	0f 29 4c 24 30	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+16], xmm1
  00033	0f 10 4a 30	 movups	 xmm1, XMMWORD PTR [rdx+48]

; 688  :         return unzOpenInternal(path, &zlib_filefunc64_32_def_fill, 1);

  00037	48 8d 54 24 20	 lea	 rdx, QWORD PTR zlib_filefunc64_32_def_fill$1[rsp]
  0003c	0f 29 44 24 40	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+32], xmm0
  00041	0f 29 4c 24 50	 movaps	 XMMWORD PTR zlib_filefunc64_32_def_fill$1[rsp+48], xmm1

; 689  :     }
; 690  :     else
; 691  :         return unzOpenInternal(path, NULL, 1);
; 692  : }

  00046	e8 00 00 00 00	 call	 unzOpenInternal
  0004b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00052	c3		 ret	 0
$LN2@unzOpen2_6:
  00053	e8 00 00 00 00	 call	 unzOpenInternal
  00058	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0005f	c3		 ret	 0
unzOpen2_64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpen
_TEXT	SEGMENT
path$ = 8
unzOpen	PROC						; COMDAT

; 695  :     return unzOpenInternal(path, NULL, 0);

  00000	45 33 c0	 xor	 r8d, r8d
  00003	33 d2		 xor	 edx, edx
  00005	e9 00 00 00 00	 jmp	 unzOpenInternal
unzOpen	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpen64
_TEXT	SEGMENT
path$ = 8
unzOpen64 PROC						; COMDAT

; 699  :     return unzOpenInternal(path, NULL, 1);

  00000	33 d2		 xor	 edx, edx
  00002	41 b8 01 00 00
	00		 mov	 r8d, 1
  00008	e9 00 00 00 00	 jmp	 unzOpenInternal
unzOpen64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzClose
_TEXT	SEGMENT
file$ = 48
unzClose PROC						; COMDAT

; 707  : extern int ZEXPORT unzClose(unzFile file) {

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 708  :     unz64_s* s;
; 709  :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 0b		 jne	 SHORT $LN2@unzClose

; 710  :         return UNZ_PARAMERROR;

  0000e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 719  : }

  00013	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00017	5b		 pop	 rbx
  00018	c3		 ret	 0
$LN2@unzClose:

; 711  :     s=(unz64_s*)file;
; 712  : 
; 713  :     if (s->pfile_in_zip_read!=NULL)

  00019	48 83 b9 10 01
	00 00 00	 cmp	 QWORD PTR [rcx+272], 0
  00021	74 05		 je	 SHORT $LN3@unzClose

; 714  :         unzCloseCurrentFile(file);

  00023	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN3@unzClose:

; 715  : 
; 716  :     ZCLOSE64(s->z_filefunc, s->filestream);

  00028	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  0002c	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00030	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00034	ff d0		 call	 rax

; 717  :     free(s);

  00036	48 8b cb	 mov	 rcx, rbx
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 718  :     return UNZ_OK;

  0003f	33 c0		 xor	 eax, eax

; 719  : }

  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5b		 pop	 rbx
  00046	c3		 ret	 0
unzClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetGlobalInfo64
_TEXT	SEGMENT
file$ = 8
pglobal_info$ = 16
unzGetGlobalInfo64 PROC					; COMDAT

; 727  :     unz64_s* s;
; 728  :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 06		 jne	 SHORT $LN2@unzGetGlob

; 729  :         return UNZ_PARAMERROR;

  00005	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 733  : }

  0000a	c3		 ret	 0
$LN2@unzGetGlob:

; 730  :     s=(unz64_s*)file;
; 731  :     *pglobal_info=s->gi;

  0000b	0f 10 41 68	 movups	 xmm0, XMMWORD PTR [rcx+104]

; 732  :     return UNZ_OK;

  0000f	33 c0		 xor	 eax, eax
  00011	0f 11 02	 movups	 XMMWORD PTR [rdx], xmm0

; 733  : }

  00014	c3		 ret	 0
unzGetGlobalInfo64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetGlobalInfo
_TEXT	SEGMENT
file$ = 8
pglobal_info32$ = 16
unzGetGlobalInfo PROC					; COMDAT

; 736  :     unz64_s* s;
; 737  :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	75 06		 jne	 SHORT $LN2@unzGetGlob

; 738  :         return UNZ_PARAMERROR;

  00005	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 744  : }

  0000a	c3		 ret	 0
$LN2@unzGetGlob:

; 739  :     s=(unz64_s*)file;
; 740  :     /* to do : check if number_entry is not truncated */
; 741  :     pglobal_info32->number_entry = (uLong)s->gi.number_entry;

  0000b	8b 41 68	 mov	 eax, DWORD PTR [rcx+104]
  0000e	89 02		 mov	 DWORD PTR [rdx], eax

; 742  :     pglobal_info32->size_comment = s->gi.size_comment;

  00010	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00013	89 42 04	 mov	 DWORD PTR [rdx+4], eax

; 743  :     return UNZ_OK;

  00016	33 c0		 xor	 eax, eax

; 744  : }

  00018	c3		 ret	 0
unzGetGlobalInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_DosDateToTmuDate
_TEXT	SEGMENT
ulDosDate$ = 8
ptm$ = 16
unz64local_DosDateToTmuDate PROC			; COMDAT

; 749  :     ZPOS64_T uDate;
; 750  :     uDate = (ZPOS64_T)(ulDosDate>>16);

  00000	4c 8b c1	 mov	 r8, rcx
  00003	49 c1 e8 10	 shr	 r8, 16

; 751  :     ptm->tm_mday = (int)(uDate&0x1f) ;

  00007	41 8b c0	 mov	 eax, r8d
  0000a	83 e0 1f	 and	 eax, 31
  0000d	89 42 0c	 mov	 DWORD PTR [rdx+12], eax

; 752  :     ptm->tm_mon =  (int)((((uDate)&0x1E0)/0x20)-1) ;

  00010	49 8b c0	 mov	 rax, r8
  00013	48 c1 e8 05	 shr	 rax, 5
  00017	83 e0 0f	 and	 eax, 15

; 753  :     ptm->tm_year = (int)(((uDate&0x0FE00)/0x0200)+1980) ;

  0001a	49 c1 e8 09	 shr	 r8, 9
  0001e	ff c8		 dec	 eax
  00020	41 83 e0 7f	 and	 r8d, 127		; 0000007fH
  00024	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00027	41 81 c0 bc 07
	00 00		 add	 r8d, 1980		; 000007bcH

; 754  : 
; 755  :     ptm->tm_hour = (int) ((ulDosDate &0xF800)/0x800);

  0002e	48 8b c1	 mov	 rax, rcx
  00031	44 89 42 14	 mov	 DWORD PTR [rdx+20], r8d
  00035	48 c1 e8 0b	 shr	 rax, 11
  00039	83 e0 1f	 and	 eax, 31
  0003c	89 42 08	 mov	 DWORD PTR [rdx+8], eax

; 756  :     ptm->tm_min =  (int) ((ulDosDate&0x7E0)/0x20) ;

  0003f	48 8b c1	 mov	 rax, rcx
  00042	48 c1 e8 05	 shr	 rax, 5

; 757  :     ptm->tm_sec =  (int) (2*(ulDosDate&0x1f)) ;

  00046	83 e1 1f	 and	 ecx, 31
  00049	83 e0 3f	 and	 eax, 63			; 0000003fH
  0004c	03 c9		 add	 ecx, ecx
  0004e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00051	89 0a		 mov	 DWORD PTR [rdx], ecx

; 758  : }

  00053	c3		 ret	 0
unz64local_DosDateToTmuDate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_GetCurrentFileInfoInternal
_TEXT	SEGMENT
headerId$1 = 32
tv575 = 32
dataSize$2 = 36
file_info_internal$ = 40
file_info$ = 48
file$ = 224
uMagic$ = 224
uL$ = 224
lSeek$1$ = 224
uSizeRead$1$ = 224
uSizeRead$1$ = 224
uSizeRead$1$ = 224
pfile_info$ = 232
pfile_info_internal$ = 240
szFileName$ = 248
fileNameBufferSize$ = 256
extraField$ = 264
extraFieldBufferSize$ = 272
szComment$ = 280
commentBufferSize$ = 288
unz64local_GetCurrentFileInfoInternal PROC		; COMDAT

; 772  :                                                 uLong commentBufferSize) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	41 54		 push	 r12
  00013	41 55		 push	 r13
  00015	48 8d 6c 24 e9	 lea	 rbp, QWORD PTR [rsp-23]
  0001a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 773  :     unz64_s* s;
; 774  :     unz_file_info64 file_info;
; 775  :     unz_file_info64_internal file_info_internal;
; 776  :     int err=UNZ_OK;

  00021	45 33 e4	 xor	 r12d, r12d
  00024	4c 8b ea	 mov	 r13, rdx
  00027	48 8b f1	 mov	 rsi, rcx

; 777  :     uLong uMagic;
; 778  :     long lSeek=0;
; 779  :     uLong uL;
; 780  : 
; 781  :     if (file==NULL)

  0002a	48 85 c9	 test	 rcx, rcx
  0002d	75 13		 jne	 SHORT $LN4@unz64local

; 782  :         return UNZ_PARAMERROR;

  0002f	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 996  : }

  00034	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0003b	41 5d		 pop	 r13
  0003d	41 5c		 pop	 r12
  0003f	5e		 pop	 rsi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
$LN4@unz64local:

; 783  :     s=(unz64_s*)file;
; 784  :     if (ZSEEK64(s->z_filefunc, s->filestream,
; 785  :               s->pos_in_central_dir+s->byte_before_the_zipfile,
; 786  :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  00042	4c 8b 81 88 00
	00 00		 mov	 r8, QWORD PTR [rcx+136]
  00049	45 33 c9	 xor	 r9d, r9d
  0004c	4c 03 41 78	 add	 r8, QWORD PTR [rcx+120]
  00050	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00054	48 89 9c 24 b0
	00 00 00	 mov	 QWORD PTR [rsp+176], rbx
  0005c	48 89 bc 24 a8
	00 00 00	 mov	 QWORD PTR [rsp+168], rdi
  00064	4c 89 b4 24 a0
	00 00 00	 mov	 QWORD PTR [rsp+160], r14
  0006c	e8 00 00 00 00	 call	 call_zseek64
  00071	bb ff ff ff ff	 mov	 ebx, -1
  00076	85 c0		 test	 eax, eax
  00078	74 05		 je	 SHORT $LN73@unz64local

; 787  :         err=UNZ_ERRNO;

  0007a	44 8b f3	 mov	 r14d, ebx

; 788  : 
; 789  : 
; 790  :     /* we check the magic */
; 791  :     if (err==UNZ_OK)

  0007d	eb 2c		 jmp	 SHORT $LN9@unz64local
$LN73@unz64local:

; 792  :     {
; 793  :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  0007f	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00083	4c 8d 45 3f	 lea	 r8, QWORD PTR uMagic$[rbp-161]
  00087	48 8b ce	 mov	 rcx, rsi
  0008a	e8 00 00 00 00	 call	 unz64local_getLong
  0008f	85 c0		 test	 eax, eax
  00091	74 05		 je	 SHORT $LN7@unz64local

; 794  :             err=UNZ_ERRNO;

  00093	44 8b f3	 mov	 r14d, ebx
  00096	eb 13		 jmp	 SHORT $LN9@unz64local
$LN7@unz64local:

; 795  :         else if (uMagic!=0x02014b50)

  00098	81 7d 3f 50 4b
	01 02		 cmp	 DWORD PTR uMagic$[rbp-161], 33639248 ; 02014b50H
  0009f	45 8b f4	 mov	 r14d, r12d
  000a2	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H
  000a7	44 0f 45 f0	 cmovne	 r14d, eax
$LN9@unz64local:

; 796  :             err=UNZ_BADZIPFILE;
; 797  :     }
; 798  : 
; 799  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version) != UNZ_OK)

  000ab	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000af	4c 8d 45 8f	 lea	 r8, QWORD PTR file_info$[rbp-161]
  000b3	48 8b ce	 mov	 rcx, rsi
  000b6	4c 89 bc 24 98
	00 00 00	 mov	 QWORD PTR [rsp+152], r15
  000be	e8 00 00 00 00	 call	 unz64local_getShort

; 800  :         err=UNZ_ERRNO;
; 801  : 
; 802  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.version_needed) != UNZ_OK)

  000c3	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000c7	4c 8d 45 93	 lea	 r8, QWORD PTR file_info$[rbp-157]
  000cb	85 c0		 test	 eax, eax
  000cd	48 8b ce	 mov	 rcx, rsi
  000d0	44 0f 45 f3	 cmovne	 r14d, ebx
  000d4	e8 00 00 00 00	 call	 unz64local_getShort

; 803  :         err=UNZ_ERRNO;
; 804  : 
; 805  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.flag) != UNZ_OK)

  000d9	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000dd	4c 8d 45 97	 lea	 r8, QWORD PTR file_info$[rbp-153]
  000e1	85 c0		 test	 eax, eax
  000e3	48 8b ce	 mov	 rcx, rsi
  000e6	44 0f 45 f3	 cmovne	 r14d, ebx
  000ea	e8 00 00 00 00	 call	 unz64local_getShort

; 806  :         err=UNZ_ERRNO;
; 807  : 
; 808  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.compression_method) != UNZ_OK)

  000ef	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  000f3	4c 8d 45 9b	 lea	 r8, QWORD PTR file_info$[rbp-149]
  000f7	85 c0		 test	 eax, eax
  000f9	48 8b ce	 mov	 rcx, rsi
  000fc	44 0f 45 f3	 cmovne	 r14d, ebx
  00100	e8 00 00 00 00	 call	 unz64local_getShort

; 809  :         err=UNZ_ERRNO;
; 810  : 
; 811  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.dosDate) != UNZ_OK)

  00105	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00109	4c 8d 45 9f	 lea	 r8, QWORD PTR file_info$[rbp-145]
  0010d	85 c0		 test	 eax, eax
  0010f	48 8b ce	 mov	 rcx, rsi
  00112	44 0f 45 f3	 cmovne	 r14d, ebx
  00116	e8 00 00 00 00	 call	 unz64local_getLong

; 812  :         err=UNZ_ERRNO;
; 813  : 
; 814  :     unz64local_DosDateToTmuDate(file_info.dosDate,&file_info.tmu_date);

  0011b	8b 4d 9f	 mov	 ecx, DWORD PTR file_info$[rbp-145]
  0011e	48 8d 55 cf	 lea	 rdx, QWORD PTR file_info$[rbp-97]
  00122	85 c0		 test	 eax, eax
  00124	44 0f 45 f3	 cmovne	 r14d, ebx
  00128	e8 00 00 00 00	 call	 unz64local_DosDateToTmuDate

; 815  : 
; 816  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.crc) != UNZ_OK)

  0012d	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00131	4c 8d 45 a3	 lea	 r8, QWORD PTR file_info$[rbp-141]
  00135	48 8b ce	 mov	 rcx, rsi
  00138	e8 00 00 00 00	 call	 unz64local_getLong

; 817  :         err=UNZ_ERRNO;
; 818  : 
; 819  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  0013d	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00141	4c 8d 45 3f	 lea	 r8, QWORD PTR uL$[rbp-161]
  00145	85 c0		 test	 eax, eax
  00147	48 8b ce	 mov	 rcx, rsi
  0014a	44 0f 45 f3	 cmovne	 r14d, ebx
  0014e	e8 00 00 00 00	 call	 unz64local_getLong

; 820  :         err=UNZ_ERRNO;
; 821  :     file_info.compressed_size = uL;
; 822  : 
; 823  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  00153	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00157	4c 8d 45 3f	 lea	 r8, QWORD PTR uL$[rbp-161]
  0015b	85 c0		 test	 eax, eax
  0015d	48 8b ce	 mov	 rcx, rsi
  00160	8b 45 3f	 mov	 eax, DWORD PTR uL$[rbp-161]
  00163	44 0f 45 f3	 cmovne	 r14d, ebx
  00167	48 89 45 a7	 mov	 QWORD PTR file_info$[rbp-137], rax
  0016b	e8 00 00 00 00	 call	 unz64local_getLong

; 824  :         err=UNZ_ERRNO;
; 825  :     file_info.uncompressed_size = uL;
; 826  : 
; 827  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_filename) != UNZ_OK)

  00170	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00174	4c 8d 45 b7	 lea	 r8, QWORD PTR file_info$[rbp-121]
  00178	85 c0		 test	 eax, eax
  0017a	48 8b ce	 mov	 rcx, rsi
  0017d	8b 45 3f	 mov	 eax, DWORD PTR uL$[rbp-161]
  00180	44 0f 45 f3	 cmovne	 r14d, ebx
  00184	48 89 45 af	 mov	 QWORD PTR file_info$[rbp-129], rax
  00188	e8 00 00 00 00	 call	 unz64local_getShort

; 828  :         err=UNZ_ERRNO;
; 829  : 
; 830  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_extra) != UNZ_OK)

  0018d	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00191	4c 8d 45 bb	 lea	 r8, QWORD PTR file_info$[rbp-117]
  00195	85 c0		 test	 eax, eax
  00197	48 8b ce	 mov	 rcx, rsi
  0019a	44 0f 45 f3	 cmovne	 r14d, ebx
  0019e	e8 00 00 00 00	 call	 unz64local_getShort

; 831  :         err=UNZ_ERRNO;
; 832  : 
; 833  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.size_file_comment) != UNZ_OK)

  001a3	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001a7	4c 8d 45 bf	 lea	 r8, QWORD PTR file_info$[rbp-113]
  001ab	85 c0		 test	 eax, eax
  001ad	48 8b ce	 mov	 rcx, rsi
  001b0	44 0f 45 f3	 cmovne	 r14d, ebx
  001b4	e8 00 00 00 00	 call	 unz64local_getShort

; 834  :         err=UNZ_ERRNO;
; 835  : 
; 836  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  001b9	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001bd	4c 8d 45 c3	 lea	 r8, QWORD PTR file_info$[rbp-109]
  001c1	85 c0		 test	 eax, eax
  001c3	48 8b ce	 mov	 rcx, rsi
  001c6	44 0f 45 f3	 cmovne	 r14d, ebx
  001ca	e8 00 00 00 00	 call	 unz64local_getShort
  001cf	85 c0		 test	 eax, eax

; 837  :         err=UNZ_ERRNO;
; 838  : 
; 839  :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&file_info.internal_fa) != UNZ_OK)

  001d1	4c 8d 45 c7	 lea	 r8, QWORD PTR file_info$[rbp-105]
  001d5	44 0f 45 f3	 cmovne	 r14d, ebx
  001d9	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001dd	48 8b ce	 mov	 rcx, rsi
  001e0	e8 00 00 00 00	 call	 unz64local_getShort

; 840  :         err=UNZ_ERRNO;
; 841  : 
; 842  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.external_fa) != UNZ_OK)

  001e5	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001e9	4c 8d 45 cb	 lea	 r8, QWORD PTR file_info$[rbp-101]
  001ed	85 c0		 test	 eax, eax
  001ef	48 8b ce	 mov	 rcx, rsi
  001f2	44 0f 45 f3	 cmovne	 r14d, ebx
  001f6	e8 00 00 00 00	 call	 unz64local_getLong

; 843  :         err=UNZ_ERRNO;
; 844  : 
; 845  :                 // relative offset of local header
; 846  :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uL) != UNZ_OK)

  001fb	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  001ff	4c 8d 45 3f	 lea	 r8, QWORD PTR uL$[rbp-161]
  00203	85 c0		 test	 eax, eax
  00205	48 8b ce	 mov	 rcx, rsi
  00208	44 0f 45 f3	 cmovne	 r14d, ebx
  0020c	e8 00 00 00 00	 call	 unz64local_getLong
  00211	85 c0		 test	 eax, eax
  00213	74 5b		 je	 SHORT $LN24@unz64local

; 847  :         err=UNZ_ERRNO;

  00215	44 8b 7d b7	 mov	 r15d, DWORD PTR file_info$[rbp-121]
  00219	8b fb		 mov	 edi, ebx
  0021b	8b 5d 3f	 mov	 ebx, DWORD PTR uL$[rbp-161]
  0021e	48 89 5d 87	 mov	 QWORD PTR file_info_internal$[rbp-161], rbx
$LN30@unz64local:

; 891  :     else
; 892  :         lSeek += file_info.size_file_extra;

  00222	44 8b 75 bb	 mov	 r14d, DWORD PTR file_info$[rbp-117]
  00226	45 03 fe	 add	 r15d, r14d
$LN31@unz64local:

; 893  : 
; 894  : 
; 895  :     if ((err==UNZ_OK) && (file_info.size_file_extra != 0))

  00229	85 ff		 test	 edi, edi
  0022b	0f 85 37 03 00
	00		 jne	 $LN66@unz64local
  00231	45 85 f6	 test	 r14d, r14d
  00234	0f 84 61 02 00
	00		 je	 $LN75@unz64local

; 896  :     {
; 897  :                                 uLong acc = 0;
; 898  : 
; 899  :         // since lSeek now points to after the extra field we need to move back
; 900  :         lSeek -= file_info.size_file_extra;

  0023a	45 2b fe	 sub	 r15d, r14d
  0023d	44 89 7d 3f	 mov	 DWORD PTR lSeek$1$[rbp-161], r15d

; 901  : 
; 902  :         if (lSeek!=0)

  00241	0f 84 34 01 00
	00		 je	 $LN68@unz64local

; 903  :         {
; 904  :             if (ZSEEK64(s->z_filefunc, s->filestream,(ZPOS64_T)lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  00247	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0024b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00251	4d 63 c7	 movsxd	 r8, r15d
  00254	48 8b ce	 mov	 rcx, rsi
  00257	e8 00 00 00 00	 call	 call_zseek64
  0025c	85 c0		 test	 eax, eax
  0025e	0f 85 12 01 00
	00		 jne	 $LN41@unz64local

; 905  :                 lSeek=0;

  00264	45 8b fc	 mov	 r15d, r12d
  00267	44 89 65 3f	 mov	 DWORD PTR lSeek$1$[rbp-161], r12d
  0026b	e9 0b 01 00 00	 jmp	 $LN68@unz64local
$LN24@unz64local:

; 848  :     file_info_internal.offset_curfile = uL;

  00270	8b 5d 3f	 mov	 ebx, DWORD PTR uL$[rbp-161]

; 849  : 
; 850  :     lSeek+=file_info.size_filename;

  00273	41 8b fe	 mov	 edi, r14d
  00276	44 8b 7d b7	 mov	 r15d, DWORD PTR file_info$[rbp-121]
  0027a	48 89 5d 87	 mov	 QWORD PTR file_info_internal$[rbp-161], rbx

; 851  :     if ((err==UNZ_OK) && (szFileName!=NULL))

  0027e	45 85 f6	 test	 r14d, r14d
  00281	75 9f		 jne	 SHORT $LN30@unz64local
  00283	48 8b 55 57	 mov	 rdx, QWORD PTR szFileName$[rbp-161]
  00287	48 85 d2	 test	 rdx, rdx
  0028a	74 4d		 je	 SHORT $LN74@unz64local

; 852  :     {
; 853  :         uLong uSizeRead ;
; 854  :         if (file_info.size_filename<fileNameBufferSize)

  0028c	8b 45 5f	 mov	 eax, DWORD PTR fileNameBufferSize$[rbp-161]
  0028f	45 8b c7	 mov	 r8d, r15d
  00292	44 3b f8	 cmp	 r15d, eax
  00295	73 09		 jae	 SHORT $LN26@unz64local

; 855  :         {
; 856  :             *(szFileName+file_info.size_filename)='\0';

  00297	45 88 24 17	 mov	 BYTE PTR [r15+rdx], r12b

; 857  :             uSizeRead = file_info.size_filename;

  0029b	41 8b cf	 mov	 ecx, r15d

; 858  :         }

  0029e	eb 02		 jmp	 SHORT $LN118@unz64local
$LN26@unz64local:

; 859  :         else
; 860  :             uSizeRead = fileNameBufferSize;

  002a0	8b c8		 mov	 ecx, eax
$LN118@unz64local:

; 861  : 
; 862  :         if ((file_info.size_filename>0) && (fileNameBufferSize>0))

  002a2	89 4d 3f	 mov	 DWORD PTR uSizeRead$1$[rbp-161], ecx
  002a5	45 85 c0	 test	 r8d, r8d
  002a8	74 2c		 je	 SHORT $LN29@unz64local
  002aa	85 c0		 test	 eax, eax
  002ac	74 28		 je	 SHORT $LN29@unz64local

; 863  :             if (ZREAD64(s->z_filefunc, s->filestream,szFileName,uSizeRead)!=uSizeRead)

  002ae	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  002b2	44 8b c9	 mov	 r9d, ecx
  002b5	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  002b9	4c 8b c2	 mov	 r8, rdx
  002bc	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  002c0	ff d0		 call	 rax
  002c2	8b 4d 3f	 mov	 ecx, DWORD PTR uSizeRead$1$[rbp-161]
  002c5	3b c1		 cmp	 eax, ecx
  002c7	74 0d		 je	 SHORT $LN29@unz64local

; 864  :                 err=UNZ_ERRNO;

  002c9	bf ff ff ff ff	 mov	 edi, -1
  002ce	44 2b f9	 sub	 r15d, ecx
  002d1	e9 4c ff ff ff	 jmp	 $LN30@unz64local
$LN29@unz64local:

; 865  :         lSeek -= uSizeRead;

  002d6	44 2b f9	 sub	 r15d, ecx
$LN74@unz64local:

; 866  :     }
; 867  : 
; 868  :     // Read extrafield
; 869  :     if ((err==UNZ_OK) && (extraField!=NULL))

  002d9	48 8b 55 67	 mov	 rdx, QWORD PTR extraField$[rbp-161]
  002dd	48 85 d2	 test	 rdx, rdx
  002e0	0f 84 3c ff ff
	ff		 je	 $LN30@unz64local

; 870  :     {
; 871  :         ZPOS64_T uSizeRead ;
; 872  :         if (file_info.size_file_extra<extraFieldBufferSize)

  002e6	44 8b 75 bb	 mov	 r14d, DWORD PTR file_info$[rbp-117]
  002ea	8b 4d 6f	 mov	 ecx, DWORD PTR extraFieldBufferSize$[rbp-161]

; 873  :             uSizeRead = file_info.size_file_extra;

  002ed	4c 89 75 3f	 mov	 QWORD PTR uSizeRead$1$[rbp-161], r14
  002f1	44 3b f1	 cmp	 r14d, ecx
  002f4	72 04		 jb	 SHORT $LN33@unz64local

; 874  :         else
; 875  :             uSizeRead = extraFieldBufferSize;

  002f6	48 89 4d 3f	 mov	 QWORD PTR uSizeRead$1$[rbp-161], rcx
$LN33@unz64local:

; 876  : 
; 877  :         if (lSeek!=0)

  002fa	45 85 ff	 test	 r15d, r15d
  002fd	74 2a		 je	 SHORT $LN36@unz64local

; 878  :         {
; 879  :             if (ZSEEK64(s->z_filefunc, s->filestream,(ZPOS64_T)lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  002ff	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00303	41 b9 01 00 00
	00		 mov	 r9d, 1
  00309	4d 63 c7	 movsxd	 r8, r15d
  0030c	48 8b ce	 mov	 rcx, rsi
  0030f	e8 00 00 00 00	 call	 call_zseek64
  00314	8b 4d 6f	 mov	 ecx, DWORD PTR extraFieldBufferSize$[rbp-161]
  00317	48 8b 55 67	 mov	 rdx, QWORD PTR extraField$[rbp-161]
  0031b	85 c0		 test	 eax, eax
  0031d	75 05		 jne	 SHORT $LN35@unz64local

; 880  :                 lSeek=0;

  0031f	45 8b fc	 mov	 r15d, r12d
  00322	eb 05		 jmp	 SHORT $LN36@unz64local
$LN35@unz64local:

; 881  :             else
; 882  :                 err=UNZ_ERRNO;

  00324	bf ff ff ff ff	 mov	 edi, -1
$LN36@unz64local:

; 883  :         }
; 884  : 
; 885  :         if ((file_info.size_file_extra>0) && (extraFieldBufferSize>0))

  00329	45 85 f6	 test	 r14d, r14d
  0032c	74 37		 je	 SHORT $LN80@unz64local
  0032e	85 c9		 test	 ecx, ecx
  00330	74 33		 je	 SHORT $LN80@unz64local

; 886  :             if (ZREAD64(s->z_filefunc, s->filestream,extraField,(uLong)uSizeRead)!=uSizeRead)

  00332	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00336	4c 8b c2	 mov	 r8, rdx
  00339	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0033d	44 8b 4d 3f	 mov	 r9d, DWORD PTR uSizeRead$1$[rbp-161]
  00341	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00345	ff d0		 call	 rax
  00347	48 8b 4d 3f	 mov	 rcx, QWORD PTR uSizeRead$1$[rbp-161]
  0034b	8b c0		 mov	 eax, eax
  0034d	48 3b c1	 cmp	 rax, rcx
  00350	b8 ff ff ff ff	 mov	 eax, -1
  00355	0f 45 f8	 cmovne	 edi, eax

; 887  :                 err=UNZ_ERRNO;
; 888  : 
; 889  :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00358	41 8b c6	 mov	 eax, r14d
  0035b	2b c1		 sub	 eax, ecx
  0035d	44 03 f8	 add	 r15d, eax

; 890  :     }

  00360	e9 c4 fe ff ff	 jmp	 $LN31@unz64local
$LN80@unz64local:

; 887  :                 err=UNZ_ERRNO;
; 888  : 
; 889  :         lSeek += file_info.size_file_extra - (uLong)uSizeRead;

  00365	48 8b 4d 3f	 mov	 rcx, QWORD PTR uSizeRead$1$[rbp-161]
  00369	41 8b c6	 mov	 eax, r14d
  0036c	2b c1		 sub	 eax, ecx
  0036e	44 03 f8	 add	 r15d, eax

; 890  :     }

  00371	e9 b3 fe ff ff	 jmp	 $LN31@unz64local
$LN41@unz64local:

; 906  :             else
; 907  :                 err=UNZ_ERRNO;

  00376	bf ff ff ff ff	 mov	 edi, -1
$LN68@unz64local:

; 908  :         }
; 909  : 
; 910  :         while(acc < file_info.size_file_extra)

  0037b	45 85 f6	 test	 r14d, r14d
  0037e	0f 84 0f 01 00
	00		 je	 $LN3@unz64local
  00384	41 bf ff ff ff
	ff		 mov	 r15d, -1
  0038a	66 0f 1f 44 00
	00		 npad	 6
$LL2@unz64local:

; 911  :         {
; 912  :             uLong headerId;
; 913  :                                                 uLong dataSize;
; 914  : 
; 915  :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&headerId) != UNZ_OK)

  00390	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00394	4c 8d 44 24 20	 lea	 r8, QWORD PTR headerId$1[rsp]
  00399	48 8b ce	 mov	 rcx, rsi
  0039c	e8 00 00 00 00	 call	 unz64local_getShort

; 916  :                 err=UNZ_ERRNO;
; 917  : 
; 918  :             if (unz64local_getShort(&s->z_filefunc, s->filestream,&dataSize) != UNZ_OK)

  003a1	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  003a5	4c 8d 45 83	 lea	 r8, QWORD PTR dataSize$2[rbp-161]
  003a9	85 c0		 test	 eax, eax
  003ab	48 8b ce	 mov	 rcx, rsi
  003ae	41 0f 45 ff	 cmovne	 edi, r15d
  003b2	e8 00 00 00 00	 call	 unz64local_getShort

; 919  :                 err=UNZ_ERRNO;
; 920  : 
; 921  :             /* ZIP64 extra fields */
; 922  :             if (headerId == 0x0001)

  003b7	44 8b 6d 83	 mov	 r13d, DWORD PTR dataSize$2[rbp-161]
  003bb	85 c0		 test	 eax, eax
  003bd	41 0f 45 ff	 cmovne	 edi, r15d
  003c1	83 7c 24 20 01	 cmp	 DWORD PTR headerId$1[rsp], 1
  003c6	0f 85 94 00 00
	00		 jne	 $LN45@unz64local

; 923  :             {
; 924  :                 if(file_info.uncompressed_size == MAXU32)

  003cc	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003d1	48 39 45 af	 cmp	 QWORD PTR file_info$[rbp-129], rax
  003d5	75 1f		 jne	 SHORT $LN48@unz64local

; 925  :                 {
; 926  :                     if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.uncompressed_size) != UNZ_OK)

  003d7	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  003db	4c 8d 45 af	 lea	 r8, QWORD PTR file_info$[rbp-129]
  003df	48 8b ce	 mov	 rcx, rsi
  003e2	e8 00 00 00 00	 call	 unz64local_getLong64
  003e7	44 8b 75 bb	 mov	 r14d, DWORD PTR file_info$[rbp-117]
  003eb	85 c0		 test	 eax, eax
  003ed	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003f2	41 0f 45 ff	 cmovne	 edi, r15d
$LN48@unz64local:

; 927  :                         err=UNZ_ERRNO;
; 928  :                 }
; 929  : 
; 930  :                 if(file_info.compressed_size == MAXU32)

  003f6	48 39 45 a7	 cmp	 QWORD PTR file_info$[rbp-137], rax
  003fa	75 1f		 jne	 SHORT $LN50@unz64local

; 931  :                 {
; 932  :                     if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info.compressed_size) != UNZ_OK)

  003fc	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00400	4c 8d 45 a7	 lea	 r8, QWORD PTR file_info$[rbp-137]
  00404	48 8b ce	 mov	 rcx, rsi
  00407	e8 00 00 00 00	 call	 unz64local_getLong64
  0040c	44 8b 75 bb	 mov	 r14d, DWORD PTR file_info$[rbp-117]
  00410	85 c0		 test	 eax, eax
  00412	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00417	41 0f 45 ff	 cmovne	 edi, r15d
$LN50@unz64local:

; 933  :                         err=UNZ_ERRNO;
; 934  :                 }
; 935  : 
; 936  :                 if(file_info_internal.offset_curfile == MAXU32)

  0041b	48 3b d8	 cmp	 rbx, rax
  0041e	75 1a		 jne	 SHORT $LN52@unz64local

; 937  :                 {
; 938  :                     /* Relative Header offset */
; 939  :                     if (unz64local_getLong64(&s->z_filefunc, s->filestream,&file_info_internal.offset_curfile) != UNZ_OK)

  00420	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00424	4c 8d 45 87	 lea	 r8, QWORD PTR file_info_internal$[rbp-161]
  00428	48 8b ce	 mov	 rcx, rsi
  0042b	e8 00 00 00 00	 call	 unz64local_getLong64
  00430	48 8b 5d 87	 mov	 rbx, QWORD PTR file_info_internal$[rbp-161]
  00434	85 c0		 test	 eax, eax
  00436	41 0f 45 ff	 cmovne	 edi, r15d
$LN52@unz64local:

; 940  :                         err=UNZ_ERRNO;
; 941  :                 }
; 942  : 
; 943  :                 if(file_info.disk_num_start == 0xffff)

  0043a	81 7d c3 ff ff
	00 00		 cmp	 DWORD PTR file_info$[rbp-109], 65535 ; 0000ffffH
  00441	75 38		 jne	 SHORT $LN55@unz64local

; 944  :                 {
; 945  :                     /* Disk Start Number */
; 946  :                     if (unz64local_getLong(&s->z_filefunc, s->filestream,&file_info.disk_num_start) != UNZ_OK)

  00443	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00447	4c 8d 45 c3	 lea	 r8, QWORD PTR file_info$[rbp-109]
  0044b	48 8b ce	 mov	 rcx, rsi
  0044e	e8 00 00 00 00	 call	 unz64local_getLong
  00453	44 8b 75 bb	 mov	 r14d, DWORD PTR file_info$[rbp-117]
  00457	85 c0		 test	 eax, eax
  00459	74 20		 je	 SHORT $LN55@unz64local

; 947  :                         err=UNZ_ERRNO;

  0045b	41 8b ff	 mov	 edi, r15d

; 948  :                 }
; 949  : 
; 950  :             }

  0045e	eb 1b		 jmp	 SHORT $LN55@unz64local
$LN45@unz64local:

; 951  :             else
; 952  :             {
; 953  :                 if (ZSEEK64(s->z_filefunc, s->filestream,dataSize,ZLIB_FILEFUNC_SEEK_CUR)!=0)

  00460	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  00464	4d 8b c5	 mov	 r8, r13
  00467	41 b9 01 00 00
	00		 mov	 r9d, 1
  0046d	48 8b ce	 mov	 rcx, rsi
  00470	e8 00 00 00 00	 call	 call_zseek64
  00475	85 c0		 test	 eax, eax
  00477	41 0f 45 ff	 cmovne	 edi, r15d
$LN55@unz64local:

; 954  :                     err=UNZ_ERRNO;
; 955  :             }
; 956  : 
; 957  :             acc += 2 + 2 + dataSize;

  0047b	41 83 c4 04	 add	 r12d, 4
  0047f	45 03 e5	 add	 r12d, r13d
  00482	45 3b e6	 cmp	 r12d, r14d
  00485	0f 82 05 ff ff
	ff		 jb	 $LL2@unz64local
  0048b	44 8b 7d 3f	 mov	 r15d, DWORD PTR lSeek$1$[rbp-161]
  0048f	4c 8b 6d 47	 mov	 r13, QWORD PTR pfile_info$[rbp-161]
$LN3@unz64local:

; 958  :         }
; 959  :     }
; 960  : 
; 961  :     if ((err==UNZ_OK) && (szComment!=NULL))

  00493	85 ff		 test	 edi, edi
  00495	0f 85 cd 00 00
	00		 jne	 $LN66@unz64local
$LN75@unz64local:
  0049b	48 8b 4d 77	 mov	 rcx, QWORD PTR szComment$[rbp-161]
  0049f	48 85 c9	 test	 rcx, rcx
  004a2	74 7b		 je	 SHORT $LN76@unz64local

; 962  :     {
; 963  :         uLong uSizeRead ;
; 964  :         if (file_info.size_file_comment<commentBufferSize)

  004a4	44 8b 75 bf	 mov	 r14d, DWORD PTR file_info$[rbp-113]
  004a8	44 8b 65 7f	 mov	 r12d, DWORD PTR commentBufferSize$[rbp-161]
  004ac	45 3b f4	 cmp	 r14d, r12d
  004af	73 0b		 jae	 SHORT $LN58@unz64local

; 965  :         {
; 966  :             *(szComment+file_info.size_file_comment)='\0';

  004b1	41 c6 04 0e 00	 mov	 BYTE PTR [r14+rcx], 0

; 967  :             uSizeRead = file_info.size_file_comment;

  004b6	44 89 75 3f	 mov	 DWORD PTR uSizeRead$1$[rbp-161], r14d

; 968  :         }

  004ba	eb 04		 jmp	 SHORT $LN59@unz64local
$LN58@unz64local:

; 969  :         else
; 970  :             uSizeRead = commentBufferSize;

  004bc	44 89 65 3f	 mov	 DWORD PTR uSizeRead$1$[rbp-161], r12d
$LN59@unz64local:

; 971  : 
; 972  :         if (lSeek!=0)

  004c0	45 85 ff	 test	 r15d, r15d
  004c3	74 27		 je	 SHORT $LN81@unz64local

; 973  :         {
; 974  :             if (ZSEEK64(s->z_filefunc, s->filestream,(ZPOS64_T)lSeek,ZLIB_FILEFUNC_SEEK_CUR)==0)

  004c5	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  004c9	41 b9 01 00 00
	00		 mov	 r9d, 1
  004cf	4d 63 c7	 movsxd	 r8, r15d
  004d2	48 8b ce	 mov	 rcx, rsi
  004d5	e8 00 00 00 00	 call	 call_zseek64
  004da	48 8b 4d 77	 mov	 rcx, QWORD PTR szComment$[rbp-161]
  004de	85 c0		 test	 eax, eax
  004e0	41 bf ff ff ff
	ff		 mov	 r15d, -1
  004e6	41 0f 45 ff	 cmovne	 edi, r15d
  004ea	eb 06		 jmp	 SHORT $LN62@unz64local
$LN81@unz64local:

; 971  : 
; 972  :         if (lSeek!=0)

  004ec	41 bf ff ff ff
	ff		 mov	 r15d, -1
$LN62@unz64local:

; 975  :                 lSeek=0;
; 976  :             else
; 977  :                 err=UNZ_ERRNO;
; 978  :         }
; 979  : 
; 980  :         if ((file_info.size_file_comment>0) && (commentBufferSize>0))

  004f2	45 85 f6	 test	 r14d, r14d
  004f5	74 24		 je	 SHORT $LN64@unz64local
  004f7	45 85 e4	 test	 r12d, r12d
  004fa	74 1f		 je	 SHORT $LN64@unz64local

; 981  :             if (ZREAD64(s->z_filefunc, s->filestream,szComment,uSizeRead)!=uSizeRead)

  004fc	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00500	4c 8b c1	 mov	 r8, rcx
  00503	48 8b 4e 38	 mov	 rcx, QWORD PTR [rsi+56]
  00507	44 8b 4d 3f	 mov	 r9d, DWORD PTR uSizeRead$1$[rbp-161]
  0050b	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
  0050f	ff d0		 call	 rax
  00511	3b 45 3f	 cmp	 eax, DWORD PTR uSizeRead$1$[rbp-161]
  00514	74 05		 je	 SHORT $LN64@unz64local

; 982  :                 err=UNZ_ERRNO;

  00516	41 8b ff	 mov	 edi, r15d

; 983  :         lSeek+=file_info.size_file_comment - uSizeRead;
; 984  :     }
; 985  :     else
; 986  :         lSeek+=file_info.size_file_comment;
; 987  : 
; 988  : 
; 989  :     if ((err==UNZ_OK) && (pfile_info!=NULL))

  00519	eb 4d		 jmp	 SHORT $LN66@unz64local
$LN64@unz64local:
  0051b	85 ff		 test	 edi, edi
  0051d	75 49		 jne	 SHORT $LN66@unz64local
$LN76@unz64local:
  0051f	4d 85 ed	 test	 r13, r13
  00522	74 38		 je	 SHORT $LN77@unz64local

; 990  :         *pfile_info=file_info;

  00524	0f 28 45 8f	 movaps	 xmm0, XMMWORD PTR file_info$[rbp-161]
  00528	0f 28 4d 9f	 movaps	 xmm1, XMMWORD PTR file_info$[rbp-145]
  0052c	41 0f 11 45 00	 movups	 XMMWORD PTR [r13], xmm0
  00531	0f 28 45 af	 movaps	 xmm0, XMMWORD PTR file_info$[rbp-129]
  00535	41 0f 11 4d 10	 movups	 XMMWORD PTR [r13+16], xmm1
  0053a	0f 28 4d bf	 movaps	 xmm1, XMMWORD PTR file_info$[rbp-113]
  0053e	41 0f 11 45 20	 movups	 XMMWORD PTR [r13+32], xmm0
  00543	0f 28 45 cf	 movaps	 xmm0, XMMWORD PTR file_info$[rbp-97]
  00547	41 0f 11 4d 30	 movups	 XMMWORD PTR [r13+48], xmm1
  0054c	f2 0f 10 4d df	 movsd	 xmm1, QWORD PTR file_info$[rbp-81]
  00551	41 0f 11 45 40	 movups	 XMMWORD PTR [r13+64], xmm0
  00556	f2 41 0f 11 4d
	50		 movsd	 QWORD PTR [r13+80], xmm1
$LN77@unz64local:

; 991  : 
; 992  :     if ((err==UNZ_OK) && (pfile_info_internal!=NULL))

  0055c	48 8b 45 4f	 mov	 rax, QWORD PTR pfile_info_internal$[rbp-161]
  00560	48 85 c0	 test	 rax, rax
  00563	74 03		 je	 SHORT $LN66@unz64local

; 993  :         *pfile_info_internal=file_info_internal;

  00565	48 89 18	 mov	 QWORD PTR [rax], rbx
$LN66@unz64local:

; 994  : 
; 995  :     return err;

  00568	4c 8b bc 24 98
	00 00 00	 mov	 r15, QWORD PTR [rsp+152]
  00570	8b c7		 mov	 eax, edi
  00572	48 8b bc 24 a8
	00 00 00	 mov	 rdi, QWORD PTR [rsp+168]
  0057a	4c 8b b4 24 a0
	00 00 00	 mov	 r14, QWORD PTR [rsp+160]
  00582	48 8b 9c 24 b0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+176]

; 996  : }

  0058a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00591	41 5d		 pop	 r13
  00593	41 5c		 pop	 r12
  00595	5e		 pop	 rsi
  00596	5d		 pop	 rbp
  00597	c3		 ret	 0
unz64local_GetCurrentFileInfoInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetCurrentFileInfo64
_TEXT	SEGMENT
file$ = 96
pfile_info$ = 104
szFileName$ = 112
fileNameBufferSize$ = 120
extraField$ = 128
extraFieldBufferSize$ = 136
szComment$ = 144
commentBufferSize$ = 152
unzGetCurrentFileInfo64 PROC				; COMDAT

; 1009 :                                            char* szComment,  uLong commentBufferSize) {

$LN4:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1010 :     return unz64local_GetCurrentFileInfoInternal(file,pfile_info,NULL,

  00004	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  0000b	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0000f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  00017	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0001c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00023	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00027	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  0002f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00034	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00039	4d 8b c8	 mov	 r9, r8
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1011 :                                                  szFileName,fileNameBufferSize,
; 1012 :                                                  extraField,extraFieldBufferSize,
; 1013 :                                                  szComment,commentBufferSize);
; 1014 : }

  00044	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00048	c3		 ret	 0
unzGetCurrentFileInfo64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetCurrentFileInfo
_TEXT	SEGMENT
file_info64$ = 80
file$ = 192
pfile_info$ = 200
szFileName$ = 208
fileNameBufferSize$ = 216
extraField$ = 224
extraFieldBufferSize$ = 232
szComment$ = 240
commentBufferSize$ = 248
unzGetCurrentFileInfo PROC				; COMDAT

; 1020 :                                          char* szComment,  uLong commentBufferSize) {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H

; 1021 :     int err;
; 1022 :     unz_file_info64 file_info64;
; 1023 :     err = unz64local_GetCurrentFileInfoInternal(file,&file_info64,NULL,

  00009	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR commentBufferSize$[rsp]
  00010	48 8b da	 mov	 rbx, rdx
  00013	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00017	48 8d 54 24 50	 lea	 rdx, QWORD PTR file_info64$[rsp]
  0001c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR szComment$[rsp]
  00024	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00029	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR extraFieldBufferSize$[rsp]
  00030	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00034	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR extraField$[rsp]
  0003c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00041	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00046	4d 8b c8	 mov	 r9, r8
  00049	45 33 c0	 xor	 r8d, r8d
  0004c	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal
  00051	8b d0		 mov	 edx, eax

; 1024 :                                                 szFileName,fileNameBufferSize,
; 1025 :                                                 extraField,extraFieldBufferSize,
; 1026 :                                                 szComment,commentBufferSize);
; 1027 :     if ((err==UNZ_OK) && (pfile_info != NULL))

  00053	85 c0		 test	 eax, eax
  00055	0f 85 92 00 00
	00		 jne	 $LN2@unzGetCurr
  0005b	48 85 db	 test	 rbx, rbx
  0005e	0f 84 89 00 00
	00		 je	 $LN2@unzGetCurr

; 1028 :     {
; 1029 :         pfile_info->version = file_info64.version;
; 1030 :         pfile_info->version_needed = file_info64.version_needed;
; 1031 :         pfile_info->flag = file_info64.flag;
; 1032 :         pfile_info->compression_method = file_info64.compression_method;
; 1033 :         pfile_info->dosDate = file_info64.dosDate;

  00064	8b 44 24 60	 mov	 eax, DWORD PTR file_info64$[rsp+16]
  00068	8b 4c 24 50	 mov	 ecx, DWORD PTR file_info64$[rsp]

; 1034 :         pfile_info->crc = file_info64.crc;
; 1035 : 
; 1036 :         pfile_info->size_filename = file_info64.size_filename;
; 1037 :         pfile_info->size_file_extra = file_info64.size_file_extra;
; 1038 :         pfile_info->size_file_comment = file_info64.size_file_comment;
; 1039 : 
; 1040 :         pfile_info->disk_num_start = file_info64.disk_num_start;
; 1041 :         pfile_info->internal_fa = file_info64.internal_fa;
; 1042 :         pfile_info->external_fa = file_info64.external_fa;
; 1043 : 
; 1044 :         pfile_info->tmu_date = file_info64.tmu_date;

  0006c	0f 28 84 24 90
	00 00 00	 movaps	 xmm0, XMMWORD PTR file_info64$[rsp+64]
  00074	f2 0f 10 8c 24
	a0 00 00 00	 movsd	 xmm1, QWORD PTR file_info64$[rsp+80]
  0007d	89 43 10	 mov	 DWORD PTR [rbx+16], eax
  00080	8b 44 24 64	 mov	 eax, DWORD PTR file_info64$[rsp+20]
  00084	89 43 14	 mov	 DWORD PTR [rbx+20], eax
  00087	8b 44 24 78	 mov	 eax, DWORD PTR file_info64$[rsp+40]
  0008b	89 43 20	 mov	 DWORD PTR [rbx+32], eax
  0008e	8b 44 24 7c	 mov	 eax, DWORD PTR file_info64$[rsp+44]
  00092	89 43 24	 mov	 DWORD PTR [rbx+36], eax
  00095	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+48]
  0009c	89 43 28	 mov	 DWORD PTR [rbx+40], eax
  0009f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+52]
  000a6	89 43 2c	 mov	 DWORD PTR [rbx+44], eax
  000a9	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+56]
  000b0	89 43 30	 mov	 DWORD PTR [rbx+48], eax
  000b3	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR file_info64$[rsp+60]
  000ba	89 0b		 mov	 DWORD PTR [rbx], ecx
  000bc	8b 4c 24 54	 mov	 ecx, DWORD PTR file_info64$[rsp+4]
  000c0	89 43 34	 mov	 DWORD PTR [rbx+52], eax

; 1045 : 
; 1046 : 
; 1047 :         pfile_info->compressed_size = (uLong)file_info64.compressed_size;

  000c3	8b 44 24 68	 mov	 eax, DWORD PTR file_info64$[rsp+24]
  000c7	89 4b 04	 mov	 DWORD PTR [rbx+4], ecx
  000ca	8b 4c 24 58	 mov	 ecx, DWORD PTR file_info64$[rsp+8]
  000ce	89 43 18	 mov	 DWORD PTR [rbx+24], eax

; 1048 :         pfile_info->uncompressed_size = (uLong)file_info64.uncompressed_size;

  000d1	8b 44 24 70	 mov	 eax, DWORD PTR file_info64$[rsp+32]
  000d5	89 4b 08	 mov	 DWORD PTR [rbx+8], ecx
  000d8	8b 4c 24 5c	 mov	 ecx, DWORD PTR file_info64$[rsp+12]
  000dc	89 43 1c	 mov	 DWORD PTR [rbx+28], eax

; 1049 : 
; 1050 :     }
; 1051 :     return err;

  000df	8b c2		 mov	 eax, edx
  000e1	0f 11 43 38	 movups	 XMMWORD PTR [rbx+56], xmm0
  000e5	89 4b 0c	 mov	 DWORD PTR [rbx+12], ecx
  000e8	f2 0f 11 4b 48	 movsd	 QWORD PTR [rbx+72], xmm1
$LN2@unzGetCurr:

; 1052 : }

  000ed	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000f4	5b		 pop	 rbx
  000f5	c3		 ret	 0
unzGetCurrentFileInfo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGoToFirstFile
_TEXT	SEGMENT
file$ = 96
unzGoToFirstFile PROC					; COMDAT

; 1057 : extern int ZEXPORT unzGoToFirstFile(unzFile file) {

$LN6:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b f9	 mov	 rdi, rcx

; 1058 :     int err=UNZ_OK;
; 1059 :     unz64_s* s;
; 1060 :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 0b		 jne	 SHORT $LN2@unzGoToFir

; 1061 :         return UNZ_PARAMERROR;

  0000e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1070 : }

  00013	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN2@unzGoToFir:

; 1062 :     s=(unz64_s*)file;
; 1063 :     s->pos_in_central_dir=s->offset_central_dir;

  00019	48 8b 81 a8 00
	00 00		 mov	 rax, QWORD PTR [rcx+168]

; 1064 :     s->num_file=0;
; 1065 :     err=unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00020	4c 8d 81 08 01
	00 00		 lea	 r8, QWORD PTR [rcx+264]
  00027	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0002c	48 8d 91 b0 00
	00 00		 lea	 rdx, QWORD PTR [rcx+176]
  00033	33 db		 xor	 ebx, ebx
  00035	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  0003c	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  00040	45 33 c9	 xor	 r9d, r9d
  00043	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  00048	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  0004c	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00051	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00055	48 89 99 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rbx
  0005c	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1066 :                                              &s->cur_file_info_internal,
; 1067 :                                              NULL,0,NULL,0,NULL,0);
; 1068 :     s->current_file_ok = (err == UNZ_OK);

  00061	85 c0		 test	 eax, eax
  00063	0f 94 c3	 sete	 bl
  00066	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx

; 1069 :     return err;

  0006d	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1070 : }

  00072	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
unzGoToFirstFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGoToNextFile
_TEXT	SEGMENT
file$ = 96
unzGoToNextFile PROC					; COMDAT

; 1077 : extern int ZEXPORT unzGoToNextFile(unzFile file) {

$LN16:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b f9	 mov	 rdi, rcx

; 1078 :     unz64_s* s;
; 1079 :     int err;
; 1080 : 
; 1081 :     if (file==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	75 0b		 jne	 SHORT $LN2@unzGoToNex

; 1082 :         return UNZ_PARAMERROR;

  0000e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1098 : }

  00013	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00017	5f		 pop	 rdi
  00018	c3		 ret	 0
$LN2@unzGoToNex:

; 1083 :     s=(unz64_s*)file;
; 1084 :     if (!s->current_file_ok)

  00019	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0
  00021	0f 84 8e 00 00
	00		 je	 $LN10@unzGoToNex

; 1085 :         return UNZ_END_OF_LIST_OF_FILE;
; 1086 :     if (s->gi.number_entry != 0xffff)    /* 2^16 files overflow hack */

  00027	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0002b	48 81 f9 ff ff
	00 00		 cmp	 rcx, 65535		; 0000ffffH
  00032	74 0f		 je	 SHORT $LN9@unzGoToNex

; 1087 :       if (s->num_file+1==s->gi.number_entry)

  00034	48 8b 87 80 00
	00 00		 mov	 rax, QWORD PTR [rdi+128]
  0003b	48 ff c0	 inc	 rax
  0003e	48 3b c1	 cmp	 rax, rcx
  00041	74 72		 je	 SHORT $LN10@unzGoToNex
$LN9@unzGoToNex:

; 1089 : 
; 1090 :     s->pos_in_central_dir += SIZECENTRALDIRITEM + s->cur_file_info.size_filename +

  00043	8b 8f e0 00 00
	00		 mov	 ecx, DWORD PTR [rdi+224]

; 1091 :             s->cur_file_info.size_file_extra + s->cur_file_info.size_file_comment ;
; 1092 :     s->num_file++;
; 1093 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00049	4c 8d 87 08 01
	00 00		 lea	 r8, QWORD PTR [rdi+264]
  00050	8b 87 d8 00 00
	00		 mov	 eax, DWORD PTR [rdi+216]
  00056	48 8d 97 b0 00
	00 00		 lea	 rdx, QWORD PTR [rdi+176]
  0005d	03 8f dc 00 00
	00		 add	 ecx, DWORD PTR [rdi+220]
  00063	83 c0 2e	 add	 eax, 46			; 0000002eH
  00066	48 ff 87 80 00
	00 00		 inc	 QWORD PTR [rdi+128]
  0006d	03 c1		 add	 eax, ecx
  0006f	48 01 87 88 00
	00 00		 add	 QWORD PTR [rdi+136], rax
  00076	45 33 c9	 xor	 r9d, r9d
  00079	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  0007e	48 8b cf	 mov	 rcx, rdi
  00081	33 db		 xor	 ebx, ebx
  00083	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  00087	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  0008c	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00090	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  00095	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00099	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1094 :                                                &s->cur_file_info_internal,
; 1095 :                                                NULL,0,NULL,0,NULL,0);
; 1096 :     s->current_file_ok = (err == UNZ_OK);

  0009e	85 c0		 test	 eax, eax
  000a0	0f 94 c3	 sete	 bl
  000a3	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx

; 1097 :     return err;

  000aa	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1098 : }

  000af	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000b3	5f		 pop	 rdi
  000b4	c3		 ret	 0
$LN10@unzGoToNex:

; 1088 :         return UNZ_END_OF_LIST_OF_FILE;

  000b5	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH

; 1098 : }

  000ba	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000be	5f		 pop	 rdi
  000bf	c3		 ret	 0
unzGoToNextFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzLocateFile
_TEXT	SEGMENT
cur_file_infoSaved$1$ = 64
cur_file_infoSaved$2$ = 80
cur_file_infoSaved$3$ = 96
cur_file_infoSaved$4$ = 112
cur_file_infoSaved$5$ = 128
szCurrentFileName$1 = 144
file$ = 464
cur_file_infoSaved$6$ = 464
szFileName$ = 472
iCaseSensitivity$ = 480
unzLocateFile PROC					; COMDAT

; 1109 : extern int ZEXPORT unzLocateFile(unzFile file, const char *szFileName, int iCaseSensitivity) {

$LN31:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  0000b	41 8b e8	 mov	 ebp, r8d
  0000e	48 8b f2	 mov	 rsi, rdx
  00011	48 8b f9	 mov	 rdi, rcx

; 1110 :     unz64_s* s;
; 1111 :     int err;
; 1112 : 
; 1113 :     /* We remember the 'current' position in the file so that we can jump
; 1114 :      * back there if we fail.
; 1115 :      */
; 1116 :     unz_file_info64 cur_file_infoSaved;
; 1117 :     unz_file_info64_internal cur_file_info_internalSaved;
; 1118 :     ZPOS64_T num_fileSaved;
; 1119 :     ZPOS64_T pos_in_central_dirSaved;
; 1120 : 
; 1121 : 
; 1122 :     if (file==NULL)

  00014	48 85 c9	 test	 rcx, rcx
  00017	0f 84 be 01 00
	00		 je	 $LN16@unzLocateF

; 1123 :         return UNZ_PARAMERROR;
; 1124 : 
; 1125 :     if (strlen(szFileName)>=UNZ_MAXFILENAMEINZIP)

  0001d	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
$LL18@unzLocateF:
  00024	48 ff c0	 inc	 rax
  00027	80 3c 02 00	 cmp	 BYTE PTR [rdx+rax], 0
  0002b	75 f7		 jne	 SHORT $LL18@unzLocateF
  0002d	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  00033	0f 83 a2 01 00
	00		 jae	 $LN16@unzLocateF

; 1127 : 
; 1128 :     s=(unz64_s*)file;
; 1129 :     if (!s->current_file_ok)

  00039	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0
  00041	75 10		 jne	 SHORT $LN6@unzLocateF

; 1130 :         return UNZ_END_OF_LIST_OF_FILE;

  00043	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH

; 1162 :     return err;
; 1163 : }

  00048	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  0004f	5f		 pop	 rdi
  00050	5e		 pop	 rsi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
$LN6@unzLocateF:

; 1131 : 
; 1132 :     /* Save the current state */
; 1133 :     num_fileSaved = s->num_file;
; 1134 :     pos_in_central_dirSaved = s->pos_in_central_dir;
; 1135 :     cur_file_infoSaved = s->cur_file_info;

  00053	0f 10 81 b0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+176]
  0005a	48 89 9c 24 d8
	01 00 00	 mov	 QWORD PTR [rsp+472], rbx

; 1136 :     cur_file_info_internalSaved = s->cur_file_info_internal;

  00062	48 8b 99 08 01
	00 00		 mov	 rbx, QWORD PTR [rcx+264]
  00069	0f 11 44 24 40	 movups	 XMMWORD PTR cur_file_infoSaved$1$[rsp], xmm0
  0006e	4c 89 a4 24 e0
	01 00 00	 mov	 QWORD PTR [rsp+480], r12
  00076	0f 10 81 c0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+192]
  0007d	4c 89 b4 24 a8
	01 00 00	 mov	 QWORD PTR [rsp+424], r14
  00085	4c 8b b1 80 00
	00 00		 mov	 r14, QWORD PTR [rcx+128]
  0008c	0f 11 44 24 50	 movups	 XMMWORD PTR cur_file_infoSaved$2$[rsp], xmm0
  00091	4c 89 bc 24 a0
	01 00 00	 mov	 QWORD PTR [rsp+416], r15
  00099	0f 10 81 d0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+208]
  000a0	4c 8b b9 88 00
	00 00		 mov	 r15, QWORD PTR [rcx+136]
  000a7	0f 11 44 24 60	 movups	 XMMWORD PTR cur_file_infoSaved$3$[rsp], xmm0
  000ac	0f 10 81 e0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+224]
  000b3	0f 11 44 24 70	 movups	 XMMWORD PTR cur_file_infoSaved$4$[rsp], xmm0
  000b8	0f 10 81 f0 00
	00 00		 movups	 xmm0, XMMWORD PTR [rcx+240]
  000bf	0f 11 84 24 80
	00 00 00	 movups	 XMMWORD PTR cur_file_infoSaved$5$[rsp], xmm0
  000c7	f2 0f 10 81 00
	01 00 00	 movsd	 xmm0, QWORD PTR [rcx+256]
  000cf	f2 0f 11 84 24
	d0 01 00 00	 movsd	 QWORD PTR cur_file_infoSaved$6$[rsp], xmm0

; 1137 : 
; 1138 :     err = unzGoToFirstFile(file);

  000d8	e8 00 00 00 00	 call	 unzGoToFirstFile

; 1139 : 
; 1140 :     while (err == UNZ_OK)

  000dd	85 c0		 test	 eax, eax
  000df	75 66		 jne	 SHORT $LN12@unzLocateF
  000e1	45 33 e4	 xor	 r12d, r12d
  000e4	0f 1f 40 00 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL2@unzLocateF:

; 1141 :     {
; 1142 :         char szCurrentFileName[UNZ_MAXFILENAMEINZIP+1];
; 1143 :         err = unzGetCurrentFileInfo64(file,NULL,

  000f0	44 89 64 24 38	 mov	 DWORD PTR [rsp+56], r12d
  000f5	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR szCurrentFileName$1[rsp]
  000fd	4c 89 64 24 30	 mov	 QWORD PTR [rsp+48], r12
  00102	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00108	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  0010d	33 d2		 xor	 edx, edx
  0010f	48 8b cf	 mov	 rcx, rdi
  00112	4c 89 64 24 20	 mov	 QWORD PTR [rsp+32], r12
  00117	e8 00 00 00 00	 call	 unzGetCurrentFileInfo64

; 1144 :                                     szCurrentFileName,sizeof(szCurrentFileName)-1,
; 1145 :                                     NULL,0,NULL,0);
; 1146 :         if (err == UNZ_OK)

  0011c	85 c0		 test	 eax, eax
  0011e	75 27		 jne	 SHORT $LN12@unzLocateF

; 1147 :         {
; 1148 :             if (unzStringFileNameCompare(szCurrentFileName,
; 1149 :                                             szFileName,iCaseSensitivity)==0)

  00120	44 8b c5	 mov	 r8d, ebp
  00123	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR szCurrentFileName$1[rsp]
  0012b	48 8b d6	 mov	 rdx, rsi
  0012e	e8 00 00 00 00	 call	 unzStringFileNameCompare
  00133	85 c0		 test	 eax, eax
  00135	0f 84 9c 00 00
	00		 je	 $LN11@unzLocateF

; 1151 :             err = unzGoToNextFile(file);

  0013b	48 8b cf	 mov	 rcx, rdi
  0013e	e8 00 00 00 00	 call	 unzGoToNextFile
  00143	85 c0		 test	 eax, eax
  00145	74 a9		 je	 SHORT $LL2@unzLocateF
$LN12@unzLocateF:

; 1152 :         }
; 1153 :     }
; 1154 : 
; 1155 :     /* We failed, so restore the state of the 'current file' to where we
; 1156 :      * were.
; 1157 :      */
; 1158 :     s->num_file = num_fileSaved ;
; 1159 :     s->pos_in_central_dir = pos_in_central_dirSaved ;
; 1160 :     s->cur_file_info = cur_file_infoSaved;

  00147	0f 10 44 24 40	 movups	 xmm0, XMMWORD PTR cur_file_infoSaved$1$[rsp]
  0014c	4c 89 b7 80 00
	00 00		 mov	 QWORD PTR [rdi+128], r14
  00153	0f 10 4c 24 50	 movups	 xmm1, XMMWORD PTR cur_file_infoSaved$2$[rsp]
  00158	4c 89 bf 88 00
	00 00		 mov	 QWORD PTR [rdi+136], r15
  0015f	0f 11 87 b0 00
	00 00		 movups	 XMMWORD PTR [rdi+176], xmm0

; 1161 :     s->cur_file_info_internal = cur_file_info_internalSaved;

  00166	48 89 9f 08 01
	00 00		 mov	 QWORD PTR [rdi+264], rbx
  0016d	0f 10 44 24 60	 movups	 xmm0, XMMWORD PTR cur_file_infoSaved$3$[rsp]
  00172	0f 11 8f c0 00
	00 00		 movups	 XMMWORD PTR [rdi+192], xmm1
  00179	0f 10 4c 24 70	 movups	 xmm1, XMMWORD PTR cur_file_infoSaved$4$[rsp]
  0017e	0f 11 87 d0 00
	00 00		 movups	 XMMWORD PTR [rdi+208], xmm0
  00185	0f 10 84 24 80
	00 00 00	 movups	 xmm0, XMMWORD PTR cur_file_infoSaved$5$[rsp]
  0018d	0f 11 8f e0 00
	00 00		 movups	 XMMWORD PTR [rdi+224], xmm1
  00194	0f 11 87 f0 00
	00 00		 movups	 XMMWORD PTR [rdi+240], xmm0
  0019b	f2 0f 10 84 24
	d0 01 00 00	 movsd	 xmm0, QWORD PTR cur_file_infoSaved$6$[rsp]
  001a4	f2 0f 11 87 00
	01 00 00	 movsd	 QWORD PTR [rdi+256], xmm0
$LN29@unzLocateF:
  001ac	4c 8b b4 24 a8
	01 00 00	 mov	 r14, QWORD PTR [rsp+424]
  001b4	4c 8b a4 24 e0
	01 00 00	 mov	 r12, QWORD PTR [rsp+480]
  001bc	48 8b 9c 24 d8
	01 00 00	 mov	 rbx, QWORD PTR [rsp+472]
  001c4	4c 8b bc 24 a0
	01 00 00	 mov	 r15, QWORD PTR [rsp+416]

; 1162 :     return err;
; 1163 : }

  001cc	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  001d3	5f		 pop	 rdi
  001d4	5e		 pop	 rsi
  001d5	5d		 pop	 rbp
  001d6	c3		 ret	 0
$LN11@unzLocateF:

; 1150 :                 return UNZ_OK;

  001d7	33 c0		 xor	 eax, eax
  001d9	eb d1		 jmp	 SHORT $LN29@unzLocateF
$LN16@unzLocateF:

; 1126 :         return UNZ_PARAMERROR;

  001db	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1162 :     return err;
; 1163 : }

  001e0	48 81 c4 b0 01
	00 00		 add	 rsp, 432		; 000001b0H
  001e7	5f		 pop	 rdi
  001e8	5e		 pop	 rsi
  001e9	5d		 pop	 rbp
  001ea	c3		 ret	 0
unzLocateFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetFilePos64
_TEXT	SEGMENT
file$ = 8
file_pos$ = 16
unzGetFilePos64 PROC					; COMDAT

; 1185 :     unz64_s* s;
; 1186 : 
; 1187 :     if (file==NULL || file_pos==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 2d		 je	 SHORT $LN3@unzGetFile
  00005	48 85 d2	 test	 rdx, rdx
  00008	74 28		 je	 SHORT $LN3@unzGetFile

; 1189 :     s=(unz64_s*)file;
; 1190 :     if (!s->current_file_ok)

  0000a	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0
  00012	75 06		 jne	 SHORT $LN4@unzGetFile

; 1191 :         return UNZ_END_OF_LIST_OF_FILE;

  00014	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH

; 1197 : }

  00019	c3		 ret	 0
$LN4@unzGetFile:

; 1192 : 
; 1193 :     file_pos->pos_in_zip_directory  = s->pos_in_central_dir;

  0001a	48 8b 81 88 00
	00 00		 mov	 rax, QWORD PTR [rcx+136]
  00021	48 89 02	 mov	 QWORD PTR [rdx], rax

; 1194 :     file_pos->num_of_file           = s->num_file;

  00024	48 8b 81 80 00
	00 00		 mov	 rax, QWORD PTR [rcx+128]
  0002b	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 1195 : 
; 1196 :     return UNZ_OK;

  0002f	33 c0		 xor	 eax, eax

; 1197 : }

  00031	c3		 ret	 0
$LN3@unzGetFile:

; 1188 :         return UNZ_PARAMERROR;

  00032	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1197 : }

  00037	c3		 ret	 0
unzGetFilePos64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetFilePos
_TEXT	SEGMENT
file_pos64$ = 32
file$ = 64
file_pos$ = 72
unzGetFilePos PROC					; COMDAT

; 1199 : extern int ZEXPORT unzGetFilePos(unzFile file, unz_file_pos* file_pos) {

$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	48 8b da	 mov	 rbx, rdx

; 1200 :     unz64_file_pos file_pos64;
; 1201 :     int err = unzGetFilePos64(file,&file_pos64);

  00009	48 8d 54 24 20	 lea	 rdx, QWORD PTR file_pos64$[rsp]
  0000e	e8 00 00 00 00	 call	 unzGetFilePos64

; 1202 :     if (err==UNZ_OK)

  00013	85 c0		 test	 eax, eax
  00015	75 0d		 jne	 SHORT $LN4@unzGetFile

; 1203 :     {
; 1204 :         file_pos->pos_in_zip_directory = (uLong)file_pos64.pos_in_zip_directory;

  00017	8b 4c 24 20	 mov	 ecx, DWORD PTR file_pos64$[rsp]
  0001b	89 0b		 mov	 DWORD PTR [rbx], ecx

; 1205 :         file_pos->num_of_file = (uLong)file_pos64.num_of_file;

  0001d	8b 4c 24 28	 mov	 ecx, DWORD PTR file_pos64$[rsp+8]
  00021	89 4b 04	 mov	 DWORD PTR [rbx+4], ecx
$LN4@unzGetFile:

; 1206 :     }
; 1207 :     return err;
; 1208 : }

  00024	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
unzGetFilePos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGoToFilePos64
_TEXT	SEGMENT
file$ = 96
file_pos$ = 104
unzGoToFilePos64 PROC					; COMDAT

; 1210 : extern int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos) {

$LN8:
  00000	40 57		 push	 rdi
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b f9	 mov	 rdi, rcx

; 1211 :     unz64_s* s;
; 1212 :     int err;
; 1213 : 
; 1214 :     if (file==NULL || file_pos==NULL)

  00009	48 85 c9	 test	 rcx, rcx
  0000c	74 64		 je	 SHORT $LN3@unzGoToFil
  0000e	48 85 d2	 test	 rdx, rdx
  00011	74 5f		 je	 SHORT $LN3@unzGoToFil

; 1216 :     s=(unz64_s*)file;
; 1217 : 
; 1218 :     /* jump to the right spot */
; 1219 :     s->pos_in_central_dir = file_pos->pos_in_zip_directory;

  00013	48 8b 02	 mov	 rax, QWORD PTR [rdx]

; 1220 :     s->num_file           = file_pos->num_of_file;
; 1221 : 
; 1222 :     /* set the current file */
; 1223 :     err = unz64local_GetCurrentFileInfoInternal(file,&s->cur_file_info,

  00016	4c 8d 81 08 01
	00 00		 lea	 r8, QWORD PTR [rcx+264]
  0001d	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax
  00024	45 33 c9	 xor	 r9d, r9d
  00027	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0002b	48 8d 91 b0 00
	00 00		 lea	 rdx, QWORD PTR [rcx+176]
  00032	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00037	33 db		 xor	 ebx, ebx
  00039	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  0003d	48 89 5c 24 38	 mov	 QWORD PTR [rsp+56], rbx
  00042	89 5c 24 30	 mov	 DWORD PTR [rsp+48], ebx
  00046	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  0004b	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  0004f	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
  00056	e8 00 00 00 00	 call	 unz64local_GetCurrentFileInfoInternal

; 1224 :                                                &s->cur_file_info_internal,
; 1225 :                                                NULL,0,NULL,0,NULL,0);
; 1226 :     /* return results */
; 1227 :     s->current_file_ok = (err == UNZ_OK);

  0005b	85 c0		 test	 eax, eax
  0005d	0f 94 c3	 sete	 bl
  00060	48 89 9f 90 00
	00 00		 mov	 QWORD PTR [rdi+144], rbx

; 1228 :     return err;

  00067	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 1229 : }

  0006c	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00070	5f		 pop	 rdi
  00071	c3		 ret	 0
$LN3@unzGoToFil:

; 1215 :         return UNZ_PARAMERROR;

  00072	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1229 : }

  00077	48 83 c4 50	 add	 rsp, 80			; 00000050H
  0007b	5f		 pop	 rdi
  0007c	c3		 ret	 0
unzGoToFilePos64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGoToFilePos
_TEXT	SEGMENT
file_pos64$ = 32
file$ = 64
file_pos$ = 72
unzGoToFilePos PROC					; COMDAT

; 1231 : extern int ZEXPORT unzGoToFilePos(unzFile file, unz_file_pos* file_pos) {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1232 :     unz64_file_pos file_pos64;
; 1233 :     if (file_pos == NULL)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 0a		 jne	 SHORT $LN2@unzGoToFil

; 1234 :         return UNZ_PARAMERROR;

  00009	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1239 : }

  0000e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00012	c3		 ret	 0
$LN2@unzGoToFil:

; 1235 : 
; 1236 :     file_pos64.pos_in_zip_directory = file_pos->pos_in_zip_directory;
; 1237 :     file_pos64.num_of_file = file_pos->num_of_file;

  00013	f3 0f 7e 0a	 movq	 xmm1, QWORD PTR [rdx]
  00017	0f 57 c0	 xorps	 xmm0, xmm0
  0001a	66 0f 62 c8	 punpckldq xmm1, xmm0

; 1238 :     return unzGoToFilePos64(file,&file_pos64);

  0001e	48 8d 54 24 20	 lea	 rdx, QWORD PTR file_pos64$[rsp]
  00023	f3 0f 7f 4c 24
	20		 movdqu	 XMMWORD PTR file_pos64$[rsp], xmm1
  00029	e8 00 00 00 00	 call	 unzGoToFilePos64

; 1239 : }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
unzGoToFilePos ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unz64local_CheckCurrentFileCoherencyHeader
_TEXT	SEGMENT
s$ = 96
uMagic$ = 96
uData$ = 96
size_filename$ = 96
size_extra_field$ = 96
piSizeVar$ = 104
uFlags$ = 104
poffset_local_extrafield$ = 112
psize_local_extrafield$ = 120
unz64local_CheckCurrentFileCoherencyHeader PROC		; COMDAT

; 1255 :                                                      uInt  * psize_local_extrafield) {

  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 56		 push	 r14
  00008	41 57		 push	 r15
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1256 :     uLong uMagic,uData,uFlags;
; 1257 :     uLong size_filename;
; 1258 :     uLong size_extra_field;
; 1259 :     int err=UNZ_OK;

  0000e	33 db		 xor	 ebx, ebx
  00010	4d 8b e0	 mov	 r12, r8

; 1260 : 
; 1261 :     *piSizeVar = 0;
; 1262 :     *poffset_local_extrafield = 0;

  00013	49 89 18	 mov	 QWORD PTR [r8], rbx
  00016	4d 8b f9	 mov	 r15, r9

; 1263 :     *psize_local_extrafield = 0;
; 1264 : 
; 1265 :     if (ZSEEK64(s->z_filefunc, s->filestream,s->cur_file_info_internal.offset_curfile +
; 1266 :                                 s->byte_before_the_zipfile,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00019	4c 8b 41 78	 mov	 r8, QWORD PTR [rcx+120]
  0001d	4c 8b f2	 mov	 r14, rdx
  00020	4c 03 81 08 01
	00 00		 add	 r8, QWORD PTR [rcx+264]
  00027	48 8b f9	 mov	 rdi, rcx
  0002a	89 1a		 mov	 DWORD PTR [rdx], ebx
  0002c	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00030	41 89 19	 mov	 DWORD PTR [r9], ebx
  00033	45 33 c9	 xor	 r9d, r9d
  00036	e8 00 00 00 00	 call	 call_zseek64
  0003b	85 c0		 test	 eax, eax
  0003d	74 13		 je	 SHORT $LN2@unz64local

; 1267 :         return UNZ_ERRNO;

  0003f	b8 ff ff ff ff	 mov	 eax, -1

; 1333 : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	41 5f		 pop	 r15
  0004a	41 5e		 pop	 r14
  0004c	41 5c		 pop	 r12
  0004e	5f		 pop	 rdi
  0004f	5e		 pop	 rsi
  00050	5b		 pop	 rbx
  00051	c3		 ret	 0
$LN2@unz64local:

; 1268 : 
; 1269 : 
; 1270 :     if (err==UNZ_OK)
; 1271 :     {
; 1272 :         if (unz64local_getLong(&s->z_filefunc, s->filestream,&uMagic) != UNZ_OK)

  00052	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00056	4c 8d 44 24 60	 lea	 r8, QWORD PTR uMagic$[rsp]
  0005b	48 89 6c 24 70	 mov	 QWORD PTR [rsp+112], rbp
  00060	48 8b cf	 mov	 rcx, rdi
  00063	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  00068	e8 00 00 00 00	 call	 unz64local_getLong
  0006d	be ff ff ff ff	 mov	 esi, -1
  00072	41 bd 99 ff ff
	ff		 mov	 r13d, -103		; ffffffffffffff99H
  00078	85 c0		 test	 eax, eax
  0007a	74 04		 je	 SHORT $LN4@unz64local

; 1273 :             err=UNZ_ERRNO;

  0007c	8b de		 mov	 ebx, esi
  0007e	eb 0c		 jmp	 SHORT $LN6@unz64local
$LN4@unz64local:

; 1274 :         else if (uMagic!=0x04034b50)

  00080	81 7c 24 60 50
	4b 03 04	 cmp	 DWORD PTR uMagic$[rsp], 67324752 ; 04034b50H
  00088	41 0f 45 dd	 cmovne	 ebx, r13d
$LN6@unz64local:

; 1275 :             err=UNZ_BADZIPFILE;
; 1276 :     }
; 1277 : 
; 1278 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  0008c	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00090	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  00095	48 8b cf	 mov	 rcx, rdi
  00098	e8 00 00 00 00	 call	 unz64local_getShort

; 1279 :         err=UNZ_ERRNO;
; 1280 : /*
; 1281 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.wVersion))
; 1282 :         err=UNZ_BADZIPFILE;
; 1283 : */
; 1284 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uFlags) != UNZ_OK)

  0009d	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000a1	4c 8d 44 24 68	 lea	 r8, QWORD PTR uFlags$[rsp]
  000a6	85 c0		 test	 eax, eax
  000a8	48 8b cf	 mov	 rcx, rdi
  000ab	0f 45 de	 cmovne	 ebx, esi
  000ae	e8 00 00 00 00	 call	 unz64local_getShort

; 1285 :         err=UNZ_ERRNO;
; 1286 : 
; 1287 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&uData) != UNZ_OK)

  000b3	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000b7	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  000bc	85 c0		 test	 eax, eax
  000be	48 8b cf	 mov	 rcx, rdi
  000c1	0f 45 de	 cmovne	 ebx, esi
  000c4	e8 00 00 00 00	 call	 unz64local_getShort
  000c9	85 c0		 test	 eax, eax
  000cb	74 04		 je	 SHORT $LN9@unz64local

; 1288 :         err=UNZ_ERRNO;

  000cd	8b de		 mov	 ebx, esi
  000cf	eb 25		 jmp	 SHORT $LN12@unz64local
$LN9@unz64local:

; 1289 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.compression_method))

  000d1	85 db		 test	 ebx, ebx
  000d3	75 21		 jne	 SHORT $LN12@unz64local
  000d5	8b 87 bc 00 00
	00		 mov	 eax, DWORD PTR [rdi+188]
  000db	39 44 24 60	 cmp	 DWORD PTR uData$[rsp], eax
  000df	74 05		 je	 SHORT $LN28@unz64local

; 1290 :         err=UNZ_BADZIPFILE;

  000e1	41 8b dd	 mov	 ebx, r13d

; 1291 : 
; 1292 :     if ((err==UNZ_OK) && (s->cur_file_info.compression_method!=0) &&
; 1293 : /* #ifdef HAVE_BZIP2 */
; 1294 :                          (s->cur_file_info.compression_method!=Z_BZIP2ED) &&

  000e4	eb 10		 jmp	 SHORT $LN12@unz64local
$LN28@unz64local:
  000e6	85 c0		 test	 eax, eax
  000e8	74 0c		 je	 SHORT $LN12@unz64local
  000ea	83 c0 f8	 add	 eax, -8			; fffffff8H
  000ed	a9 fb ff ff ff	 test	 eax, -5			; fffffffbH
  000f2	41 0f 45 dd	 cmovne	 ebx, r13d
$LN12@unz64local:

; 1295 : /* #endif */
; 1296 :                          (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1297 :         err=UNZ_BADZIPFILE;
; 1298 : 
; 1299 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* date/time */

  000f6	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  000fa	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  000ff	48 8b cf	 mov	 rcx, rdi
  00102	e8 00 00 00 00	 call	 unz64local_getLong

; 1300 :         err=UNZ_ERRNO;
; 1301 : 
; 1302 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* crc */

  00107	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0010b	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  00110	85 c0		 test	 eax, eax
  00112	48 8b cf	 mov	 rcx, rdi
  00115	0f 45 de	 cmovne	 ebx, esi
  00118	e8 00 00 00 00	 call	 unz64local_getLong
  0011d	8b 6c 24 68	 mov	 ebp, DWORD PTR uFlags$[rsp]
  00121	85 c0		 test	 eax, eax
  00123	74 04		 je	 SHORT $LN14@unz64local

; 1303 :         err=UNZ_ERRNO;

  00125	8b de		 mov	 ebx, esi
  00127	eb 18		 jmp	 SHORT $LN16@unz64local
$LN14@unz64local:

; 1304 :     else if ((err==UNZ_OK) && (uData!=s->cur_file_info.crc) && ((uFlags & 8)==0))

  00129	85 db		 test	 ebx, ebx
  0012b	75 14		 jne	 SHORT $LN16@unz64local
  0012d	8b 87 c4 00 00
	00		 mov	 eax, DWORD PTR [rdi+196]
  00133	39 44 24 60	 cmp	 DWORD PTR uData$[rsp], eax
  00137	74 08		 je	 SHORT $LN16@unz64local
  00139	40 f6 c5 08	 test	 bpl, 8
  0013d	41 0f 44 dd	 cmove	 ebx, r13d
$LN16@unz64local:

; 1305 :         err=UNZ_BADZIPFILE;
; 1306 : 
; 1307 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size compr */

  00141	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  00145	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  0014a	48 8b cf	 mov	 rcx, rdi
  0014d	e8 00 00 00 00	 call	 unz64local_getLong
  00152	85 c0		 test	 eax, eax
  00154	74 04		 je	 SHORT $LN17@unz64local

; 1308 :         err=UNZ_ERRNO;

  00156	8b de		 mov	 ebx, esi
  00158	eb 1e		 jmp	 SHORT $LN19@unz64local
$LN17@unz64local:

; 1309 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.compressed_size) && ((uFlags & 8)==0))

  0015a	8b 44 24 60	 mov	 eax, DWORD PTR uData$[rsp]
  0015e	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00161	74 15		 je	 SHORT $LN19@unz64local
  00163	85 db		 test	 ebx, ebx
  00165	75 11		 jne	 SHORT $LN19@unz64local
  00167	48 3b 87 c8 00
	00 00		 cmp	 rax, QWORD PTR [rdi+200]
  0016e	74 08		 je	 SHORT $LN19@unz64local
  00170	40 f6 c5 08	 test	 bpl, 8
  00174	41 0f 44 dd	 cmove	 ebx, r13d
$LN19@unz64local:

; 1310 :         err=UNZ_BADZIPFILE;
; 1311 : 
; 1312 :     if (unz64local_getLong(&s->z_filefunc, s->filestream,&uData) != UNZ_OK) /* size uncompr */

  00178	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  0017c	4c 8d 44 24 60	 lea	 r8, QWORD PTR uData$[rsp]
  00181	48 8b cf	 mov	 rcx, rdi
  00184	e8 00 00 00 00	 call	 unz64local_getLong
  00189	85 c0		 test	 eax, eax
  0018b	74 04		 je	 SHORT $LN20@unz64local

; 1313 :         err=UNZ_ERRNO;

  0018d	8b de		 mov	 ebx, esi
  0018f	eb 1e		 jmp	 SHORT $LN22@unz64local
$LN20@unz64local:

; 1314 :     else if (uData != 0xFFFFFFFF && (err==UNZ_OK) && (uData!=s->cur_file_info.uncompressed_size) && ((uFlags & 8)==0))

  00191	8b 44 24 60	 mov	 eax, DWORD PTR uData$[rsp]
  00195	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  00198	74 15		 je	 SHORT $LN22@unz64local
  0019a	85 db		 test	 ebx, ebx
  0019c	75 11		 jne	 SHORT $LN22@unz64local
  0019e	48 3b 87 d0 00
	00 00		 cmp	 rax, QWORD PTR [rdi+208]
  001a5	74 08		 je	 SHORT $LN22@unz64local
  001a7	40 f6 c5 08	 test	 bpl, 8
  001ab	41 0f 44 dd	 cmove	 ebx, r13d
$LN22@unz64local:

; 1315 :         err=UNZ_BADZIPFILE;
; 1316 : 
; 1317 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_filename) != UNZ_OK)

  001af	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  001b3	4c 8d 44 24 60	 lea	 r8, QWORD PTR size_filename$[rsp]
  001b8	48 8b cf	 mov	 rcx, rdi
  001bb	e8 00 00 00 00	 call	 unz64local_getShort
  001c0	8b 6c 24 60	 mov	 ebp, DWORD PTR size_filename$[rsp]
  001c4	85 c0		 test	 eax, eax
  001c6	74 04		 je	 SHORT $LN23@unz64local

; 1318 :         err=UNZ_ERRNO;

  001c8	8b de		 mov	 ebx, esi
  001ca	eb 0e		 jmp	 SHORT $LN25@unz64local
$LN23@unz64local:

; 1319 :     else if ((err==UNZ_OK) && (size_filename!=s->cur_file_info.size_filename))

  001cc	85 db		 test	 ebx, ebx
  001ce	75 0a		 jne	 SHORT $LN25@unz64local
  001d0	3b af d8 00 00
	00		 cmp	 ebp, DWORD PTR [rdi+216]
  001d6	41 0f 45 dd	 cmovne	 ebx, r13d
$LN25@unz64local:

; 1320 :         err=UNZ_BADZIPFILE;
; 1321 : 
; 1322 :     *piSizeVar += (uInt)size_filename;
; 1323 : 
; 1324 :     if (unz64local_getShort(&s->z_filefunc, s->filestream,&size_extra_field) != UNZ_OK)

  001da	48 8b 57 60	 mov	 rdx, QWORD PTR [rdi+96]
  001de	4c 8d 44 24 60	 lea	 r8, QWORD PTR size_extra_field$[rsp]
  001e3	41 01 2e	 add	 DWORD PTR [r14], ebp
  001e6	48 8b cf	 mov	 rcx, rdi
  001e9	e8 00 00 00 00	 call	 unz64local_getShort

; 1325 :         err=UNZ_ERRNO;
; 1326 :     *poffset_local_extrafield= s->cur_file_info_internal.offset_curfile +
; 1327 :                                     SIZEZIPLOCALHEADER + size_filename;
; 1328 :     *psize_local_extrafield = (uInt)size_extra_field;

  001ee	8b 4c 24 60	 mov	 ecx, DWORD PTR size_extra_field$[rsp]
  001f2	48 8d 55 1e	 lea	 rdx, QWORD PTR [rbp+30]

; 1329 : 
; 1330 :     *piSizeVar += (uInt)size_extra_field;
; 1331 : 
; 1332 :     return err;

  001f6	4c 8b 6c 24 20	 mov	 r13, QWORD PTR [rsp+32]
  001fb	85 c0		 test	 eax, eax
  001fd	48 8b 6c 24 70	 mov	 rbp, QWORD PTR [rsp+112]
  00202	0f 45 de	 cmovne	 ebx, esi
  00205	41 89 0f	 mov	 DWORD PTR [r15], ecx
  00208	48 03 97 08 01
	00 00		 add	 rdx, QWORD PTR [rdi+264]
  0020f	8b c3		 mov	 eax, ebx
  00211	41 01 0e	 add	 DWORD PTR [r14], ecx
  00214	49 89 14 24	 mov	 QWORD PTR [r12], rdx

; 1333 : }

  00218	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0021c	41 5f		 pop	 r15
  0021e	41 5e		 pop	 r14
  00220	41 5c		 pop	 r12
  00222	5f		 pop	 rdi
  00223	5e		 pop	 rsi
  00224	5b		 pop	 rbx
  00225	c3		 ret	 0
unz64local_CheckCurrentFileCoherencyHeader ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFile3
_TEXT	SEGMENT
iSizeVar$ = 32
offset_local_extrafield$ = 40
source$ = 48
file$ = 96
size_local_extrafield$ = 96
method$ = 104
level$ = 112
raw$ = 120
password$ = 128
unzOpenCurrentFile3 PROC				; COMDAT

; 1340 :                                        int* level, int raw, const char* password) {

$LN63:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	41 56		 push	 r14
  00008	41 57		 push	 r15
  0000a	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0000e	41 8b e9	 mov	 ebp, r9d
  00011	4d 8b f0	 mov	 r14, r8
  00014	4c 8b fa	 mov	 r15, rdx
  00017	48 8b d9	 mov	 rbx, rcx

; 1341 :     int err=UNZ_OK;
; 1342 :     uInt iSizeVar;
; 1343 :     unz64_s* s;
; 1344 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1345 :     ZPOS64_T offset_local_extrafield;  /* offset of the local extra field */
; 1346 :     uInt  size_local_extrafield;    /* size of the local extra field */
; 1347 : #    ifndef NOUNCRYPT
; 1348 :     char source[12];
; 1349 : #    else
; 1350 :     if (password != NULL)
; 1351 :         return UNZ_PARAMERROR;
; 1352 : #    endif
; 1353 : 
; 1354 :     if (file==NULL)

  0001a	48 85 c9	 test	 rcx, rcx
  0001d	0f 84 2c 03 00
	00		 je	 $LN37@unzOpenCur

; 1355 :         return UNZ_PARAMERROR;
; 1356 :     s=(unz64_s*)file;
; 1357 :     if (!s->current_file_ok)

  00023	48 83 b9 90 00
	00 00 00	 cmp	 QWORD PTR [rcx+144], 0
  0002b	0f 84 1e 03 00
	00		 je	 $LN37@unzOpenCur

; 1358 :         return UNZ_PARAMERROR;
; 1359 : 
; 1360 :     if (s->pfile_in_zip_read != NULL)

  00031	48 83 b9 10 01
	00 00 00	 cmp	 QWORD PTR [rcx+272], 0
  00039	74 05		 je	 SHORT $LN9@unzOpenCur

; 1361 :         unzCloseCurrentFile(file);

  0003b	e8 00 00 00 00	 call	 unzCloseCurrentFile
$LN9@unzOpenCur:

; 1362 : 
; 1363 :     if (unz64local_CheckCurrentFileCoherencyHeader(s,&iSizeVar, &offset_local_extrafield,&size_local_extrafield)!=UNZ_OK)

  00040	4c 8d 4c 24 60	 lea	 r9, QWORD PTR size_local_extrafield$[rsp]
  00045	48 8b cb	 mov	 rcx, rbx
  00048	4c 8d 44 24 28	 lea	 r8, QWORD PTR offset_local_extrafield$[rsp]
  0004d	48 8d 54 24 20	 lea	 rdx, QWORD PTR iSizeVar$[rsp]
  00052	e8 00 00 00 00	 call	 unz64local_CheckCurrentFileCoherencyHeader
  00057	85 c0		 test	 eax, eax
  00059	74 14		 je	 SHORT $LN10@unzOpenCur

; 1364 :         return UNZ_BADZIPFILE;

  0005b	b8 99 ff ff ff	 mov	 eax, -103		; ffffffffffffff99H

; 1507 : }

  00060	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00065	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00069	41 5f		 pop	 r15
  0006b	41 5e		 pop	 r14
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
$LN10@unzOpenCur:
  0006f	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi

; 1365 : 
; 1366 :     pfile_in_zip_read_info = (file_in_zip64_read_info_s*)ALLOC(sizeof(file_in_zip64_read_info_s));

  00074	b9 20 01 00 00	 mov	 ecx, 288		; 00000120H
  00079	48 89 7c 24 70	 mov	 QWORD PTR [rsp+112], rdi
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00084	48 8b f8	 mov	 rdi, rax

; 1367 :     if (pfile_in_zip_read_info==NULL)

  00087	48 85 c0	 test	 rax, rax
  0008a	74 3b		 je	 SHORT $LN34@unzOpenCur

; 1368 :         return UNZ_INTERNALERROR;
; 1369 : 
; 1370 :     pfile_in_zip_read_info->read_buffer=(char*)ALLOC(UNZ_BUFSIZE);

  0008c	b9 00 40 00 00	 mov	 ecx, 16384		; 00004000H
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc

; 1371 :     pfile_in_zip_read_info->offset_local_extrafield = offset_local_extrafield;

  00097	48 8b 4c 24 28	 mov	 rcx, QWORD PTR offset_local_extrafield$[rsp]

; 1372 :     pfile_in_zip_read_info->size_local_extrafield = size_local_extrafield;
; 1373 :     pfile_in_zip_read_info->pos_local_extrafield=0;

  0009c	33 f6		 xor	 esi, esi
  0009e	48 89 4f 70	 mov	 QWORD PTR [rdi+112], rcx
  000a2	8b 4c 24 60	 mov	 ecx, DWORD PTR size_local_extrafield$[rsp]
  000a6	89 4f 78	 mov	 DWORD PTR [rdi+120], ecx
  000a9	48 89 07	 mov	 QWORD PTR [rdi], rax
  000ac	48 89 b7 80 00
	00 00		 mov	 QWORD PTR [rdi+128], rsi

; 1374 :     pfile_in_zip_read_info->raw=raw;

  000b3	89 af 18 01 00
	00		 mov	 DWORD PTR [rdi+280], ebp

; 1375 : 
; 1376 :     if (pfile_in_zip_read_info->read_buffer==NULL)

  000b9	48 85 c0	 test	 rax, rax
  000bc	75 27		 jne	 SHORT $LN12@unzOpenCur

; 1377 :     {
; 1378 :         free(pfile_in_zip_read_info);

  000be	48 8b cf	 mov	 rcx, rdi
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN34@unzOpenCur:

; 1379 :         return UNZ_INTERNALERROR;

  000c7	b8 98 ff ff ff	 mov	 eax, -104		; ffffffffffffff98H
$LN60@unzOpenCur:
  000cc	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  000d1	48 8b 7c 24 70	 mov	 rdi, QWORD PTR [rsp+112]

; 1507 : }

  000d6	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  000db	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000df	41 5f		 pop	 r15
  000e1	41 5e		 pop	 r14
  000e3	5d		 pop	 rbp
  000e4	c3		 ret	 0
$LN12@unzOpenCur:

; 1380 :     }
; 1381 : 
; 1382 :     pfile_in_zip_read_info->stream_initialised=0;

  000e5	89 77 68	 mov	 DWORD PTR [rdi+104], esi

; 1383 : 
; 1384 :     if (method!=NULL)

  000e8	48 8d 8b bc 00
	00 00		 lea	 rcx, QWORD PTR [rbx+188]
  000ef	4d 85 ff	 test	 r15, r15
  000f2	74 05		 je	 SHORT $LN13@unzOpenCur

; 1385 :         *method = (int)s->cur_file_info.compression_method;

  000f4	8b 01		 mov	 eax, DWORD PTR [rcx]
  000f6	41 89 07	 mov	 DWORD PTR [r15], eax
$LN13@unzOpenCur:

; 1386 : 
; 1387 :     if (level!=NULL)

  000f9	4d 85 f6	 test	 r14, r14
  000fc	74 3f		 je	 SHORT $LN2@unzOpenCur

; 1388 :     {
; 1389 :         *level = 6;

  000fe	41 c7 06 06 00
	00 00		 mov	 DWORD PTR [r14], 6

; 1390 :         switch (s->cur_file_info.flag & 0x06)

  00105	8b 83 b8 00 00
	00		 mov	 eax, DWORD PTR [rbx+184]
  0010b	83 e0 06	 and	 eax, 6
  0010e	83 f8 02	 cmp	 eax, 2
  00111	74 23		 je	 SHORT $LN17@unzOpenCur
  00113	83 f8 04	 cmp	 eax, 4
  00116	74 15		 je	 SHORT $LN16@unzOpenCur
  00118	83 f8 06	 cmp	 eax, 6
  0011b	75 20		 jne	 SHORT $LN2@unzOpenCur

; 1391 :         {
; 1392 :           case 6 : *level = 1; break;

  0011d	41 c7 06 01 00
	00 00		 mov	 DWORD PTR [r14], 1
  00124	48 8d 8b bc 00
	00 00		 lea	 rcx, QWORD PTR [rbx+188]
  0012b	eb 10		 jmp	 SHORT $LN2@unzOpenCur
$LN16@unzOpenCur:

; 1393 :           case 4 : *level = 2; break;

  0012d	41 c7 06 02 00
	00 00		 mov	 DWORD PTR [r14], 2
  00134	eb 07		 jmp	 SHORT $LN2@unzOpenCur
$LN17@unzOpenCur:

; 1394 :           case 2 : *level = 9; break;

  00136	41 c7 06 09 00
	00 00		 mov	 DWORD PTR [r14], 9
$LN2@unzOpenCur:

; 1395 :         }
; 1396 :     }
; 1397 : 
; 1398 :     if ((s->cur_file_info.compression_method!=0) &&
; 1399 : /* #ifdef HAVE_BZIP2 */
; 1400 :         (s->cur_file_info.compression_method!=Z_BZIP2ED) &&
; 1401 : /* #endif */
; 1402 :         (s->cur_file_info.compression_method!=Z_DEFLATED))
; 1403 : 
; 1404 :         err=UNZ_BADZIPFILE;
; 1405 : 
; 1406 :     pfile_in_zip_read_info->crc32_wait=s->cur_file_info.crc;

  0013d	8b 83 c4 00 00
	00		 mov	 eax, DWORD PTR [rbx+196]

; 1407 :     pfile_in_zip_read_info->crc32=0;
; 1408 :     pfile_in_zip_read_info->total_out_64=0;
; 1409 :     pfile_in_zip_read_info->compression_method = s->cur_file_info.compression_method;
; 1410 :     pfile_in_zip_read_info->filestream=s->filestream;
; 1411 :     pfile_in_zip_read_info->z_filefunc=s->z_filefunc;
; 1412 :     pfile_in_zip_read_info->byte_before_the_zipfile=s->byte_before_the_zipfile;
; 1413 : 
; 1414 :     pfile_in_zip_read_info->stream.total_out = 0;
; 1415 : 
; 1416 :     if ((s->cur_file_info.compression_method==Z_BZIP2ED) && (!raw))

  00143	4c 8d 73 60	 lea	 r14, QWORD PTR [rbx+96]
  00147	89 87 94 00 00
	00		 mov	 DWORD PTR [rdi+148], eax
  0014d	89 b7 90 00 00
	00		 mov	 DWORD PTR [rdi+144], esi
  00153	48 89 b7 88 00
	00 00		 mov	 QWORD PTR [rdi+136], rsi
  0015a	8b 01		 mov	 eax, DWORD PTR [rcx]
  0015c	89 87 08 01 00
	00		 mov	 DWORD PTR [rdi+264], eax
  00162	48 8b 43 60	 mov	 rax, QWORD PTR [rbx+96]
  00166	48 89 87 00 01
	00 00		 mov	 QWORD PTR [rdi+256], rax
  0016d	0f 10 03	 movups	 xmm0, XMMWORD PTR [rbx]
  00170	0f 11 87 a8 00
	00 00		 movups	 XMMWORD PTR [rdi+168], xmm0
  00177	0f 10 4b 10	 movups	 xmm1, XMMWORD PTR [rbx+16]
  0017b	0f 11 8f b8 00
	00 00		 movups	 XMMWORD PTR [rdi+184], xmm1
  00182	0f 10 43 20	 movups	 xmm0, XMMWORD PTR [rbx+32]
  00186	0f 11 87 c8 00
	00 00		 movups	 XMMWORD PTR [rdi+200], xmm0
  0018d	0f 10 4b 30	 movups	 xmm1, XMMWORD PTR [rbx+48]
  00191	0f 11 8f d8 00
	00 00		 movups	 XMMWORD PTR [rdi+216], xmm1
  00198	0f 10 43 40	 movups	 xmm0, XMMWORD PTR [rbx+64]
  0019c	0f 11 87 e8 00
	00 00		 movups	 XMMWORD PTR [rdi+232], xmm0
  001a3	f2 0f 10 4b 50	 movsd	 xmm1, QWORD PTR [rbx+80]
  001a8	f2 0f 11 8f f8
	00 00 00	 movsd	 QWORD PTR [rdi+248], xmm1
  001b0	48 8b 43 78	 mov	 rax, QWORD PTR [rbx+120]
  001b4	48 89 87 10 01
	00 00		 mov	 QWORD PTR [rdi+272], rax
  001bb	89 77 24	 mov	 DWORD PTR [rdi+36], esi
  001be	8b 01		 mov	 eax, DWORD PTR [rcx]
  001c0	83 f8 0c	 cmp	 eax, 12
  001c3	0f 85 19 01 00
	00		 jne	 $LN19@unzOpenCur
  001c9	85 ed		 test	 ebp, ebp
  001cb	75 0e		 jne	 SHORT $LN23@unzOpenCur

; 1417 :     {
; 1418 : #ifdef HAVE_BZIP2
; 1419 :       pfile_in_zip_read_info->bstream.bzalloc = (void *(*) (void *, int, int))0;
; 1420 :       pfile_in_zip_read_info->bstream.bzfree = (free_func)0;
; 1421 :       pfile_in_zip_read_info->bstream.opaque = (voidpf)0;
; 1422 :       pfile_in_zip_read_info->bstream.state = (voidpf)0;
; 1423 : 
; 1424 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1425 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1426 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1427 :       pfile_in_zip_read_info->stream.next_in = (voidpf)0;
; 1428 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1429 : 
; 1430 :       err=BZ2_bzDecompressInit(&pfile_in_zip_read_info->bstream, 0, 0);
; 1431 :       if (err == Z_OK)
; 1432 :         pfile_in_zip_read_info->stream_initialised=Z_BZIP2ED;
; 1433 :       else
; 1434 :       {
; 1435 :         free(pfile_in_zip_read_info->read_buffer);
; 1436 :         free(pfile_in_zip_read_info);
; 1437 :         return err;
; 1438 :       }
; 1439 : #else
; 1440 :       pfile_in_zip_read_info->raw=1;

  001cd	c7 87 18 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rdi+280], 1
$LN61@unzOpenCur:

; 1459 :       }
; 1460 :         /* windowBits is passed < 0 to tell that there is no zlib header.
; 1461 :          * Note that in this case inflate *requires* an extra "dummy" byte
; 1462 :          * after the compressed stream in order to complete decompression and
; 1463 :          * return Z_STREAM_END.
; 1464 :          * In unzip, i don't wait absolutely Z_STREAM_END because I known the
; 1465 :          * size of both compressed and uncompressed data
; 1466 :          */
; 1467 :     }
; 1468 :     pfile_in_zip_read_info->rest_read_compressed =

  001d7	4c 8d 73 60	 lea	 r14, QWORD PTR [rbx+96]
$LN23@unzOpenCur:
  001db	48 8b 83 c8 00
	00 00		 mov	 rax, QWORD PTR [rbx+200]

; 1469 :             s->cur_file_info.compressed_size ;
; 1470 :     pfile_in_zip_read_info->rest_read_uncompressed =
; 1471 :             s->cur_file_info.uncompressed_size ;
; 1472 : 
; 1473 : 
; 1474 :     pfile_in_zip_read_info->pos_in_zipfile =

  001e2	8b 4c 24 20	 mov	 ecx, DWORD PTR iSizeVar$[rsp]

; 1475 :             s->cur_file_info_internal.offset_curfile + SIZEZIPLOCALHEADER +
; 1476 :               iSizeVar;
; 1477 : 
; 1478 :     pfile_in_zip_read_info->stream.avail_in = (uInt)0;
; 1479 : 
; 1480 :     s->pfile_in_zip_read = pfile_in_zip_read_info;
; 1481 :                 s->encrypted = 0;
; 1482 : 
; 1483 : #    ifndef NOUNCRYPT
; 1484 :     if (password != NULL)

  001e6	48 8b ac 24 80
	00 00 00	 mov	 rbp, QWORD PTR password$[rsp]
  001ee	48 83 c1 1e	 add	 rcx, 30
  001f2	48 89 87 98 00
	00 00		 mov	 QWORD PTR [rdi+152], rax
  001f9	48 8b 83 d0 00
	00 00		 mov	 rax, QWORD PTR [rbx+208]
  00200	48 89 87 a0 00
	00 00		 mov	 QWORD PTR [rdi+160], rax
  00207	48 03 8b 08 01
	00 00		 add	 rcx, QWORD PTR [rbx+264]
  0020e	48 89 4f 60	 mov	 QWORD PTR [rdi+96], rcx
  00212	89 77 10	 mov	 DWORD PTR [rdi+16], esi
  00215	48 89 bb 10 01
	00 00		 mov	 QWORD PTR [rbx+272], rdi
  0021c	89 b3 18 01 00
	00		 mov	 DWORD PTR [rbx+280], esi
  00222	48 85 ed	 test	 rbp, rbp
  00225	0f 84 b0 00 00
	00		 je	 $LN24@unzOpenCur

; 1485 :     {
; 1486 :         int i;
; 1487 :         s->pcrc_32_tab = get_crc_table();

  0022b	e8 00 00 00 00	 call	 get_crc_table

; 1488 :         init_keys(password,s->keys,s->pcrc_32_tab);

  00230	4c 8b c0	 mov	 r8, rax
  00233	48 89 83 30 01
	00 00		 mov	 QWORD PTR [rbx+304], rax
  0023a	48 8d 93 20 01
	00 00		 lea	 rdx, QWORD PTR [rbx+288]
  00241	48 8b cd	 mov	 rcx, rbp
  00244	e8 00 00 00 00	 call	 init_keys

; 1489 :         if (ZSEEK64(s->z_filefunc, s->filestream,
; 1490 :                   s->pfile_in_zip_read->pos_in_zipfile +
; 1491 :                      s->pfile_in_zip_read->byte_before_the_zipfile,
; 1492 :                   SEEK_SET)!=0)

  00249	48 8b 83 10 01
	00 00		 mov	 rax, QWORD PTR [rbx+272]
  00250	45 33 c9	 xor	 r9d, r9d
  00253	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  00257	48 8b cb	 mov	 rcx, rbx
  0025a	4c 8b 80 10 01
	00 00		 mov	 r8, QWORD PTR [rax+272]
  00261	4c 03 40 60	 add	 r8, QWORD PTR [rax+96]
  00265	e8 00 00 00 00	 call	 call_zseek64
  0026a	85 c0		 test	 eax, eax
  0026c	0f 85 55 fe ff
	ff		 jne	 $LN34@unzOpenCur

; 1493 :             return UNZ_INTERNALERROR;
; 1494 :         if(ZREAD64(s->z_filefunc, s->filestream,source, 12)<12)

  00272	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00276	4c 8d 44 24 30	 lea	 r8, QWORD PTR source$[rsp]
  0027b	49 8b 16	 mov	 rdx, QWORD PTR [r14]
  0027e	41 b9 0c 00 00
	00		 mov	 r9d, 12
  00284	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00288	ff d0		 call	 rax
  0028a	83 f8 0c	 cmp	 eax, 12
  0028d	0f 82 34 fe ff
	ff		 jb	 $LN34@unzOpenCur
$LL6@unzOpenCur:

; 1495 :             return UNZ_INTERNALERROR;
; 1496 : 
; 1497 :         for (i = 0; i<12; i++)
; 1498 :             zdecode(s->keys,s->pcrc_32_tab,source[i]);

  00293	48 8d 8b 20 01
	00 00		 lea	 rcx, QWORD PTR [rbx+288]
  0029a	e8 00 00 00 00	 call	 decrypt_byte
  0029f	30 44 34 30	 xor	 BYTE PTR source$[rsp+rsi], al
  002a3	48 8d 8b 20 01
	00 00		 lea	 rcx, QWORD PTR [rbx+288]
  002aa	44 0f be 44 34
	30		 movsx	 r8d, BYTE PTR source$[rsp+rsi]
  002b0	48 8b 93 30 01
	00 00		 mov	 rdx, QWORD PTR [rbx+304]
  002b7	e8 00 00 00 00	 call	 update_keys
  002bc	48 ff c6	 inc	 rsi
  002bf	48 83 fe 0c	 cmp	 rsi, 12
  002c3	7c ce		 jl	 SHORT $LL6@unzOpenCur

; 1499 : 
; 1500 :         s->pfile_in_zip_read->pos_in_zipfile+=12;

  002c5	48 8b 83 10 01
	00 00		 mov	 rax, QWORD PTR [rbx+272]
  002cc	48 83 40 60 0c	 add	 QWORD PTR [rax+96], 12

; 1501 :         s->encrypted=1;

  002d1	c7 83 18 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rbx+280], 1
$LN24@unzOpenCur:

; 1502 :     }
; 1503 : #    endif
; 1504 : 
; 1505 : 
; 1506 :     return UNZ_OK;

  002db	33 c0		 xor	 eax, eax
  002dd	e9 ea fd ff ff	 jmp	 $LN60@unzOpenCur
$LN19@unzOpenCur:

; 1441 : #endif
; 1442 :     }
; 1443 :     else if ((s->cur_file_info.compression_method==Z_DEFLATED) && (!raw))

  002e2	83 f8 08	 cmp	 eax, 8
  002e5	0f 85 f0 fe ff
	ff		 jne	 $LN23@unzOpenCur
  002eb	4c 8d 73 60	 lea	 r14, QWORD PTR [rbx+96]
  002ef	85 ed		 test	 ebp, ebp
  002f1	0f 85 e4 fe ff
	ff		 jne	 $LN23@unzOpenCur

; 1444 :     {
; 1445 :       pfile_in_zip_read_info->stream.zalloc = (alloc_func)0;
; 1446 :       pfile_in_zip_read_info->stream.zfree = (free_func)0;
; 1447 :       pfile_in_zip_read_info->stream.opaque = (voidpf)0;
; 1448 :       pfile_in_zip_read_info->stream.next_in = 0;

  002f7	48 8d 4f 08	 lea	 rcx, QWORD PTR [rdi+8]

; 1449 :       pfile_in_zip_read_info->stream.avail_in = 0;
; 1450 : 
; 1451 :       err=inflateInit2(&pfile_in_zip_read_info->stream, -MAX_WBITS);

  002fb	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  00301	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@CNPFHDLN@1?43?41?41?9motley@
  00308	48 89 31	 mov	 QWORD PTR [rcx], rsi
  0030b	ba f1 ff ff ff	 mov	 edx, -15
  00310	48 89 77 38	 mov	 QWORD PTR [rdi+56], rsi
  00314	48 89 77 40	 mov	 QWORD PTR [rdi+64], rsi
  00318	48 89 77 48	 mov	 QWORD PTR [rdi+72], rsi
  0031c	89 77 10	 mov	 DWORD PTR [rdi+16], esi
  0031f	e8 00 00 00 00	 call	 inflateInit2_
  00324	8b e8		 mov	 ebp, eax

; 1452 :       if (err == Z_OK)

  00326	85 c0		 test	 eax, eax
  00328	75 0c		 jne	 SHORT $LN22@unzOpenCur

; 1453 :         pfile_in_zip_read_info->stream_initialised=Z_DEFLATED;

  0032a	c7 47 68 08 00
	00 00		 mov	 DWORD PTR [rdi+104], 8
  00331	e9 a1 fe ff ff	 jmp	 $LN61@unzOpenCur
$LN22@unzOpenCur:

; 1454 :       else
; 1455 :       {
; 1456 :         free(pfile_in_zip_read_info->read_buffer);

  00336	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00339	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1457 :         free(pfile_in_zip_read_info);

  0033f	48 8b cf	 mov	 rcx, rdi
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1458 :         return err;

  00348	8b c5		 mov	 eax, ebp
  0034a	e9 7d fd ff ff	 jmp	 $LN60@unzOpenCur
$LN37@unzOpenCur:

; 1507 : }

  0034f	48 8b 5c 24 78	 mov	 rbx, QWORD PTR [rsp+120]
  00354	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  00359	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0035d	41 5f		 pop	 r15
  0035f	41 5e		 pop	 r14
  00361	5d		 pop	 rbp
  00362	c3		 ret	 0
unzOpenCurrentFile3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFile
_TEXT	SEGMENT
file$ = 64
unzOpenCurrentFile PROC					; COMDAT

; 1509 : extern int ZEXPORT unzOpenCurrentFile(unzFile file) {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1510 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, NULL);

  00004	45 33 c9	 xor	 r9d, r9d
  00007	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00010	45 33 c0	 xor	 r8d, r8d
  00013	33 d2		 xor	 edx, edx
  00015	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1511 : }

  0001a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001e	c3		 ret	 0
unzOpenCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFilePassword
_TEXT	SEGMENT
file$ = 64
password$ = 72
unzOpenCurrentFilePassword PROC				; COMDAT

; 1513 : extern int ZEXPORT unzOpenCurrentFilePassword(unzFile file, const char* password) {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1514 :     return unzOpenCurrentFile3(file, NULL, NULL, 0, password);

  00004	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00009	45 33 c9	 xor	 r9d, r9d
  0000c	33 d2		 xor	 edx, edx
  0000e	45 33 c0	 xor	 r8d, r8d
  00011	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1515 : }

  00016	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0001a	c3		 ret	 0
unzOpenCurrentFilePassword ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzOpenCurrentFile2
_TEXT	SEGMENT
file$ = 64
method$ = 72
level$ = 80
raw$ = 88
unzOpenCurrentFile2 PROC				; COMDAT

; 1517 : extern int ZEXPORT unzOpenCurrentFile2(unzFile file, int* method, int* level, int raw) {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1518 :     return unzOpenCurrentFile3(file, method, level, raw, NULL);

  00004	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0000d	e8 00 00 00 00	 call	 unzOpenCurrentFile3

; 1519 : }

  00012	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00016	c3		 ret	 0
unzOpenCurrentFile2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetCurrentFileZStreamPos64
_TEXT	SEGMENT
file$ = 8
unzGetCurrentFileZStreamPos64 PROC			; COMDAT

; 1524 :     unz64_s* s;
; 1525 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1526 :     s=(unz64_s*)file;
; 1527 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 18		 je	 SHORT $LN5@unzGetCurr

; 1528 :         return 0; //UNZ_PARAMERROR;
; 1529 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00005	48 8b 89 10 01
	00 00		 mov	 rcx, QWORD PTR [rcx+272]

; 1530 :     if (pfile_in_zip_read_info==NULL)

  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 0c		 je	 SHORT $LN5@unzGetCurr

; 1532 :     return pfile_in_zip_read_info->pos_in_zipfile +

  00011	48 8b 81 10 01
	00 00		 mov	 rax, QWORD PTR [rcx+272]
  00018	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]

; 1533 :                          pfile_in_zip_read_info->byte_before_the_zipfile;
; 1534 : }

  0001c	c3		 ret	 0
$LN5@unzGetCurr:

; 1531 :         return 0; //UNZ_PARAMERROR;

  0001d	33 c0		 xor	 eax, eax

; 1533 :                          pfile_in_zip_read_info->byte_before_the_zipfile;
; 1534 : }

  0001f	c3		 ret	 0
unzGetCurrentFileZStreamPos64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzReadCurrentFile
_TEXT	SEGMENT
file$ = 80
buf$ = 88
len$ = 96
unzReadCurrentFile PROC					; COMDAT

; 1548 : extern int ZEXPORT unzReadCurrentFile(unzFile file, voidp buf, unsigned len) {

$LN97:
  00000	40 53		 push	 rbx
  00002	41 55		 push	 r13
  00004	41 57		 push	 r15
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 1549 :     int err=UNZ_OK;
; 1550 :     uInt iRead = 0;

  0000a	45 33 ed	 xor	 r13d, r13d
  0000d	4c 8b f9	 mov	 r15, rcx

; 1551 :     unz64_s* s;
; 1552 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1553 :     if (file==NULL)

  00010	48 85 c9	 test	 rcx, rcx
  00013	0f 84 f8 02 00
	00		 je	 $LN63@unzReadCur

; 1554 :         return UNZ_PARAMERROR;
; 1555 :     s=(unz64_s*)file;
; 1556 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	48 8b 99 10 01
	00 00		 mov	 rbx, QWORD PTR [rcx+272]

; 1557 : 
; 1558 :     if (pfile_in_zip_read_info==NULL)

  00020	48 85 db	 test	 rbx, rbx
  00023	0f 84 e8 02 00
	00		 je	 $LN63@unzReadCur

; 1560 : 
; 1561 : 
; 1562 :     if (pfile_in_zip_read_info->read_buffer == NULL)

  00029	4c 39 2b	 cmp	 QWORD PTR [rbx], r13
  0002c	75 0f		 jne	 SHORT $LN12@unzReadCur

; 1563 :         return UNZ_END_OF_LIST_OF_FILE;

  0002e	b8 9c ff ff ff	 mov	 eax, -100		; ffffffffffffff9cH

; 1749 : }

  00033	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00037	41 5f		 pop	 r15
  00039	41 5d		 pop	 r13
  0003b	5b		 pop	 rbx
  0003c	c3		 ret	 0
$LN12@unzReadCur:
  0003d	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  00042	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00047	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  0004c	4c 89 64 24 28	 mov	 QWORD PTR [rsp+40], r12
  00051	4c 89 74 24 20	 mov	 QWORD PTR [rsp+32], r14

; 1564 :     if (len==0)

  00056	45 85 c0	 test	 r8d, r8d
  00059	0f 84 ab 02 00
	00		 je	 $LN39@unzReadCur

; 1565 :         return 0;
; 1566 : 
; 1567 :     pfile_in_zip_read_info->stream.next_out = (Bytef*)buf;
; 1568 : 
; 1569 :     pfile_in_zip_read_info->stream.avail_out = (uInt)len;
; 1570 : 
; 1571 :     if ((len>pfile_in_zip_read_info->rest_read_uncompressed) &&

  0005f	48 8b 83 a0 00
	00 00		 mov	 rax, QWORD PTR [rbx+160]
  00066	45 8b c8	 mov	 r9d, r8d
  00069	48 89 53 18	 mov	 QWORD PTR [rbx+24], rdx
  0006d	44 89 43 20	 mov	 DWORD PTR [rbx+32], r8d
  00071	4c 3b c8	 cmp	 r9, rax
  00074	76 0f		 jbe	 SHORT $LN14@unzReadCur
  00076	44 39 ab 18 01
	00 00		 cmp	 DWORD PTR [rbx+280], r13d
  0007d	75 06		 jne	 SHORT $LN14@unzReadCur

; 1572 :         (!(pfile_in_zip_read_info->raw)))
; 1573 :         pfile_in_zip_read_info->stream.avail_out =

  0007f	89 43 20	 mov	 DWORD PTR [rbx+32], eax
  00082	44 8b c0	 mov	 r8d, eax
$LN14@unzReadCur:

; 1574 :             (uInt)pfile_in_zip_read_info->rest_read_uncompressed;
; 1575 : 
; 1576 :     if ((len>pfile_in_zip_read_info->rest_read_compressed+
; 1577 :            pfile_in_zip_read_info->stream.avail_in) &&

  00085	48 8b 8b 98 00
	00 00		 mov	 rcx, QWORD PTR [rbx+152]
  0008c	8b 53 10	 mov	 edx, DWORD PTR [rbx+16]
  0008f	48 8d 04 11	 lea	 rax, QWORD PTR [rcx+rdx]
  00093	4c 3b c8	 cmp	 r9, rax
  00096	76 11		 jbe	 SHORT $LN36@unzReadCur
  00098	44 39 ab 18 01
	00 00		 cmp	 DWORD PTR [rbx+280], r13d
  0009f	74 08		 je	 SHORT $LN36@unzReadCur

; 1578 :          (pfile_in_zip_read_info->raw))
; 1579 :         pfile_in_zip_read_info->stream.avail_out =

  000a1	44 8d 04 11	 lea	 r8d, DWORD PTR [rcx+rdx]
  000a5	44 89 43 20	 mov	 DWORD PTR [rbx+32], r8d
$LN36@unzReadCur:

; 1580 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1581 :             pfile_in_zip_read_info->stream.avail_in;
; 1582 : 
; 1583 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  000a9	45 85 c0	 test	 r8d, r8d
  000ac	0f 84 46 02 00
	00		 je	 $LN59@unzReadCur
$LN95@unzReadCur:

; 1584 :     {
; 1585 :         if ((pfile_in_zip_read_info->stream.avail_in==0) &&

  000b2	8b 6b 10	 mov	 ebp, DWORD PTR [rbx+16]
  000b5	48 be 00 00 00
	00 01 00 00 00	 mov	 rsi, 4294967296		; 0000000100000000H
  000bf	bf fd ff ff ff	 mov	 edi, -3
  000c4	85 ed		 test	 ebp, ebp
  000c6	0f 85 e7 00 00
	00		 jne	 $LN16@unzReadCur
  000cc	48 8b 83 98 00
	00 00		 mov	 rax, QWORD PTR [rbx+152]
  000d3	48 85 c0	 test	 rax, rax
  000d6	0f 84 d7 00 00
	00		 je	 $LN16@unzReadCur

; 1586 :             (pfile_in_zip_read_info->rest_read_compressed>0))
; 1587 :         {
; 1588 :             uInt uReadThis = UNZ_BUFSIZE;

  000dc	bd 00 40 00 00	 mov	 ebp, 16384		; 00004000H

; 1589 :             if (pfile_in_zip_read_info->rest_read_compressed<uReadThis)

  000e1	48 3b c5	 cmp	 rax, rbp
  000e4	73 0a		 jae	 SHORT $LN61@unzReadCur

; 1590 :                 uReadThis = (uInt)pfile_in_zip_read_info->rest_read_compressed;

  000e6	8b e8		 mov	 ebp, eax

; 1591 :             if (uReadThis == 0)

  000e8	85 c0		 test	 eax, eax
  000ea	0f 84 1a 02 00
	00		 je	 $LN39@unzReadCur
$LN61@unzReadCur:

; 1593 :             if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1594 :                       pfile_in_zip_read_info->filestream,
; 1595 :                       pfile_in_zip_read_info->pos_in_zipfile +
; 1596 :                          pfile_in_zip_read_info->byte_before_the_zipfile,
; 1597 :                          ZLIB_FILEFUNC_SEEK_SET)!=0)

  000f0	4c 8b 83 10 01
	00 00		 mov	 r8, QWORD PTR [rbx+272]
  000f7	48 8d 8b a8 00
	00 00		 lea	 rcx, QWORD PTR [rbx+168]
  000fe	4c 03 43 60	 add	 r8, QWORD PTR [rbx+96]
  00102	45 33 c9	 xor	 r9d, r9d
  00105	48 8b 93 00 01
	00 00		 mov	 rdx, QWORD PTR [rbx+256]
  0010c	e8 00 00 00 00	 call	 call_zseek64
  00111	85 c0		 test	 eax, eax
  00113	0f 85 e7 01 00
	00		 jne	 $LN40@unzReadCur

; 1599 :             if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1600 :                       pfile_in_zip_read_info->filestream,
; 1601 :                       pfile_in_zip_read_info->read_buffer,
; 1602 :                       uReadThis)!=uReadThis)

  00119	48 8b 83 b0 00
	00 00		 mov	 rax, QWORD PTR [rbx+176]
  00120	44 8b cd	 mov	 r9d, ebp
  00123	4c 8b 03	 mov	 r8, QWORD PTR [rbx]
  00126	48 8b 93 00 01
	00 00		 mov	 rdx, QWORD PTR [rbx+256]
  0012d	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  00134	ff d0		 call	 rax
  00136	3b c5		 cmp	 eax, ebp
  00138	0f 85 c2 01 00
	00		 jne	 $LN40@unzReadCur

; 1603 :                 return UNZ_ERRNO;
; 1604 : 
; 1605 : 
; 1606 : #            ifndef NOUNCRYPT
; 1607 :             if(s->encrypted)

  0013e	41 83 bf 18 01
	00 00 00	 cmp	 DWORD PTR [r15+280], 0
  00146	74 54		 je	 SHORT $LN5@unzReadCur

; 1608 :             {
; 1609 :                 uInt i;
; 1610 :                 for(i=0;i<uReadThis;i++)

  00148	85 ed		 test	 ebp, ebp
  0014a	74 50		 je	 SHORT $LN5@unzReadCur
  0014c	33 ff		 xor	 edi, edi
  0014e	44 8b f5	 mov	 r14d, ebp
$LL6@unzReadCur:

; 1611 :                   pfile_in_zip_read_info->read_buffer[i] =

  00151	4c 8b 03	 mov	 r8, QWORD PTR [rbx]
  00154	49 8d 8f 20 01
	00 00		 lea	 rcx, QWORD PTR [r15+288]
  0015b	e8 00 00 00 00	 call	 decrypt_byte
  00160	41 30 04 38	 xor	 BYTE PTR [r8+rdi], al
  00164	49 8d 8f 20 01
	00 00		 lea	 rcx, QWORD PTR [r15+288]
  0016b	45 0f be 04 38	 movsx	 r8d, BYTE PTR [r8+rdi]
  00170	49 8b 97 30 01
	00 00		 mov	 rdx, QWORD PTR [r15+304]
  00177	e8 00 00 00 00	 call	 update_keys
  0017c	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0017f	48 8d 7f 01	 lea	 rdi, QWORD PTR [rdi+1]
  00183	88 44 0f ff	 mov	 BYTE PTR [rdi+rcx-1], al
  00187	49 83 ee 01	 sub	 r14, 1
  0018b	75 c4		 jne	 SHORT $LL6@unzReadCur
  0018d	bf fd ff ff ff	 mov	 edi, -3
  00192	48 be 00 00 00
	00 01 00 00 00	 mov	 rsi, 4294967296		; 0000000100000000H
$LN5@unzReadCur:

; 1612 :                       (char)zdecode(s->keys,s->pcrc_32_tab,
; 1613 :                               pfile_in_zip_read_info->read_buffer[i]);
; 1614 :             }
; 1615 : #            endif
; 1616 : 
; 1617 : 
; 1618 :             pfile_in_zip_read_info->pos_in_zipfile += uReadThis;

  0019c	8b c5		 mov	 eax, ebp
  0019e	48 01 43 60	 add	 QWORD PTR [rbx+96], rax

; 1619 : 
; 1620 :             pfile_in_zip_read_info->rest_read_compressed-=uReadThis;

  001a2	48 29 83 98 00
	00 00		 sub	 QWORD PTR [rbx+152], rax

; 1621 : 
; 1622 :             pfile_in_zip_read_info->stream.next_in =

  001a9	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  001ac	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1623 :                 (Bytef*)pfile_in_zip_read_info->read_buffer;
; 1624 :             pfile_in_zip_read_info->stream.avail_in = (uInt)uReadThis;

  001b0	89 6b 10	 mov	 DWORD PTR [rbx+16], ebp
$LN16@unzReadCur:

; 1625 :         }
; 1626 : 
; 1627 :         if ((pfile_in_zip_read_info->compression_method==0) || (pfile_in_zip_read_info->raw))

  001b3	8b 83 08 01 00
	00		 mov	 eax, DWORD PTR [rbx+264]
  001b9	85 c0		 test	 eax, eax
  001bb	0f 84 ae 00 00
	00		 je	 $LN60@unzReadCur
  001c1	83 bb 18 01 00
	00 00		 cmp	 DWORD PTR [rbx+280], 0
  001c8	0f 85 a1 00 00
	00		 jne	 $LN60@unzReadCur

; 1657 :         }
; 1658 :         else if (pfile_in_zip_read_info->compression_method==Z_BZIP2ED)

  001ce	83 f8 0c	 cmp	 eax, 12
  001d1	0f 84 17 01 00
	00		 je	 $LN33@unzReadCur

; 1659 :         {
; 1660 : #ifdef HAVE_BZIP2
; 1661 :             uLong uTotalOutBefore,uTotalOutAfter;
; 1662 :             const Bytef *bufBefore;
; 1663 :             uLong uOutThis;
; 1664 : 
; 1665 :             pfile_in_zip_read_info->bstream.next_in        = (char*)pfile_in_zip_read_info->stream.next_in;
; 1666 :             pfile_in_zip_read_info->bstream.avail_in       = pfile_in_zip_read_info->stream.avail_in;
; 1667 :             pfile_in_zip_read_info->bstream.total_in_lo32  = pfile_in_zip_read_info->stream.total_in;
; 1668 :             pfile_in_zip_read_info->bstream.total_in_hi32  = 0;
; 1669 :             pfile_in_zip_read_info->bstream.next_out       = (char*)pfile_in_zip_read_info->stream.next_out;
; 1670 :             pfile_in_zip_read_info->bstream.avail_out      = pfile_in_zip_read_info->stream.avail_out;
; 1671 :             pfile_in_zip_read_info->bstream.total_out_lo32 = pfile_in_zip_read_info->stream.total_out;
; 1672 :             pfile_in_zip_read_info->bstream.total_out_hi32 = 0;
; 1673 : 
; 1674 :             uTotalOutBefore = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1675 :             bufBefore = (const Bytef *)pfile_in_zip_read_info->bstream.next_out;
; 1676 : 
; 1677 :             err=BZ2_bzDecompress(&pfile_in_zip_read_info->bstream);
; 1678 : 
; 1679 :             uTotalOutAfter = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1680 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1681 : 
; 1682 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1683 : 
; 1684 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,bufBefore, (uInt)(uOutThis));
; 1685 :             pfile_in_zip_read_info->rest_read_uncompressed -= uOutThis;
; 1686 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);
; 1687 : 
; 1688 :             pfile_in_zip_read_info->stream.next_in   = (Bytef*)pfile_in_zip_read_info->bstream.next_in;
; 1689 :             pfile_in_zip_read_info->stream.avail_in  = pfile_in_zip_read_info->bstream.avail_in;
; 1690 :             pfile_in_zip_read_info->stream.total_in  = pfile_in_zip_read_info->bstream.total_in_lo32;
; 1691 :             pfile_in_zip_read_info->stream.next_out  = (Bytef*)pfile_in_zip_read_info->bstream.next_out;
; 1692 :             pfile_in_zip_read_info->stream.avail_out = pfile_in_zip_read_info->bstream.avail_out;
; 1693 :             pfile_in_zip_read_info->stream.total_out = pfile_in_zip_read_info->bstream.total_out_lo32;
; 1694 : 
; 1695 :             if (err==BZ_STREAM_END)
; 1696 :               return (iRead==0) ? UNZ_EOF : iRead;
; 1697 :             if (err!=BZ_OK)
; 1698 :               break;
; 1699 : #endif
; 1700 :         } // end Z_BZIP2ED
; 1701 :         else
; 1702 :         {
; 1703 :             ZPOS64_T uTotalOutBefore,uTotalOutAfter;
; 1704 :             const Bytef *bufBefore;
; 1705 :             ZPOS64_T uOutThis;
; 1706 :             int flush=Z_SYNC_FLUSH;
; 1707 : 
; 1708 :             uTotalOutBefore = pfile_in_zip_read_info->stream.total_out;

  001d7	44 8b 73 24	 mov	 r14d, DWORD PTR [rbx+36]

; 1709 :             bufBefore = pfile_in_zip_read_info->stream.next_out;
; 1710 : 
; 1711 :             /*
; 1712 :             if ((pfile_in_zip_read_info->rest_read_uncompressed ==
; 1713 :                      pfile_in_zip_read_info->stream.avail_out) &&
; 1714 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1715 :                 flush = Z_FINISH;
; 1716 :             */
; 1717 :             err=inflate(&pfile_in_zip_read_info->stream,flush);

  001db	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
  001df	4c 8b 63 18	 mov	 r12, QWORD PTR [rbx+24]
  001e3	ba 02 00 00 00	 mov	 edx, 2
  001e8	e8 00 00 00 00	 call	 inflate
  001ed	8b e8		 mov	 ebp, eax

; 1718 : 
; 1719 :             if ((err>=0) && (pfile_in_zip_read_info->stream.msg!=NULL))

  001ef	85 c0		 test	 eax, eax
  001f1	78 08		 js	 SHORT $LN30@unzReadCur
  001f3	48 83 7b 28 00	 cmp	 QWORD PTR [rbx+40], 0
  001f8	0f 45 ef	 cmovne	 ebp, edi
$LN30@unzReadCur:

; 1720 :               err = Z_DATA_ERROR;
; 1721 : 
; 1722 :             uTotalOutAfter = pfile_in_zip_read_info->stream.total_out;

  001fb	8b 4b 24	 mov	 ecx, DWORD PTR [rbx+36]

; 1723 :             /* Detect overflow, because z_stream.total_out is uLong (32 bits) */
; 1724 :             if (uTotalOutAfter<uTotalOutBefore)
; 1725 :                 uTotalOutAfter += 1LL << 32; /* Add maximum value of uLong + 1 */
; 1726 :             uOutThis = uTotalOutAfter-uTotalOutBefore;
; 1727 : 
; 1728 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uOutThis;
; 1729 : 
; 1730 :             pfile_in_zip_read_info->crc32 =

  001fe	49 8b d4	 mov	 rdx, r12
  00201	48 03 f1	 add	 rsi, rcx
  00204	49 3b ce	 cmp	 rcx, r14
  00207	48 0f 43 f1	 cmovae	 rsi, rcx
  0020b	8b 8b 90 00 00
	00		 mov	 ecx, DWORD PTR [rbx+144]
  00211	48 8b fe	 mov	 rdi, rsi
  00214	49 2b fe	 sub	 rdi, r14
  00217	48 01 bb 88 00
	00 00		 add	 QWORD PTR [rbx+136], rdi
  0021e	44 8b c7	 mov	 r8d, edi
  00221	e8 00 00 00 00	 call	 crc32

; 1731 :                 crc32(pfile_in_zip_read_info->crc32,bufBefore,
; 1732 :                         (uInt)(uOutThis));
; 1733 : 
; 1734 :             pfile_in_zip_read_info->rest_read_uncompressed -=

  00226	48 29 bb a0 00
	00 00		 sub	 QWORD PTR [rbx+160], rdi

; 1735 :                 uOutThis;
; 1736 : 
; 1737 :             iRead += (uInt)(uTotalOutAfter - uTotalOutBefore);

  0022d	41 2b f6	 sub	 esi, r14d
  00230	44 03 ee	 add	 r13d, esi
  00233	89 83 90 00 00
	00		 mov	 DWORD PTR [rbx+144], eax

; 1738 : 
; 1739 :             if (err==Z_STREAM_END)

  00239	83 fd 01	 cmp	 ebp, 1
  0023c	0f 84 b6 00 00
	00		 je	 $LN59@unzReadCur

; 1740 :                 return (iRead==0) ? UNZ_EOF : (int)iRead;
; 1741 :             if (err!=Z_OK)

  00242	85 ed		 test	 ebp, ebp
  00244	0f 84 a4 00 00
	00		 je	 $LN33@unzReadCur

; 1748 :     return err;

  0024a	8b c5		 mov	 eax, ebp
$LN94@unzReadCur:
  0024c	4c 8b 64 24 28	 mov	 r12, QWORD PTR [rsp+40]
  00251	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
  00256	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  0025b	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  00260	4c 8b 74 24 20	 mov	 r14, QWORD PTR [rsp+32]

; 1749 : }

  00265	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00269	41 5f		 pop	 r15
  0026b	41 5d		 pop	 r13
  0026d	5b		 pop	 rbx
  0026e	c3		 ret	 0
$LN60@unzReadCur:

; 1628 :         {
; 1629 :             uInt uDoCopy,i ;
; 1630 : 
; 1631 :             if ((pfile_in_zip_read_info->stream.avail_in == 0) &&

  0026f	85 ed		 test	 ebp, ebp
  00271	75 0a		 jne	 SHORT $LN25@unzReadCur
  00273	48 83 bb 98 00
	00 00 00	 cmp	 QWORD PTR [rbx+152], 0
  0027b	74 7b		 je	 SHORT $LN59@unzReadCur
$LN25@unzReadCur:

; 1632 :                 (pfile_in_zip_read_info->rest_read_compressed == 0))
; 1633 :                 return (iRead==0) ? UNZ_EOF : (int)iRead;
; 1634 : 
; 1635 :             if (pfile_in_zip_read_info->stream.avail_out <

  0027d	39 6b 20	 cmp	 DWORD PTR [rbx+32], ebp
  00280	0f 42 6b 20	 cmovb	 ebp, DWORD PTR [rbx+32]

; 1636 :                             pfile_in_zip_read_info->stream.avail_in)
; 1637 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_out ;
; 1638 :             else
; 1639 :                 uDoCopy = pfile_in_zip_read_info->stream.avail_in ;
; 1640 : 
; 1641 :             for (i=0;i<uDoCopy;i++)

  00284	85 ed		 test	 ebp, ebp
  00286	74 23		 je	 SHORT $LN8@unzReadCur
  00288	33 d2		 xor	 edx, edx
  0028a	44 8b c5	 mov	 r8d, ebp
  0028d	0f 1f 00	 npad	 3
$LL9@unzReadCur:

; 1642 :                 *(pfile_in_zip_read_info->stream.next_out+i) =

  00290	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00294	48 8d 52 01	 lea	 rdx, QWORD PTR [rdx+1]
  00298	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  0029c	0f b6 44 02 ff	 movzx	 eax, BYTE PTR [rdx+rax-1]
  002a1	88 44 0a ff	 mov	 BYTE PTR [rdx+rcx-1], al
  002a5	49 83 e8 01	 sub	 r8, 1
  002a9	75 e5		 jne	 SHORT $LL9@unzReadCur
$LN8@unzReadCur:

; 1643 :                         *(pfile_in_zip_read_info->stream.next_in+i);
; 1644 : 
; 1645 :             pfile_in_zip_read_info->total_out_64 = pfile_in_zip_read_info->total_out_64 + uDoCopy;
; 1646 : 
; 1647 :             pfile_in_zip_read_info->crc32 = crc32(pfile_in_zip_read_info->crc32,

  002ab	48 8b 7b 18	 mov	 rdi, QWORD PTR [rbx+24]
  002af	44 8b c5	 mov	 r8d, ebp
  002b2	8b 8b 90 00 00
	00		 mov	 ecx, DWORD PTR [rbx+144]
  002b8	48 8b d7	 mov	 rdx, rdi
  002bb	8b f5		 mov	 esi, ebp
  002bd	48 01 b3 88 00
	00 00		 add	 QWORD PTR [rbx+136], rsi
  002c4	e8 00 00 00 00	 call	 crc32

; 1648 :                                 pfile_in_zip_read_info->stream.next_out,
; 1649 :                                 uDoCopy);
; 1650 :             pfile_in_zip_read_info->rest_read_uncompressed-=uDoCopy;

  002c9	48 29 b3 a0 00
	00 00		 sub	 QWORD PTR [rbx+160], rsi

; 1651 :             pfile_in_zip_read_info->stream.avail_in -= uDoCopy;

  002d0	29 6b 10	 sub	 DWORD PTR [rbx+16], ebp

; 1652 :             pfile_in_zip_read_info->stream.avail_out -= uDoCopy;

  002d3	29 6b 20	 sub	 DWORD PTR [rbx+32], ebp

; 1653 :             pfile_in_zip_read_info->stream.next_out += uDoCopy;
; 1654 :             pfile_in_zip_read_info->stream.next_in += uDoCopy;

  002d6	48 01 73 08	 add	 QWORD PTR [rbx+8], rsi

; 1655 :             pfile_in_zip_read_info->stream.total_out += uDoCopy;

  002da	01 6b 24	 add	 DWORD PTR [rbx+36], ebp
  002dd	89 83 90 00 00
	00		 mov	 DWORD PTR [rbx+144], eax

; 1656 :             iRead += uDoCopy;

  002e3	44 03 ed	 add	 r13d, ebp
  002e6	48 8d 04 2f	 lea	 rax, QWORD PTR [rdi+rbp]
  002ea	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
$LN33@unzReadCur:

; 1580 :             (uInt)pfile_in_zip_read_info->rest_read_compressed+
; 1581 :             pfile_in_zip_read_info->stream.avail_in;
; 1582 : 
; 1583 :     while (pfile_in_zip_read_info->stream.avail_out>0)

  002ee	83 7b 20 00	 cmp	 DWORD PTR [rbx+32], 0
  002f2	0f 87 ba fd ff
	ff		 ja	 $LN95@unzReadCur
$LN59@unzReadCur:

; 1742 :                 break;
; 1743 :         }
; 1744 :     }
; 1745 : 
; 1746 :     if (err==Z_OK)
; 1747 :         return (int)iRead;

  002f8	41 8b c5	 mov	 eax, r13d
  002fb	e9 4c ff ff ff	 jmp	 $LN94@unzReadCur
$LN40@unzReadCur:

; 1598 :                 return UNZ_ERRNO;

  00300	b8 ff ff ff ff	 mov	 eax, -1
  00305	e9 42 ff ff ff	 jmp	 $LN94@unzReadCur
$LN39@unzReadCur:

; 1592 :                 return UNZ_EOF;

  0030a	33 c0		 xor	 eax, eax
  0030c	e9 3b ff ff ff	 jmp	 $LN94@unzReadCur
$LN63@unzReadCur:

; 1559 :         return UNZ_PARAMERROR;

  00311	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1749 : }

  00316	48 83 c4 30	 add	 rsp, 48			; 00000030H
  0031a	41 5f		 pop	 r15
  0031c	41 5d		 pop	 r13
  0031e	5b		 pop	 rbx
  0031f	c3		 ret	 0
unzReadCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unztell
_TEXT	SEGMENT
file$ = 8
unztell	PROC						; COMDAT

; 1756 :     unz64_s* s;
; 1757 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1758 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 10		 je	 SHORT $LN5@unztell

; 1759 :         return UNZ_PARAMERROR;
; 1760 :     s=(unz64_s*)file;
; 1761 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00005	48 8b 81 10 01
	00 00		 mov	 rax, QWORD PTR [rcx+272]

; 1762 : 
; 1763 :     if (pfile_in_zip_read_info==NULL)

  0000c	48 85 c0	 test	 rax, rax
  0000f	74 04		 je	 SHORT $LN5@unztell

; 1765 : 
; 1766 :     return (z_off_t)pfile_in_zip_read_info->stream.total_out;

  00011	8b 40 24	 mov	 eax, DWORD PTR [rax+36]

; 1767 : }

  00014	c3		 ret	 0
$LN5@unztell:

; 1764 :         return UNZ_PARAMERROR;

  00015	48 c7 c0 9a ff
	ff ff		 mov	 rax, -102		; ffffffffffffff9aH

; 1767 : }

  0001c	c3		 ret	 0
unztell	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unztell64
_TEXT	SEGMENT
file$ = 8
unztell64 PROC						; COMDAT

; 1770 : 
; 1771 :     unz64_s* s;
; 1772 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1773 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 14		 je	 SHORT $LN5@unztell64

; 1774 :         return (ZPOS64_T)-1;
; 1775 :     s=(unz64_s*)file;
; 1776 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00005	48 8b 81 10 01
	00 00		 mov	 rax, QWORD PTR [rcx+272]

; 1777 : 
; 1778 :     if (pfile_in_zip_read_info==NULL)

  0000c	48 85 c0	 test	 rax, rax
  0000f	74 08		 je	 SHORT $LN5@unztell64

; 1780 : 
; 1781 :     return pfile_in_zip_read_info->total_out_64;

  00011	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]

; 1782 : }

  00018	c3		 ret	 0
$LN5@unztell64:

; 1779 :         return (ZPOS64_T)-1;

  00019	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 1782 : }

  00020	c3		 ret	 0
unztell64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzeof
_TEXT	SEGMENT
file$ = 8
unzeof	PROC						; COMDAT

; 1789 :     unz64_s* s;
; 1790 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1791 :     if (file==NULL)

  00000	48 85 c9	 test	 rcx, rcx
  00003	74 19		 je	 SHORT $LN7@unzeof

; 1792 :         return UNZ_PARAMERROR;
; 1793 :     s=(unz64_s*)file;
; 1794 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00005	48 8b 91 10 01
	00 00		 mov	 rdx, QWORD PTR [rcx+272]

; 1795 : 
; 1796 :     if (pfile_in_zip_read_info==NULL)

  0000c	48 85 d2	 test	 rdx, rdx
  0000f	74 0d		 je	 SHORT $LN7@unzeof

; 1798 : 
; 1799 :     if (pfile_in_zip_read_info->rest_read_uncompressed == 0)

  00011	33 c0		 xor	 eax, eax
  00013	48 39 82 a0 00
	00 00		 cmp	 QWORD PTR [rdx+160], rax
  0001a	0f 94 c0	 sete	 al

; 1800 :         return 1;
; 1801 :     else
; 1802 :         return 0;
; 1803 : }

  0001d	c3		 ret	 0
$LN7@unzeof:

; 1797 :         return UNZ_PARAMERROR;

  0001e	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1800 :         return 1;
; 1801 :     else
; 1802 :         return 0;
; 1803 : }

  00023	c3		 ret	 0
unzeof	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetLocalExtrafield
_TEXT	SEGMENT
file$ = 48
buf$ = 56
len$ = 64
unzGetLocalExtrafield PROC				; COMDAT

; 1819 : extern int ZEXPORT unzGetLocalExtrafield(unzFile file, voidp buf, unsigned len) {

$LN21:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b f8	 mov	 edi, r8d
  00012	48 8b f2	 mov	 rsi, rdx

; 1820 :     unz64_s* s;
; 1821 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1822 :     uInt read_now;
; 1823 :     ZPOS64_T size_to_read;
; 1824 : 
; 1825 :     if (file==NULL)

  00015	48 85 c9	 test	 rcx, rcx
  00018	0f 84 bc 00 00
	00		 je	 $LN13@unzGetLoca

; 1826 :         return UNZ_PARAMERROR;
; 1827 :     s=(unz64_s*)file;
; 1828 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  0001e	48 8b 99 10 01
	00 00		 mov	 rbx, QWORD PTR [rcx+272]

; 1829 : 
; 1830 :     if (pfile_in_zip_read_info==NULL)

  00025	48 85 db	 test	 rbx, rbx
  00028	0f 84 ac 00 00
	00		 je	 $LN13@unzGetLoca

; 1831 :         return UNZ_PARAMERROR;
; 1832 : 
; 1833 :     size_to_read = (pfile_in_zip_read_info->size_local_extrafield -

  0002e	4c 8b 83 80 00
	00 00		 mov	 r8, QWORD PTR [rbx+128]
  00035	8b 4b 78	 mov	 ecx, DWORD PTR [rbx+120]
  00038	49 2b c8	 sub	 rcx, r8

; 1834 :                 pfile_in_zip_read_info->pos_local_extrafield);
; 1835 : 
; 1836 :     if (buf==NULL)

  0003b	48 85 d2	 test	 rdx, rdx
  0003e	75 12		 jne	 SHORT $LN4@unzGetLoca

; 1837 :         return (int)size_to_read;

  00040	8b c1		 mov	 eax, ecx

; 1858 : 
; 1859 :     return (int)read_now;
; 1860 : }

  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0004c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00050	5f		 pop	 rdi
  00051	c3		 ret	 0
$LN4@unzGetLoca:

; 1838 : 
; 1839 :     if (len>size_to_read)

  00052	48 3b f9	 cmp	 rdi, rcx
  00055	0f 47 f9	 cmova	 edi, ecx

; 1840 :         read_now = (uInt)size_to_read;
; 1841 :     else
; 1842 :         read_now = (uInt)len ;
; 1843 : 
; 1844 :     if (read_now==0)

  00058	85 ff		 test	 edi, edi
  0005a	75 12		 jne	 SHORT $LN7@unzGetLoca

; 1845 :         return 0;

  0005c	33 c0		 xor	 eax, eax

; 1858 : 
; 1859 :     return (int)read_now;
; 1860 : }

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
$LN7@unzGetLoca:

; 1846 : 
; 1847 :     if (ZSEEK64(pfile_in_zip_read_info->z_filefunc,
; 1848 :               pfile_in_zip_read_info->filestream,
; 1849 :               pfile_in_zip_read_info->offset_local_extrafield +
; 1850 :               pfile_in_zip_read_info->pos_local_extrafield,
; 1851 :               ZLIB_FILEFUNC_SEEK_SET)!=0)

  0006e	4c 03 43 70	 add	 r8, QWORD PTR [rbx+112]
  00072	48 8d 8b a8 00
	00 00		 lea	 rcx, QWORD PTR [rbx+168]
  00079	48 8b 93 00 01
	00 00		 mov	 rdx, QWORD PTR [rbx+256]
  00080	45 33 c9	 xor	 r9d, r9d
  00083	e8 00 00 00 00	 call	 call_zseek64
  00088	85 c0		 test	 eax, eax
  0008a	75 39		 jne	 SHORT $LN11@unzGetLoca

; 1852 :         return UNZ_ERRNO;
; 1853 : 
; 1854 :     if (ZREAD64(pfile_in_zip_read_info->z_filefunc,
; 1855 :               pfile_in_zip_read_info->filestream,
; 1856 :               buf,read_now)!=read_now)

  0008c	48 8b 83 b0 00
	00 00		 mov	 rax, QWORD PTR [rbx+176]
  00093	44 8b cf	 mov	 r9d, edi
  00096	48 8b 93 00 01
	00 00		 mov	 rdx, QWORD PTR [rbx+256]
  0009d	4c 8b c6	 mov	 r8, rsi
  000a0	48 8b 8b e0 00
	00 00		 mov	 rcx, QWORD PTR [rbx+224]
  000a7	ff d0		 call	 rax
  000a9	3b c7		 cmp	 eax, edi
  000ab	b9 ff ff ff ff	 mov	 ecx, -1
  000b0	0f 45 f9	 cmovne	 edi, ecx
  000b3	8b c7		 mov	 eax, edi

; 1858 : 
; 1859 :     return (int)read_now;
; 1860 : }

  000b5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000ba	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000bf	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c3	5f		 pop	 rdi
  000c4	c3		 ret	 0
$LN11@unzGetLoca:

; 1857 :         return UNZ_ERRNO;

  000c5	b8 ff ff ff ff	 mov	 eax, -1

; 1858 : 
; 1859 :     return (int)read_now;
; 1860 : }

  000ca	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000cf	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000d4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000d8	5f		 pop	 rdi
  000d9	c3		 ret	 0
$LN13@unzGetLoca:
  000da	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000df	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  000e4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000ed	5f		 pop	 rdi
  000ee	c3		 ret	 0
unzGetLocalExtrafield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzCloseCurrentFile
_TEXT	SEGMENT
file$ = 48
unzCloseCurrentFile PROC				; COMDAT

; 1866 : extern int ZEXPORT unzCloseCurrentFile(unzFile file) {

$LN16:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1867 :     int err=UNZ_OK;

  0000f	33 ff		 xor	 edi, edi
  00011	48 8b f1	 mov	 rsi, rcx

; 1868 : 
; 1869 :     unz64_s* s;
; 1870 :     file_in_zip64_read_info_s* pfile_in_zip_read_info;
; 1871 :     if (file==NULL)

  00014	48 85 c9	 test	 rcx, rcx
  00017	74 7d		 je	 SHORT $LN8@unzCloseCu

; 1872 :         return UNZ_PARAMERROR;
; 1873 :     s=(unz64_s*)file;
; 1874 :     pfile_in_zip_read_info=s->pfile_in_zip_read;

  00019	48 8b 99 10 01
	00 00		 mov	 rbx, QWORD PTR [rcx+272]

; 1875 : 
; 1876 :     if (pfile_in_zip_read_info==NULL)

  00020	48 85 db	 test	 rbx, rbx
  00023	74 71		 je	 SHORT $LN8@unzCloseCu

; 1877 :         return UNZ_PARAMERROR;
; 1878 : 
; 1879 : 
; 1880 :     if ((pfile_in_zip_read_info->rest_read_uncompressed == 0) &&

  00025	48 39 bb a0 00
	00 00		 cmp	 QWORD PTR [rbx+160], rdi
  0002c	75 1c		 jne	 SHORT $LN5@unzCloseCu
  0002e	39 bb 18 01 00
	00		 cmp	 DWORD PTR [rbx+280], edi
  00034	75 14		 jne	 SHORT $LN5@unzCloseCu

; 1881 :         (!pfile_in_zip_read_info->raw))
; 1882 :     {
; 1883 :         if (pfile_in_zip_read_info->crc32 != pfile_in_zip_read_info->crc32_wait)

  00036	8b 83 94 00 00
	00		 mov	 eax, DWORD PTR [rbx+148]
  0003c	b9 97 ff ff ff	 mov	 ecx, -105		; ffffffffffffff97H
  00041	39 83 90 00 00
	00		 cmp	 DWORD PTR [rbx+144], eax
  00047	0f 45 f9	 cmovne	 edi, ecx
$LN5@unzCloseCu:

; 1884 :             err=UNZ_CRCERROR;
; 1885 :     }
; 1886 : 
; 1887 : 
; 1888 :     free(pfile_in_zip_read_info->read_buffer);

  0004a	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1889 :     pfile_in_zip_read_info->read_buffer = NULL;
; 1890 :     if (pfile_in_zip_read_info->stream_initialised == Z_DEFLATED)

  00053	83 7b 68 08	 cmp	 DWORD PTR [rbx+104], 8
  00057	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  0005e	75 09		 jne	 SHORT $LN6@unzCloseCu

; 1891 :         inflateEnd(&pfile_in_zip_read_info->stream);

  00060	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
  00064	e8 00 00 00 00	 call	 inflateEnd
$LN6@unzCloseCu:

; 1892 : #ifdef HAVE_BZIP2
; 1893 :     else if (pfile_in_zip_read_info->stream_initialised == Z_BZIP2ED)
; 1894 :         BZ2_bzDecompressEnd(&pfile_in_zip_read_info->bstream);
; 1895 : #endif
; 1896 : 
; 1897 : 
; 1898 :     pfile_in_zip_read_info->stream_initialised = 0;
; 1899 :     free(pfile_in_zip_read_info);

  00069	48 8b cb	 mov	 rcx, rbx
  0006c	c7 43 68 00 00
	00 00		 mov	 DWORD PTR [rbx+104], 0
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1900 : 
; 1901 :     s->pfile_in_zip_read=NULL;
; 1902 : 
; 1903 :     return err;

  00079	8b c7		 mov	 eax, edi
  0007b	48 c7 86 10 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rsi+272], 0

; 1904 : }

  00086	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0008b	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00090	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00094	5f		 pop	 rdi
  00095	c3		 ret	 0
$LN8@unzCloseCu:
  00096	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009b	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH
  000a0	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000a5	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
unzCloseCurrentFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Programming\AGE\Engine\libs\vendor\zlib\contrib\minizip\unzip.c
;	COMDAT unzGetGlobalComment
_TEXT	SEGMENT
file$ = 48
szComment$ = 56
uSizeBuf$ = 64
unzGetGlobalComment PROC				; COMDAT

; 1912 : extern int ZEXPORT unzGetGlobalComment(unzFile file, char * szComment, uLong uSizeBuf) {

$LN18:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 6c 24 18	 mov	 QWORD PTR [rsp+24], rbp
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	41 8b e8	 mov	 ebp, r8d
  00012	48 8b fa	 mov	 rdi, rdx
  00015	48 8b d9	 mov	 rbx, rcx

; 1913 :     unz64_s* s;
; 1914 :     uLong uReadThis ;
; 1915 :     if (file==NULL)

  00018	48 85 c9	 test	 rcx, rcx
  0001b	75 15		 jne	 SHORT $LN2@unzGetGlob

; 1916 :         return (int)UNZ_PARAMERROR;

  0001d	b8 9a ff ff ff	 mov	 eax, -102		; ffffffffffffff9aH

; 1936 : }

  00022	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00027	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  0002c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00030	5f		 pop	 rdi
  00031	c3		 ret	 0
$LN2@unzGetGlob:

; 1917 :     s=(unz64_s*)file;
; 1918 : 
; 1919 :     uReadThis = uSizeBuf;
; 1920 :     if (uReadThis>s->gi.size_comment)

  00032	3b 69 70	 cmp	 ebp, DWORD PTR [rcx+112]

; 1921 :         uReadThis = s->gi.size_comment;
; 1922 : 
; 1923 :     if (ZSEEK64(s->z_filefunc,s->filestream,s->central_pos+22,ZLIB_FILEFUNC_SEEK_SET)!=0)

  00035	4c 8b 81 98 00
	00 00		 mov	 r8, QWORD PTR [rcx+152]
  0003c	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  00040	48 89 74 24 30	 mov	 QWORD PTR [rsp+48], rsi
  00045	8b f5		 mov	 esi, ebp
  00047	0f 47 71 70	 cmova	 esi, DWORD PTR [rcx+112]
  0004b	49 83 c0 16	 add	 r8, 22
  0004f	45 33 c9	 xor	 r9d, r9d
  00052	e8 00 00 00 00	 call	 call_zseek64
  00057	85 c0		 test	 eax, eax
  00059	75 32		 jne	 SHORT $LN9@unzGetGlob

; 1924 :         return UNZ_ERRNO;
; 1925 : 
; 1926 :     if (uReadThis>0)

  0005b	85 f6		 test	 esi, esi
  0005d	74 1a		 je	 SHORT $LN6@unzGetGlob

; 1927 :     {
; 1928 :       *szComment='\0';

  0005f	88 07		 mov	 BYTE PTR [rdi], al

; 1929 :       if (ZREAD64(s->z_filefunc,s->filestream,szComment,uReadThis)!=uReadThis)

  00061	44 8b ce	 mov	 r9d, esi
  00064	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00068	4c 8b c7	 mov	 r8, rdi
  0006b	48 8b 53 60	 mov	 rdx, QWORD PTR [rbx+96]
  0006f	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  00073	ff d0		 call	 rax
  00075	3b c6		 cmp	 eax, esi
  00077	75 14		 jne	 SHORT $LN9@unzGetGlob
$LN6@unzGetGlob:

; 1931 :     }
; 1932 : 
; 1933 :     if ((szComment != NULL) && (uSizeBuf > s->gi.size_comment))

  00079	48 85 ff	 test	 rdi, rdi
  0007c	74 0b		 je	 SHORT $LN7@unzGetGlob
  0007e	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  00081	3b e8		 cmp	 ebp, eax
  00083	76 04		 jbe	 SHORT $LN7@unzGetGlob

; 1934 :         *(szComment+s->gi.size_comment)='\0';

  00085	c6 04 38 00	 mov	 BYTE PTR [rax+rdi], 0
$LN7@unzGetGlob:

; 1935 :     return (int)uReadThis;

  00089	8b c6		 mov	 eax, esi
  0008b	eb 05		 jmp	 SHORT $LN16@unzGetGlob
$LN9@unzGetGlob:

; 1930 :         return UNZ_ERRNO;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
$LN16@unzGetGlob:
  00092	48 8b 74 24 30	 mov	 rsi, QWORD PTR [rsp+48]

; 1936 : }

  00097	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  0009c	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]
  000a1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
unzGetGlobalComment ENDP
_TEXT	ENDS
END
